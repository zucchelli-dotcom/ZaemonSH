#! /usr/bin/env zsh -f

##########################################################################################
#                                                                                        #
#  ZaemonSH created by :                                                                 #
#  Zucchelli Bryan && @N@TOME && Admiral Gr@ss H0pper on Oct 13, 2016.                   #
#  Copyright (c) 2019. All rights reserved.                                              #
#  Inspired by zsh-templates-osx created by :                                            #
#  William Scott on May 11, 2007.                                                        #
#  Copyright (c) 2007. All rights reserved.                                              #
#                                                                                        #
#  This program is free software; you can redistribute it and/or modify it under         #
#  the terms of the GNU General Public License as published by the Free Software         #
#  Foundation; either version 2 of the License, or (at your option) any later version.   #
#                                                                                        #
#  This program is distributed in the hope that it will be useful, but WITHOUT           #
#  ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or                #
#  FITNESS FOR A PARTICULAR PURPOSE.                                                     #
#  See the GNU General Public License for more details.                                  #
#                                                                                        #
#  You should have received a copy of the GNU General Public License                     #
#  along with this program ; if not, write to the Free Software Foundation,              #
#  Inc., 51 Franklin Street, Fifth Floor, Boston,  MA 02110-1301 USA                     #
#                                                                                        #
#  cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html                             #
#                                                                                        #
##########################################################################################

#----------------------------------------------------------------------------------------#
#                                     DESCRIPTION
#----------------------------------------------------------------------------------------#
# prompt_bz_setup v0.0.2 : 
# Laptop oriented zsh prompt.

#----------------------------------------------------------------------------------------#
#                                        TODO
#----------------------------------------------------------------------------------------#
# 10/10/2017 :
#  • Add description.
# 01/08/2019 :
#  • Problem with completion and conditionnal color

#----------------------------------------------------------------------------------------#
#                                       CHANGES
#----------------------------------------------------------------------------------------#
# 10/10/2017 :
#  • Modifying Script presentation.
# 17/07/2019 :
#  • Temporally change battery capacity variable for both darwin and linux.
# 01/08/2019 :
#  • Add CONDCOLOR to prompt white=staff magenta=ssh yellow=admin red for root
# 2020-02-22 :
#  • Add FINDER GREEN RED for ON OFF (o_O)

#----------------------------------------------------------------------------------------#
#                                       CONFIG
#----------------------------------------------------------------------------------------#
local VERSION USER_NAME HOST_NAME DIR statu
VERSION="0.0.2"

# Uncomment to debug 
# set +x

USER_NAME='%n'
HOST_NAME='%m'
DIR='%~'
#----------------------------------------------------------------------------------------#
#                                      FUNCTIONS
#----------------------------------------------------------------------------------------#
##uncomment to debug
# {{{ Loading status
 #zshrc_primary_load_status() { echo "\033[1;32m• $* \e[0m" }
#}}}
# {{{ Loading status
 #zshrc_load_status () { echo "${YEL}  + Environment options load:${GREY} $*${NC}"}
#}}}

prompt_bz_help() {
    cat <<'EOF'
- BOO.
I usually use this in a white on black terminal.
EOF
}

prompt_bz_setup() {
local SMILLEY=':]'
local BADEY=':['
local re="%B%F{red}"
local gr="%F{green}"
#local gr="%B%F{green}"
local cy="%B%F{cyan}"
#local ye="%B%F{yellow}"
local ye="%F{yellow}"
local wh="%B%F{white}"
local rset="%b%f"
local smyol=$(if [[ "$(echo %?)" != 0 ]]; then echo "-+${re}$BADEY+-"; fi)
local SSH_TEST=$(echo "$SSH_CONNECTION" | awk '{ print $1":"$2"->"$3":"$4 }')
local testa=$(lsof -i 2>/dev/null | grep 'ssh' | awk '{ print $9 }' | sed 's/:ssh->.*//' | sort -u)
local teste=$(lsof -i 2>|/dev/null | grep ssh | awk '{print $9}' | sort -u | sed 's/->.*//' | sed 's/.*://')
local nopport=$(if [[ "$teste" == "ssh" ]]; then echo "$gr""SSHIN""$rset"; else echo "$re""SSHIN""$rset"; fi)
local popport=$(if [[ "$testa" == "" ]]; then echo "$re""SSHOUT""$rset"; else echo "$gr""SSHOUT""$rset"; fi)
local opport=$( [[ "$(echo $SSH_TEST)" == ":->:" ]] && echo  "$re""•••""$rset" || echo "$cy""$SSH_TEST""$rset")
local zshvers=$(echo $ZSH_PATCHLEVEL)
local finder=$( [[ ! $FINDER_RUN ]] &&  echo "${re}FINDER${rset}" || echo "${gr}FINDER${rset}" )
#show number of active CPUs
local nbcpu=$(sysctl hw.activecpu 2>/dev/null | sed s/'^hw.activecpu: '//)
#local raam=$(hostinfo 2/dev/null | sed -n '/Primary memory available/p' | sed -e 's/Primary memory available: *//' -e 's/\.[0-9][0-9] *megabytes.$//')


#####
if [[ $IS_MAC ]];then
        #ZUID=$(if [[ $LOGINNAM == "login" ]]; then echo ${UIDNAME} in ${LOGINNAME} with su; else echo ${EUID}:%B%F{red}${GID} ; fi)
        local versionNumber=$(sw_vers -productVersion) # Finds version number

        local versionMajor=`echo $versionNumber | cut -d'.' -f1`
        local versionMinor=`echo $versionNumber | cut -d'.' -f2`
        local versionShort="${versionMajor}.${versionMinor}"
        ## Version of OS X
        case $versionShort in
            10.12|10.13|10.14)
             local version="macOS ${versionNumber}"
             ;;
            *)
             local version="OS X ${versionNumber}"
             ;;
        esac
       
        case $versionShort in
        10.15)
            local versionString="Catalina"
             ;;
        10.14)
            local versionString="Mojave"
             ;;
        10.13)
             local versionString="High Sierra"
             ;;
        10.12)
             local versionString="Sierra"
             ;;
        10.11)
             local versionString="El Capitan"
             ;;
        10.10)
            local versionString="Yosemite"
             ;;
        10.9)
            local versionString="Mavericks"
             ;;
        10.8)
            local versionString="Mountain Lion"
             ;;
        10.7)
           local versionString="Lion"
             ;;
        10.6)
            local versionString="Snow Leopard"
             ;;
        10.5)
            local versionString="Leopard"
             ;;
        10.4)
            local versionString="Tiger"
             ;;
        10.3)
            local versionString="Panther"
             ;;
        10.2)
            local versionString="Jaguar"
             ;;
        10.1)
            local versionString="Puma"
             ;;
        10.0)
            local versionString="Cheetah"
             ;;
     esac
    
 	 local capacity="$(pmset -g batt | egrep "([0-9]+\%).*" -o --colour=auto | cut -f1 -d';')%"
     local statu=$(echo $(pmset -g batt | egrep "([0-9]+\%).*" -o --colour=auto | cut -f2 -d';'))
	 local mdel=$(sysctl hw.model | awk '{print$2}')
   	 local vrs="$version $versionString" # $(defaults read loginwindow SystemVersionStampAsString)"
     local mem=$(sysctl -n hw.memsize)
     local ram="$((mem/1073741824)) GB"
     local cpu="$(sysctl -n machdep.cpu.brand_string)"
  
    
    if [[ $IS_SU ]]; then 
       #LOGINNAM=$(id -p | grep login | awk '{print $1}' | grep -v '_*')
	   local LOGINNAME=$(id -p | grep login | awk '{print $2}')
       local UIDNAME=$(id -p | grep uid | awk '{print $2}')
       local ZUID="${re}su ${UIDNAME}_on ${LOGINNAME}${rset}]";
   else 
       local ZUID="${re}${EUID}:${re}${GID}${rset}"

    fi
fi

#####
if [[ $IS_LINUX ]];then
	#####
	#/!\#
	##### Déterminer si sur un &portable ou non
	##### Correct - patch
    local ChgSta="$(cat /sys/class/power_supply/AC/online)" # 1 online 0 not
    local battNbr="$(ls /sys/class/power_supply | grep "^BAT" | wc -l)" 
    if (( ${ChgSta} == 1 )); then
        local statu=$(echo ${gr}Charging${rset})
    else
        local statu=$(echo ${re}Discharging${rset})
    fi
    if (( ${battNbr} != 0 )); then
        local capacity0="$(cat "/sys/class/power_supply/BAT0/capacity")"
        local capacity1="$(cat "/sys/class/power_supply/BAT1/capacity")"
        local capacity="$(echo ${gr}BAT0${rset}: ${re}${capacity0}${rset} ${gr}BAT1${rset}: ${re}${capacity1} ${rset})"
    # else
    #     local capacity="-"
	    # local	statu="-"
    fi
    	##########
	local mdel=$(cat /sys/devices/virtual/dmi/id/product_name)
	local vrs=$(cat /etc/*-release | tail -n1)
    local ZUID="${re}${EUID}:${re}${GID}${rset}"
    local cpu=$(echo $(cat /proc/cpuinfo | grep "model name" | sort -u | sed 's/.*://'))
fi

  #############################
  #### Change banner to :
  # local CONDCOLOR=''
  ##  magenta for ssh on.
  if [[ -z $DISPLAY ]] && [ $SSH_CONNECTION ]; then
          export DISPLAY=SSH
          CONDCOLOR=${cy}
  fi

  ## White for satff
  #if [[ -n $(groups | grep -w staff 2>/dev/null ) ]] &&  [ ! $(groups | grep -w admin 2>/dev/null) ] && [ ! $(groups | grep -w wheel 2>/dev/null ) ]; then
  if [[  $IS_USER == 1 ]]; then
          CONDCOLOR=${gr}
  fi

  ## Yellow for admin
  #if [[ -n $(groups | grep -w admin 2>/dev/null ) ]] || [[ -n $(groups | grep -w wheel 2>/dev/null ) ]]; then
  if [[ $IS_ADMIN  == 1 ]]; then
          CONDCOLOR=${ye}
  fi

  ### Change banner to red if root.
  #if [[ $UID == 0 ]]; then
  if [[ $IS_ROOT == 1 ]]; then
  #if [[ -n $(/usr/bin/id -p $USER | grep -w admin ) ]]; then
          CONDCOLOR=${re}
  fi
    


local upt=$(uptime | awk '{print $2 $3}' | sed s'/.$//')
local oldpd=$(print -rP "%35<..<$OLDPWD")

# PS1="
# [${gr}$zshvers${rset}][${gr}ZaemonSh:"$ZAEMONBASENB"v"$ZAEMONSHVERSION"${rset}][${gr}$upt${rset}][${gr}histo:%h${rset}]------+
# [Model:${re}$mdel%b%f-Version:${re}$vrs${rset}]
# [CPU:${re}$cpu${rset}]
# [Batteries:${gr}$capacity%-$statu${rset}][Ram:${re}$ram${rset}]
# [$nopport][$popport $opport][$finder]
# |
# |
# [${ye}×%*×${rset}][${ZUID}][${CONDCOLOR}%n%k@%m${rset}]>${rset}"

PS1="
[${gr}$zshvers${rset}][${gr}ZaemonSh:"$ZAEMONBASENB"v"$ZAEMONSHVERSION"${rset}][${gr}$upt${rset}][${gr}histo:%h${rset}]------+
[Model:${re}$mdel%b%f-Version:${re}$vrs${rset}]
[Batteries:${gr}$capacity-$statu${rset}][Ram:${re}$ram${rset}]
[$nopport][$popport $opport][$finder]
|
|
[${ye}×%*×${rset}][${ZUID}][${CONDCOLOR}%n%k@%m${rset}]>${rset}"
PS2=">${rset}"
PS4="+%N:%i:%_>"
RPS1="${wh}--+${gr}$(echo '%40<..<%d' )%f%b%F%B %(?..$smyol)%b"
#RPS1=""
}

#-------------------------------------------------------------------------------------------#
#                                              SCRIPT
#-------------------------------------------------------------------------------------------#
# prompt_bz_setup "$@"
prompt_bz_setup 
unset CONDCOLOR
unset LOGINNAM
unset LOGINNAME
unset ZUID
# Uncomment this for debugging purposes or verbose startup:
#zshrc__load_status "Prompt_bz_setup finished."

