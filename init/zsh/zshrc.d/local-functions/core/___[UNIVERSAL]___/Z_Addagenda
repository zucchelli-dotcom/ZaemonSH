#! /usr/bin/env zsh -f

##########################################################################################
#                                                                                        #
#  ZaemonSH created by :                                                                 #
#  Zucchelli Bryan && @N@TOME && Admiral Gr@ss H0pper on Oct 13, 2016.                   #
#  Copyright (c) 2020. All rights reserved.                                              #
#  Inspired by zsh-templates-osx created by :                                            #
#  William Scott on May 11, 2007.                                                        #
#  Copyright (c) 2007. All rights reserved.                                              #
#                                                                                        #
#  This program is free software; you can redistribute it and/or modify it under         #
#  the terms of the GNU General Public License as published by the Free Software         #
#  Foundation; either version 2 of the License, or (at your option) any later version.   #
#                                                                                        #
#  This program is distributed in the hope that it will be useful, but WITHOUT           #
#  ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or                #
#  FITNESS FOR A PARTICULAR PURPOSE.                                                     #
#  See the GNU General Public License for more details.                                  #
#                                                                                        #
#  You should have received a copy of the GNU General Public License                     #
#  along with this program ; if not, write to the Free Software Foundation,              #
#  Inc., 51 Franklin Street, Fifth Floor, Boston,  MA 02110-1301 USA                     #
#                                                                                        #
#  cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html                             #
#                                                                                        #
##########################################################################################

#----------------------------------------------------------------------------------------#
#                                     DESCRIPTION
#----------------------------------------------------------------------------------------# 
# Z_Addagenda :
# Z_Addagenda - prompt the user to add a new event for the Agenda script

#----------------------------------------------------------------------------------------#
#                                        TODO
#----------------------------------------------------------------------------------------#


#----------------------------------------------------------------------------------------#
#                                       CHANGES
#----------------------------------------------------------------------------------------#
# 28/09/2017 :
# - Reorder function :
# • Replace exit with return
# 02/02/2020 :
#  • Debug script, adding description and man page.
# 04/02/2020 :
#  • Remove Z_Restart ending and replacing with local []='' at script starting.

#-------------------------------------------------------------------------------------------#
#                                              CONFIG
#-------------------------------------------------------------------------------------------#
local VERSION FCT_NAME
VERSION="0.0.1"
FCT_NAME="Z_Addagenda"

agendafile="$HOME/.agenda"
local word1=''
local word2=''
local word3=''
local junk=''
local date=''
local description=''
local record=''
local retval=''

# ###
# # Looks best on a te$RMinal with black background.....
# clear

#----------------------------------------------------------------------------------------#
#                                      FUNCTIONS
#----------------------------------------------------------------------------------------#
banner () {
     clear
     echo " ##############################################################################"
     echo " #                                                                            #"
     echo " #  ${GREEN}This is ${RED}$FCT_NAME: ${YEL}$VERSION on ${GREEN}$OSTYPE${NC}${YEL} system.${NC}"
     echo " #  CopyL®®v 2020, Zucchelli Bryan                                            #"
     echo " #                                                                            #"
     echo " #  Unless required by applicable law or agreed to in writing, software       #"
     echo " #  distributed under the License is distributed on an AS IS BASIS,           #"
     echo " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #"
     echo " #  See the License for the specific language governing permissions and       #"
     echo " #  limitations under the License.                                            #"
     echo " #                                                                            #"
     echo " ##############################################################################"
     echo ""
}

help(){
  cat<<__EOF__
  ${RED}
    usage:  [  ]

    Examples:
                                                 # .

  ${NC}
__EOF__
}

isDayName() {
if [[ $LANG == "fr_FR.UTF-8" ]]; then
    # return = 0 if all is well, 1 on error
    case $(echo $1 | tr '[[:upper:]]' '[[:lower:]]') in
        # In French
        dim*|lun*|mar*|mer*|jeu*|ven*|sam*) retval=0	;;
        * ) retval=1 ;;
    esac
    return $retval
elif [[ $LANG == "en_EN.UTF-8" ]]; then
   # In English
    case $(echo $1 | tr '[[:upper:]]' '[[:lower:]]') in
         sun*|mon*|tue*|wed*|thu*|fri*|sat*) retval=0	;;
    * ) retval=1 ;;
    esac
    return $retval
fi
}

isMonthName() {
if [[ $LANG == "fr_FR.UTF-8" ]]; then
    case $(echo $1 | tr '[[:upper:]]' '[[:lower:]]') in 
      # In French
      jan*|fév*|mar*|avr*|mai*|jui*)	return 0	;;
      jul*|aoû*|sep*|oct*|nov*|déc*)	return 0	;;
        * ) return 1 	;;
    esac
elif [[ $LANG == "en_EN.UTF-8" ]]; then
    case $(echo $1 | tr '[[:upper:]]' '[[:lower:]]') in 
      # In Engish
      jan*|feb*|mar*|apr*|may*|jun*)	return 0	;;
      jul*|aug*|sep*|oct*|nov*|dec*)	return 0	;;
        * ) return 1 	;;
    esac
fi
}

normalize() {
  # return string with first char uppercase, next two lowercase
  echo -n $1 | cut -c1  | tr '[[:lower:]]' '[[:upper:]]'
  echo  $1 | cut -c2-3 | tr '[[:upper:]]' '[[:lower:]]'
}

#-------------------------------------------------------------------------------------------#
#                                          SCRIPT
#-------------------------------------------------------------------------------------------#  
emulate -L zsh
banner

if [ ! -w $HOME ] ; then
  echo "$0: cannot write in your home directory ($HOME)" >&2
  return 1  
fi

echo "Agenda: The Unix Reminder Service"
echo -n "Date of event (day mon, day month year, or dayname): "
read word1 word2 word3 junk

if isDayName $word1 ; then
  	if [ ! -z "$word2" ] ; then
   		echo "Bad dayname format: just specify the day name by itself." >&2
   		return 1
  fi
else
  if [ -z "$word2" ] ; then
   		echo "Bad dayname format: unknown day name specified" >&2
   		return 1
  fi

  if [ ! -z "$(echo $word1|sed 's/[[:digit:]]//g')" ]  ; then
    echo "Bad date format: please specify day first, by day number" >&2
    return 1
  fi

  if [ "$word1" -lt 1 -o "$word1" -gt 31 ] ; then
    echo "Bad date format: day number can only be in range 1-31" >&2
    return 1
  fi

  if ! isMonthName $word2 ; then
    echo "Bad date format: unknown month name specified." >&2
    return 1
  fi

 # word2="$(normalize $word2)"
  if [ -z "$word3" ] ; then
    date="$word1$word2"
  else
    if [ ! -z "$(echo $word3|sed 's/[[:digit:]]//g')" ] ; then
      echo "Bad date format: third field should be year." >&2
      return 1
    elif [ $word3 -lt 2000 -o $word3 -gt 2500 ] ; then
      echo "Bad date format: year value should be 2000-2500" >&2
      return 1
    fi
    date="$word1$word2$word3"
  fi
fi

echo -n "One line description: "

read description
# ready to write to datafile
if [ ! -f $agendafile ]; then
    touch $agendafile
fi

record=$(date)
echo "$(echo $date|sed 's/ //g')|$description|$record" >> $agendafile

