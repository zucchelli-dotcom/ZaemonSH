#! /usr/bin/env zsh -f

##########################################################################################
#                                                                                        #
#  ZaemonSH created by :                                                                 #
#  Zucchelli Bryan && @N@TOME && Admiral Gr@ss H0pper on Oct 13, 2016.                   #
#  Copyright (c) 2020. All rights reserved.                                              #
#  Inspired by zsh-templates-osx created by :                                            #
#  William Scott on May 11, 2007.                                                        #
#  Copyright (c) 2007. All rights reserved.                                              #
#                                                                                        #
#  This program is free software; you can redistribute it and/or modify it under         #
#  the terms of the GNU General Public License as published by the Free Software         #
#  Foundation; either version 2 of the License, or (at your option) any later version.   #
#                                                                                        #
#  This program is distributed in the hope that it will be useful, but WITHOUT           #
#  ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or                #
#  FITNESS FOR A PARTICULAR PURPOSE.                                                     #
#  See the GNU General Public License for more details.                                  #
#                                                                                        #
#  You should have received a copy of the GNU General Public License                     #
#  along with this program ; if not, write to the Free Software Foundation,              #
#  Inc., 51 Franklin Street, Fifth Floor, Boston,  MA 02110-1301 USA                     #
#                                                                                        #
#  cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html                             #
#                                                                                        #
##########################################################################################

#----------------------------------------------------------------------------------------#
#                                     DESCRIPTION
#----------------------------------------------------------------------------------------#
# Z_note :
  
#  When I sit down to work, I need to remember what I did during my last
#  session. Of course, in order to help me remember tomorrow, I need to
#  write down what I do today.
#
#  This script helps out. Simply run it via: `Z_Note`
#  and enter in a label that describes the work you plan on doing. Usually
#  some sort of bug ID or task reference (as long as it doesn't have any
#  spaces, it should work).
#
#  If the work is continuing what you did yesterday (the last time you ran
#  the script, then it will bring that information up in your editor,
#  along with a new file.
#
#  Another directory with filenames of dates are symbolic links to these
#  files. This allows you to quickly find them.
#
#  You don't have to run this with any parameters, but you can use:
#
#  -c  Don't create a new file, but start editing the previous file.
#  -d  Specifies the main directory that will store all the subdirectories
#  -e  The editor to use. Defaults to the $EDITOR variable
#  -g  The 'grouping' is the directory that stores the individual files.
#      This defaults to "work"
#  -l  The label (note name). If not given, it will prompt for it
#  -r  Executes a command and uses the output for the contents of the file
#  -t  A "name" to tag all the files (and symbolic links) we create
#  -x  Specifies the extension to use.
#  -v  A *verbose* output of all the files we have ... good at first.

#----------------------------------------------------------------------------------------#
#                                        TODO
#----------------------------------------------------------------------------------------#
# 01/02/2020 :
# • Correct all options
# • Now the script run as it! Make better journal
# 2020-08-16 :
# • Debug script
# • To finish

#----------------------------------------------------------------------------------------#
#                                       CHANGES
#----------------------------------------------------------------------------------------#
# 30/07/2017 :
#  • Create this one .
# 19/08/2019 :
#  • Partially correct script.
# 01/02/2020 :
#  • Finished to correct script.

#----------------------------------------------------------------------------------------#
#                                       CONFIG
#----------------------------------------------------------------------------------------#
#######################
## COMMAND VARIABLES ##
#######################
local VERSION FCT_NAME OPENMETA EXTENSION 

VERSION="0.0.1"
FCT_NAME="$(echo $0)"

# The openmeta, if available, tags the files on Mac OS X
OPENMETA=`type -p ${OPENMETA:-openmeta}`

# EXTENSION="txt"
#EXTENSION="md"
EXTENSION="${EXTENSION:-txt}"

# NOTEDIR=${NOTEDIR:-$P_SYSETCDIR/notes/NotesOnair}
NOTEDIR="$ZDOT/zshrc.d/local-functions/etc/notes/NotesOnair"
#WORK_DATE_DEST=${WORK_DATE_DEST:-$NOTEDIR/.journal}
WORK_DATE_DEST="$ZDOT/zshrc.d/local-functions/etc/notes/NotesOnair/.journal"
#----------------------------------------------------------------------------------------#
#                                      FUNCTIONS
#----------------------------------------------------------------------------------------#
banner () {
     clear
     echo " ##############################################################################"
     echo " #                                                                            #"
     echo " #  ${GREEN}This is ${RED}$FCT_NAME: ${YEL}$VERSION on ${GREEN}$OSTYPE${NC}${YEL} system.${NC}"
     echo " #  CopyL®®v 2020, Zucchelli Bryan                                            #"
     echo " #                                                                            #"
     echo " #  Unless required by applicable law or agreed to in writing, software       #"
     echo " #  distributed under the License is distributed on an AS IS BASIS,           #"
     echo " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #"
     echo " #  See the License for the specific language governing permissions and       #"
     echo " #  limitations under the License.                                            #"
     echo " #                                                                            #"
     echo " ##############################################################################"
     echo ""
}

help(){
  echo "${RED}"
  cat<<__EOF__
    Usage: $FCT_NAME [-l label] [-t tag] [-x ext] [-d destination] [-g group_name] [-e editor]
__EOF__
echo ${NC}
}

# We need to create a unique filename with a _01 or _04
# appended to the end of the name (but before the extension).
function uniqueFilename() {
    DIR=$1
    FILENAME=$2

    NUM=1
    FULLNUM="01"
    FULLNAME=$(printf "%s/%s_%02d.%s" $DIR $FILENAME $NUM $EXTENSION)

    while [[ $(ls ${DIR}/${FILENAME}_${FULLNUM}.* 2>/dev/null) ]]
    do
        # CONTINUED=$(ls ${DIR}/${FILENAME}_${FULLNUM}.md >/dev/null 2>&1)
        CONTINUED=$(ls ${DIR}/${FILENAME}_${FULLNUM}.${EXTENSION} >/dev/null 2>&1)
        NUM=`expr $NUM + 1`
        FULLNUM=$(printf "%02d" $NUM) # Append 0 to {1..9}
        FULLNAME=$(printf "%s/%s_%02d.%s" $DIR $FILENAME $NUM $EXTENSION)
    done

    if [[ "$CONTINUE" == "y" ]] && [[ -n "$CONTINUED" ]]
    then
        echo "$CONTINUED"
    else
        echo "$FULLNAME"
    fi
}

#-------------------------------------------------------------------------------------------#
#                                              SCRIPT
#-------------------------------------------------------------------------------------------#
banner
FIRSTGROUP="$GROUP"
# echo "$1"
# echo "$FIRSTGROUP"
# if [[ $FIRSTGROUP != "work" ]] && [[ $1 == "\-c" ]]; then
if [[ $# == "0" ]]; then
     GROUP='work'
     # GROUP="${GROUP:-work}"
elif [[ $FIRSTGROUP ]] && [[ $FIRSTGROUP != "work" ]] ; then
    GROUP="$FIRSTGROUP"
else
    # If you don't give a -g, this is the default directory where to write
    # the notes:
    # GROUP="${GROUP:-work}"
    GROUP='work'
fi
# fi
CURRENT_ID=''
CONTINUE=''
VERBOSE=''
# The first option to be examined may be changed by explicitly assigning to OPTIND.
# OPTIND has an initial value of 1, and is normally set to 1 upon entry to a shell
# function and restored upon exit (this is disabled by the POSIX_BUILTINS option)
# Very Funky!
[[ $(echo ${(k)options} | grep -w posixbuiltins) ]] && OPTIND="1"
# echo "OPTIND=$OPTIND"
while getopts ":cd:e:g:hl:rt:x:v" opt; do
    case "$opt" in
        c) 
            CONTINUE="y"
            ;;
        d)  
            NOTEDIR="$OPTARG"
            ;;
        e)  
            EDITOR="$OPTARG"
            ;;
        g)  
            GROUP="$OPTARG"
            ;;
        l)  
            CURRENT_ID="$OPTARG"
            ;;
        r)  
            RUNTHIS="$OPTARG"
            ;;
        t)  
            TAG="$OPTARG"
            ;;
        x)  
            EXTENSION="$OPTARG"
            ;;
        v) 
            VERBOSE=1
            ;;
        h) echo "${GREEN}Usage: $FCT_NAME [-l label] [-t tag] [-x ext] [-d destination] [-g group_name] [-e editor] [-h help]${NC}"
            return 1
            ;;
        \?) echo "Usage: $FCT_NAME [-l label] [-t tag] [-x ext] [-d destination] [-g group_name] [-e editor]"
            return 1
            ;;
    esac
done
shift $((OPTIND - 1))

WORK_BYID_DEST="$NOTEDIR/$GROUP"

echo ""
echo "$LINE"
echo "CONTINUE="$CONTINUE
echo "GROUP=$GROUP"
echo "CURRENT_ID=$CURRENT_ID" 
echo "VERBOSE=$VERBOSE"
echo "WORK_BYID_DEST=$WORK_BYID_DEST"
echo "$LINE"
echo ""

mkdir -p "$WORK_DATE_DEST" 2>/dev/null
mkdir -p "$WORK_BYID_DEST" 2>/dev/null

# Store the latest label used, so that we can have a good default:
CURRENT_ID_FILE="${WORK_BYID_DEST}/.current_id"

if [ -z "$CURRENT_ID" ]
then
# Prompt for a "label" to use. This is the filename of what we'll write:
    if [ -f "$CURRENT_ID_FILE" ]
    then
        CURRENT_ID=$(cat $CURRENT_ID_FILE)
        echo -n "Enter new '$GROUP' label [${CURRENT_ID}]: "

    else
        echo $GROUP
        CURRENT_ID="work"
        # CURRENT_ID="$GROUP"
        if [[ $CURRENT_ID == "work" ]] && [[ $CONTINUE == "y" ]] && [[ -f $NOTEDIR/$GROUP/latest ]]; then
            vim "$NOTEDIR/$GROUP/latest"
            return 0
        else
              echo -n "Enter new '$GROUP' label, e.g. ORDERS-883: "
        fi      
    fi
    read answer
    if [ -n "$answer" ]; then
       CURRENT_ID="$answer"
       # Now we want to edit the *last* file entries. We know the latest
       # because we will store that filename is a file called .latest
       if  [[ "$CONTINUE" == "y" ]] && [[ -f $NOTEDIR/$GROUP/latest ]]; then
           vim "$NOTEDIR/$GROUP/latest"
           return O
       fi
    fi
fi

## Create the file. Right now, this is blank, but we could pre-populate it
## with some sort of template....
FILENAME_WORK=$(uniqueFilename "$WORK_BYID_DEST" "$CURRENT_ID" 2>/dev/null)

echo ""
echo "$LINE"
echo "GROUP=$GROUP"
echo "CURRENT_ID=$CURRENT_ID"
echo "FILENAME_WORK=$FILENAME_WORK"

## Were we given a command to run? Let's run it. This allows us
## to start with some sort of skeleton feature... like:
##    -r 'date'
#if [ -n "$RUNTHIS" ]
#then
#    #sh $RUNTHIS > "$FILENAME_WORK"
#    zsh $RUNTHIS > "$FILENAME_WORK"
#else
#    touch "$FILENAME_WORK"
#fi

if [[ ! -e $CURRENT_ID_FILE  ]]; then
    # Store the general name of this file (the label) in the ID File:
    echo -n "$CURRENT_ID" > "$CURRENT_ID_FILE" 1>/dev/null 2>/dev/null
else
    rm $CURRENT_ID_FILE    
    echo -n "$CURRENT_ID" > "$CURRENT_ID_FILE" 1>/dev/null 2>/dev/null
fi

## Create a symbolic link to this new file with a filename of "today's date":
#TODAY=$(date '+%Y-%m-%d')
# local TODAY=$(date '+%Y-%m-%d_%H%M%S')
TODAY="$(date '+%Y-%m-%d_%H%M%S')_$CURRENT_ID"
FILENAME_DATE=$(uniqueFilename "$WORK_DATE_DEST" "$TODAY" 2>/dev/null)
echo "FILENAME_DATE=$FILENAME_DATE"
echo "$LINE"

echo ""
echo "$LINE"
echo $NOTEDIR
# echo $EDITOR
echo $GROUP
echo $FILENAME_WORK 
echo $FILENAME_DATE
echo "$LINE"

##ln -s ../$GROUP/`basename "$FILENAME_WORK"` "$FILENAME_DATE" 2>/dev/null
# ln -s $NOTEDIR/$GROUP/`basename "$FILENAME_WORK"` "$FILENAME_DATE"_`basename "$FILENAME_WORK"`  2>/dev/null
ln -s "$FILENAME_WORK"  "$FILENAME_DATE"

## Create another symbolic link based on the day of the week. This is helpful
## for reading "what did I do last friday..."
DAY=$(date +%A | tr 'A-Z' 'a-z')
rm -f "$WORK_DATE_DEST/$DAY" 2>/dev/null
#ln -s `basename "$FILENAME_WORK"` "$WORK_DATE_DEST/$DAY" 2>/dev/null
# ln -s $NOTEDIR/$GROUP/`basename "$FILENAME_WORK"` "$WORK_DATE_DEST/$DAY" 2>/dev/null
ln -s "$FILENAME_WORK" "$WORK_DATE_DEST/$DAY" 2>/dev/null


## The last entry we've created will always be readable by the "latest"
## symbolic link...
rm -f "$WORK_BYID_DEST/latest" >/dev/null
##ln -s `basename "$FILENAME_WORK"` "$WORK_BYID_DEST/latest"  2>/dev/null
#ln -s $NOTEDIR/$GROUP/`basename "$FILENAME_WORK"` "$WORK_BYID_DEST/latest"  2>/dev/null
ln -s "$FILENAME_WORK" "$WORK_BYID_DEST/latest" 2>/dev/null

## Tag 'em with the same ID...
#if [ -f "$OPENMETA" ]
#then
#    $OPENMETA -a $CURRENT_ID -p "$FILENAME_DATE"  >/dev/null
#    $OPENMETA -a $CURRENT_ID -p "$FILENAME_WORK"  >/dev/null

#    if [ -n "$TAG" ]
#    then
#        $OPENMETA -a $TAG -p "$FILENAME_DATE"  >/dev/null
#        $OPENMETA -a $TAG -p "$FILENAME_WORK"  >/dev/null
#    fi
#fi

## # Now we want to edit the *last two* file entries. We know the latest
## # because we will store that filename is a file called .latest
## if [ -f "$WORK_BYID_DEST/.latest" ]
## then
##     FILES=$(cat "$WORK_BYID_DEST/.latest")
## fi

### echo -n "$FILENAME_WORK" > "$WORK_BYID_DEST/.latest" 2>/dev/null

# This is only helpful at first when you are getting the feel for all
# of the files and symbolic links this script creates.
if [ -n "$VERBOSE" ]
then
    echo "$WORK_DATE_DEST :"
    ls -l "$WORK_DATE_DEST"
    echo "$WORK_BYID_DEST :"
    ls -l "$WORK_BYID_DEST"
fi

## Whew ... it is about time we started our editor, eh?
##exec ${EDITOR:-aquamacs} "$FILES" "$FILENAME_WORK"
##exec ${EDITOR:-nano}  "$FILENAME_WORK"
##exec ${VISUALEDITOR:-$VISUALEDITOR} "$FILES" "$FILENAME_WORK"
#echo "CURRENT_ID=$CURRENT_ID"    
$EDITOR "$FILENAME_WORK"
return 0
