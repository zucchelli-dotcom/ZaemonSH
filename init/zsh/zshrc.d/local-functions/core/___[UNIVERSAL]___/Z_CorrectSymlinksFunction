#! /usr/bin/env zsh -f

##########################################################################################
#                                                                                        #
#  ZaemonSH created by :                                                                 #
#  Zucchelli Bryan && @N@TOME && Admiral Gr@ss H0pper on Oct 13, 2016.                   #
#  Copyright (c) 2020. All rights reserved.                                              #
#  Inspired by zsh-templates-osx created by :                                            #
#  William Scott on May 11, 2007.                                                        #
#  Copyright (c) 2007. All rights reserved.                                              #
#                                                                                        #
#  This program is free software; you can redistribute it and/or modify it under         #
#  the terms of the GNU General Public License as published by the Free Software         #
#  Foundation; either version 2 of the License, or (at your option) any later version.   #
#                                                                                        #
#  This program is distributed in the hope that it will be useful, but WITHOUT           #
#  ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or                #
#  FITNESS FOR A PARTICULAR PURPOSE.                                                     #
#  See the GNU General Public License for more details.                                  #
#                                                                                        #
#  You should have received a copy of the GNU General Public License                     #
#  along with this program ; if not, write to the Free Software Foundation,              #
#  Inc., 51 Franklin Street, Fifth Floor, Boston,  MA 02110-1301 USA                     #
#                                                                                        #
#  cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html                             #
#                                                                                        #
##########################################################################################

#----------------------------------------------------------------------------------------#
#                                     DESCRIPTION
#----------------------------------------------------------------------------------------#
# Z_CorrectSymlinksFunction :
 # Zucchelli Bryan, nov 09 2017
 # Refresh symlinks functions. 

#----------------------------------------------------------------------------------------#
#                                        TODO
#----------------------------------------------------------------------------------------#
# 09/01/2018 :
# • Make a completion.
# 15/03/2020 :
# • Add core folder correction
# • Simplify and clean script

#----------------------------------------------------------------------------------------#
#                                       CHANGES
#----------------------------------------------------------------------------------------#
# 09/10/2017 :
# • Make function and Clean script
# 12/11/2017 :
# • Create 3 options : 
#   for linux, darwin and all symlinks ZeamonSH functions.
# 11/01/2018 :
# • exclude zip file.
# 21/017/2019 :
# • Change script structure 
# 31/017/2019 :
# • Add binaries symlinks correcton 
# 19/02/2020 :
# • Add zcompile -U to obtain compile .zwc file and then copy to $P_SYSFCTDIR/$core-$darwin-$universal
# 15/03/2020 :
# • Add with/out compile option to work on files more easily.
# 2020-07-27 :
# • Add condition [ $IS_MAC/$IS_LINUX ] on case statement.


#----------------------------------------------------------------------------------------#
#                                       CONFIG
#----------------------------------------------------------------------------------------#
#######################
## COMMAND VARIABLES ##
#######################
local VERSION FCT_NANME

VERSION="v0.0.2"
FCT_NAME="Z_CorrectSymlinksFunction"

#----------------------------------------------------------------------------------------#
#                                      FUNCTIONS
#----------------------------------------------------------------------------------------#
# function banner {{{
banner () {
     clear
     echo " ##############################################################################"
     echo " #                                                                            #"
     echo " #  ${GREEN}This is ${RED}$FCT_NAME: ${YEL}$VERSION on ${GREEN}$OSTYPE${NC}${YEL} system.${NC}"
     echo " #  CopyL®®v 2020, Zucchelli Bryan                                            #"
     echo " #                                                                            #"
     echo " #  Unless required by applicable law or agreed to in writing, software       #"
     echo " #  distributed under the License is distributed on an AS IS BASIS,           #"
     echo " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #"
     echo " #  See the License for the specific language governing permissions and       #"
     echo " #  limitations under the License.                                            #"
     echo " #                                                                            #"
     echo " ##############################################################################"
     echo ""
}
#}}}

# function correctforall {{{
correctforall(){
    echo "${NC}"
    echo "  >> We correct all ZeamonSH symlinks functions."
    echo "${LINE}"
    for systemtype in core darwin universal linux; do
        find $P_SYSFCTDIR/$systemtype -type l -exec rm {} \;
        #for zad in $(find $P_SYSFCTDIR/$systemtype -type f | grep -v "DS_Store" | grep -v "___000_README.txt" ); do
        for zad in $(find $P_SYSFCTDIR/$systemtype \! -name "*.zip" -type f | grep -v "DS_Store" | grep -v "___000_README.txt" ); do
            ln -s "$zad" $P_SYSFCTDIR/$systemtype
            done
            echo "" 
            echo "${GREEN}  • $systemtype symlinks functions are corrected.${NC}"
            # Debug 
            echo "${BRED}"
        done
        echo "${NC}${LINE}"
    echo "  ${GREEN}>> All ZeamonSH functions symlinks corrected.${NC}"
    echo "${NC}" 
}
#}}}

# function correctforlinuxc {{{
correctforlinuxc(){
    find $P_SYSFCTDIR -type f -name "*.zwc" -exec rm -f {} \;
    find $P_SYSFCTDIR -type l -exec rm -f {} \;
echo "${NC}"
    echo "  >> We correct ZaemonSH binaries and functions symlinks for linux. "
    echo "${LINE}"
    sysList=( $(print -l core/${(k)corfctlistbycategory} | grep -v "OSX") linux universal )
    for ((i=1 ; i<=${#sysList}; i++)); do
        systemtype=( $sysList[$i] )
        clear
        echo ${YEL}systemtype=${(qqq)systemtype}${NC}
            for zud in $( find $P_SYSFCTDIR/$systemtype -type f | grep -v ".zip\|.DS_Store\|.txt\|.zwc\|\[OSX\]" ); do
                # echo "--zud=$zud"
                ln -s $zud "$P_SYSFCTDIR/${systemtype%/*}"
                for zid in $(echo ${${zud##*/}%.*} | grep -v "^_"); do
                    # Since version 4.1.7, it has been possible to compile functions to their
                    # internal format. It doesn’t make the functions run any faster, it just reduces
                    # their loading time; the shell just has to bring the function into memory,
                    # then it ‘runs it as it does any other function.
                    # echo "" && echo "$zud"; 
                    if [[ -e $zud.zwc ]]; then
                        echo "${WG} ${NC}$zid.zwc function already compiled."
                        echo "${GREEN} zrecompiling $zid ...${NC}"
                        wait
                        zrecompile "$zud"
                        wait
                        echo "${WG} ${NC}$zid function recompiled."
                        wait
                    else
                        echo "${GREEN} Compiling $zid ...${RED}"
                        wait
                        zcompile -U "$zud"
                        wait
                        echo "${NC}${WG} ${NC}$zid function ${GREEN}compiled.${NC}"
                        wait
                    fi
                #     cp $zud.zwc $P_SYSFCTDIR/$systemtype
                      cp $zud.zwc "$P_SYSFCTDIR/${systemtype%/*}"
                    wait
                    echo "${WG} ${NC}$zid compiled function copy completed."  
                done
             done
        echo ""
        echo "${GREEN}  • $systemtype symlinks functions are corrected.${NC}"
        # Debug 
        echo "${BRED}"
        echo "" 
    done
    
    find $ZDOT/bin -maxdepth 1 -type l -exec rm {} \;
    for sim in $(find $ZDOT/bin  -maxdepth 3 -type f  | grep -v ".zip\|.DS_Store\|.txt\|.zwc\|.pl\|___OSX") ; do
          chown "$USER":"$USER" $sim
          chmod go-rwx $sim
          ln -s $sim $ZDOT/bin
    done
    echo "${GREEN}  • Linux binaries symlinks are corrected.${NC}"
    echo "${LINE}"
    echo "  ${GREEN}>> ZaemonSH Symlinks functions and binaries corrected for linux.${NC}"
    echo "${NC}" 
} 
#}}}

# function correctforlinux {{{
correctforlinux(){
    find $P_SYSFCTDIR -type f -name "*.zwc" -exec rm -f {} \;
    find $P_SYSFCTDIR -type l -exec rm -f {} \;
    sleep 2

    echo "${NC}"
    echo "  >> We correct ZaemonSH binaries and functions symlinks for Linux. "
    echo "${LINE}"
    sysList=( $(print -l core/${(k)corfctlistbycategory} | grep -v "OSX") linux universal )
    for ((i=1 ; i<=${#sysList}; i++)); do
        systemtype=( $sysList[$i] )
        clear
        echo ${YEL}systemtype=${(qqq)systemtype}${NC}
            for zud in $( find $P_SYSFCTDIR/${systemtype} -type f  | grep -v ".zip\|.DS_Store\|.txt\|.zwc\|\[OSX\]"); do
                # echo "-------------------------------------------"
                # echo "${CYAN}--zud=$zud${NC}"
                # echo --correct_systemtype=${systemtype%/*}
                # echo --correct_path_systemtype=$P_SYSFCTDIR/${systemtype%/*}
                ln -s $zud  "$P_SYSFCTDIR/${systemtype%/*}"
                # echo "-------------------------------------------"
                # echo ""
                # echo ""
                # echo ""

            done
        echo "${GREEN}  • $systemtype symlinks functions are corrected.${NC}"
        # Debug 
        echo "${BRED}"
        echo "" 
    done


    
    
    find $ZDOT/bin -maxdepth 1 -type l -exec rm -f {} \;
    for sim in $(find $ZDOT/bin -maxdepth 3  -type f | grep -v ".zip\|.DS_Store\|.txt\|.zwc\|.pl\|___OSX") ; do
          chown "$USER":"$USER" $sim
          chmod go-rwx $sim
          ln -s $sim $ZDOT/bin
    done
    echo "${GREEN}  • Linux binaries symlinks are corrected.${NC}"
    echo "${LINE}"
    echo "  ${GREEN}>> ZaemonSH Symlinks functions and binaries corrected for Linux.${NC}"
    echo "${NC}" 
} 
#}}}

# function correctfordarwinc {{{
correctfordarwinc(){
    find $P_SYSFCTDIR -type f -name "*.zwc" -exec rm -f {} \;
    find $P_SYSFCTDIR -type l -exec rm -f {} \;
echo "${NC}"
    echo "  >> We correct ZaemonSH binaries and functions symlinks for Darwin. "
    echo "${LINE}"
    # for systemtype in core darwin universal; do
    #     echo "${RED}--systemtype=$systemtype${NC}"
    sysList=( $(print -l core/${(k)corfctlistbycategory} | grep -v "LINUX") darwin universal )
    for ((i=1 ; i<=${#sysList}; i++)); do
        systemtype=( $sysList[$i] )
        clear
        echo ${YEL}systemtype=${(qqq)systemtype}${NC}
            for zud in $( find $P_SYSFCTDIR/$systemtype -type f | grep -v ".zip\|.DS_Store\|.txt\|.zwc\|\[LINUX\]" ); do
                # echo "--zud=$zud"
                ln -s $zud "$P_SYSFCTDIR/${systemtype%/*}"
                for zid in $(echo ${${zud##*/}%.*} | grep -v "^_"); do
                    # Since version 4.1.7, it has been possible to compile functions to their
                    # internal format. It doesn’t make the functions run any faster, it just reduces
                    # their loading time; the shell just has to bring the function into memory,
                    # then it ‘runs it as it does any other function.
                    # echo "" && echo "$zud"; 
                    if [[ -e $zud.zwc ]]; then
                        echo "${WG} ${NC}$zid.zwc function already compiled."
                        echo "${GREEN} zrecompiling $zid ...${NC}"
                        wait
                        zrecompile "$zud"
                        wait
                        echo "${WG} ${NC}$zid function recompiled."
                        wait
                    else
                        echo "${GREEN} Compiling $zid ...${RED}"
                        wait
                        zcompile -U "$zud"
                        wait
                        echo "${NC}${WG} ${NC}$zid function ${GREEN}compiled.${NC}"
                        wait
                    fi
                #     cp $zud.zwc $P_SYSFCTDIR/$systemtype
                      cp $zud.zwc "$P_SYSFCTDIR/${systemtype%/*}"
                    wait
                    echo "${WG} ${NC}$zid compiled function copy completed."  
                done
             done
        echo ""
        echo "${GREEN}  • $systemtype symlinks functions are corrected.${NC}"
        # Debug 
        echo "${BRED}"
        echo "" 
    done
    
    find $ZDOT/bin -maxdepth 1 -type l -exec rm {} \;
    for sim in $(find $ZDOT/bin  -type f -maxdepth 3 | grep -v ".zip\|.DS_Store\|.txt\|.zwc\|.pl\|___LINUX") ; do
          chown "$USER":staff $sim
          chmod go-rwx $sim
          ln -s $sim $ZDOT/bin
    done
    echo "${GREEN}  • Darwin binaries symlinks are corrected.${NC}"
    echo "${LINE}"
    echo "  ${GREEN}>> ZaemonSH Symlinks functions and binaries corrected for darwin.${NC}"
    echo "${NC}" 
} 
#}}}

# function correctfordarwin {{{
correctfordarwin(){
    find $P_SYSFCTDIR -type f -name "*.zwc" -exec rm -f {} \;
    find $P_SYSFCTDIR -type l -exec rm -f {} \;
    sleep 2

    echo "${NC}"
    echo "  >> We correct ZaemonSH binaries and functions symlinks for Darwin. "
    echo "${LINE}"
    sysList=( $(print -l core/${(k)corfctlistbycategory} | grep -v "LINUX") darwin universal )
    for ((i=1 ; i<=${#sysList}; i++)); do
        systemtype=( $sysList[$i] )
        clear
        echo ${YEL}systemtype=${(qqq)systemtype}${NC}
            for zud in $( find $P_SYSFCTDIR/${systemtype} -type f  | grep -v ".zip\|.DS_Store\|.txt\|.zwc\|\[LINUX\]"); do
                # echo "-------------------------------------------"
                # echo "${CYAN}--zud=$zud${NC}"
                # echo --correct_systemtype=${systemtype%/*}
                # echo --correct_path_systemtype=$P_SYSFCTDIR/${systemtype%/*}
                ln -s $zud  "$P_SYSFCTDIR/${systemtype%/*}"
                # echo "-------------------------------------------"
                # echo ""
                # echo ""
                # echo ""

            done
        echo "${GREEN}  • $systemtype symlinks functions are corrected.${NC}"
        # Debug 
        echo "${BRED}"
        echo "" 
    done


    
    
    find $ZDOT/bin -maxdepth 1 -type l -exec rm -f {} \;
    for sim in $(find $ZDOT/bin -maxdepth 3  -type f | grep -v ".zip\|.DS_Store\|.txt\|.zwc\|.pl\|___LINUX") ; do
          chown "$USER":staff $sim
          chmod go-rwx $sim
          ln -s $sim $ZDOT/bin
    done
    echo "${GREEN}  • Darwin binaries symlinks are corrected.${NC}"
    echo "${LINE}"
    echo "  ${GREEN}>> ZaemonSH Symlinks functions and binaries corrected for darwin.${NC}"
    echo "${NC}" 
} 
#}}}




# function usage {{{
usage(){
echo "${RED}"
cat<<__EOF__
    usage:  Z_CorrectSymlinksFunction without option, automatically corrected symlinks without compilation.
    usage:  Z_CorrectSymlinksFunction [  -l --linux | -lc --linuxc | -d --darwin | -dc --darwinc | -h --help ]

    Examples:
      Z_CorrectSymlinksFunction  [-l | --linux]     # Corrected linux symlinks functions. 
      Z_CorrectSymlinksFunction  [-lc | --linuxc]   # Corrected and compiled linux symlinks functions. 
      Z_CorrectSymlinksFunction  [-d | --darwin]    # Corrected darwin symlinks functions.
      Z_CorrectSymlinksFunction  [-dc | --darwinc]  # Corrected and compiled darwin symlinks functions.
      Z_CorrectSymlinksFunction  [-h | --help]      # Show help.

__EOF__
echo "${NC}"
}		
#}}}

#-------------------------------------------------------------------------------------------#
#                                              SCRIPT
#-------------------------------------------------------------------------------------------#
banner
if [[ $# == 0 ]] && [[ $IS_MAC ]]; then
 	correctfordarwin && Z_Restart 
elif [[ $# == 0 ]] && [[ $IS_LINUX ]]; then
    correctforlinux  && Z_Restart
elif [[ $# == 1 ]]; then
# if [[ $# == 1 ]]; then
  	case "$1" in
       # -a|--all)
       #          correctforall
       #          Z_Restart
       #  ;;
       -l|--linux)
           if [[ $IS_MAC ]]; then
               usage
           else
				correctforlinux
                Z_Restart
           fi
		;;
       -lc|--linuxc)
           if [[ $IS_MAC ]]; then
               usage
           else
				correctforlinuxc
                Z_Restart
           fi
		;;
   	    -d|--darwin)
            if [[ $IS_LINUX ]]; then
                usage
            else
				correctfordarwin
                Z_Restart
            fi
        ;;
   	    -dc|--darwinc)
            if [[ $IS_LINUX ]]; then
                usage
            else
				correctfordarwinc
                Z_Restart
            fi
        ;;

        -h|--help)
				usage
	    ;;
     	*)
        		usage
	    ;;
	esac
else
	usage
fi
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:
### }}}
