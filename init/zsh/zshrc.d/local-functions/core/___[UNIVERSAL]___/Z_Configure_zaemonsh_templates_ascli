

##########################################################################################
#                                                                                        #
#  ZaemonSH created by :                                                                 #
#  Zucchelli Bryan && @N@TOME && Admiral Gr@ss H0pper on Oct 13, 2016.                   #
#  Copyright (c) 2020. All rights reserved.                                              #
#  Inspired by zsh-templates-osx created by :                                            #
#  William Scott on May 11, 2007.                                                        #
#  Copyright (c) 2007. All rights reserved.                                              #
#                                                                                        #
#  This program is free software; you can redistribute it and/or modify it under         #
#  the terms of the GNU General Public License as published by the Free Software         #
#  Foundation; either version 2 of the License, or (at your option) any later version.   #
#                                                                                        #
#  This program is distributed in the hope that it will be useful, but WITHOUT           #
#  ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or                #
#  FITNESS FOR A PARTICULAR PURPOSE.                                                     #
#  See the GNU General Public License for more details.                                  #
#                                                                                        #
#  You should have received a copy of the GNU General Public License                     #
#  along with this program ; if not, write to the Free Software Foundation,              #
#  Inc., 51 Franklin Street, Fifth Floor, Boston,  MA 02110-1301 USA                     #
#                                                                                        #
#  cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html                             #
#                                                                                        #
##########################################################################################

#----------------------------------------------------------------------------------------#
#                                     DESCRIPTION
#----------------------------------------------------------------------------------------#
# Z_Configure_zaemonsh_templates_ascli v0.0.1 :
# CLI zeamonsh darwin installation script.

#----------------------------------------------------------------------------------------#
#                                        TODO
#----------------------------------------------------------------------------------------#
# O1/08/2019 :
# • Finish under install script: hostsetup usersetup configure_X11 series
# • Unify install option with GUI one
# 22/12/2019 :
# • Make a man page !!!!
# 2020-06-20 :
# • Make linux ascli install
#
#----------------------------------------------------------------------------------------#
#                                       CHANGES
#----------------------------------------------------------------------------------------#
# 10/10/2019 :
#  • Creating Script.
# 2020-02-22 :
#  • Add cd $HOME at end of file to avoid /Users/bz/Library/init/zsh/zshenv.d
#    path after install.

#----------------------------------------------------------------------------------------#
#                                       CONFIG
#----------------------------------------------------------------------------------------#
## Local variables.
local VERSION FCT_NAME
FCT_NAME="Z_Configure_zaemonsh_templates_ascli"
VERSION="1.0.0"

## local functions.

#----------------------------------------------------------------------------------------#
#                                      FUNCTIONS
#----------------------------------------------------------------------------------------#
banner () {
     clear
     echo " ##############################################################################"
     echo " #                                                                            #"
     echo " #  ${GREEN}This is ${RED}$FCT_NAME: ${YEL}$VERSION on ${GREEN}$OSTYPE${NC}${YEL} system.${NC}"
     echo " #  CopyL®®v 2020, Zucchelli Bryan                                            #"
     echo " #                                                                            #"
     echo " #  Unless required by applicable law or agreed to in writing, software       #"
     echo " #  distributed under the License is distributed on an AS IS BASIS,           #"
     echo " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #"
     echo " #  See the License for the specific language governing permissions and       #"
     echo " #  limitations under the License.                                            #"
     echo " #                                                                            #"
     echo " ##############################################################################"
     echo ""
}

confirm () {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/n]} " response
    case $response in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}
####################################
#
##  emacs or vi keybindings?
whichkeybindings () {
	dialogue_text="${GREEN}By default, emacs rather than vi keybindings are used. Do you want to use vi or emacs keybindings ?${NC}"
	echo ${dialogue_text}
	select answer1 in vi emacs no; do
		echo $answer1
	if [[ "$answer1" == "vi"  ]]; then
		echo "Changing to ${RED}vi keybindings${NC}."
		echo "Delete the file ~/.zsh/zshvi or run this again to undo this setting."
		touch $HOME/.zsh/zshvi
		return 1
	elif [[ "$answer1" == "emacs"  ]]; then
		echo "Changing to ${RED}emacs keybindings${NC}."
		echo "Delete the file ~/.zsh/zshemacs or run this again to undo this setting."
		touch $HOME/.zsh/zshemacs
		return 1
	elif [[ "$answer1" == "no"  ]]; then
		echo "Leaving this setting unchanged."
		return 1
	fi
	break
	done
}

##-------------------------------------------------------------------------------------------#

user_host_setup () {
	dialogue_text="${GREEN}Do you want to set up USER and HOST completion (a good idea) ?${NC}" 
	echo $dialogue_text
	select answer2 in Yes No; do
		if [[ "$answer2" == "Yes"  ]]; then
            ### HOST completion
            #----------------------------------------------
            # This gets known hosts from ~/.ssh/known_hosts
            #----------------------------------------------
            [[ $HOME/.ssh/known_hosts ]] && echo $( cat $HOME/.ssh/known_hosts | awk '{print $1}' | cut -d \, -f 1 ) | tr " " "\n" >> $HOME/.zsh/cache/custom_hosts
            ### USER completion
            [[ $IS_MAC ]] && usernames=( ${$( command ls /Users/ ):#Shared} )
            [[ $IS_LINUX ]] && usernames=( ${$( command ls /home/ )} )
            echo $usernames | tr " " "\n" >> $HOME/.zsh/cache/custom_users

			return 1		
		elif [[ "$answer2" == "No"  ]]; then
			echo "When you are ready, issue the commands ${RED}Z_User_setup${NC} and ${RED}Z_Host_setup${NC} "
			return 1
		else
			echo "Leaving this setting unchanged."
			return 1
		fi
	done
}

##-------------------------------------------------------------------------------------------#

normalizeZshenvFiles () {
	cd $ZDOT/zshenv.d
	for f in $(/bin/ls -A $ZDOT/zshenv.d | grep -v ".txt"); do mv $f $(basename $f .disabled) 2>/dev/null; done
    for f in $(/bin/ls -A $ZDOT/zshenv.d | grep -v ".txt"); do mv $f{,.disabled}; done
    cd 
}


##-------------------------------------------------------------------------------------------#
#####
#/!\# 30/09/2017
#####
finknowarn () {
	dialogue_text="${GREEN}Do you have fink installed ?${NC}"
	echo $dialogue_text
	select answer3 in Yes No; do
		if [[ "$answer3" == "No"  ]]; then
			echo "Creating the file ${RED}~/.zsh/finknowarn ${NC}to suppress shell warning dialogue."
			touch $HOME/.zsh/finknowarn
			return 1
		else
            mv $ZDOT/zshenv.d/fink_first.disabled $ZDOT/zshenv.d/fink_first 2>/dev/null
            touch $HOME/.zsh/macportnowarn
            touch $HOME/.zsh/brewnowarn
			echo "Fink settings actived."
			return 1
		fi
	done
}

##-------------------------------------------------------------------------------------------#


macportnowarn () {

	dialogue_text="${GREEN}Do you have macports installed ?${NC}"
	echo $dialogue_text
	select answer4 in Yes No; do
		if [[ "$answer4" == "No"  ]]; then
			echo "Creating the file ${RED}~/.zsh/macportnowarn ${NC}to suppress shell warning dialogue."
			touch $HOME/.zsh/macportnowarn
			return 1
		else
            touch $HOME/.zsh/brewnowarn
            touch $HOME/.zsh/finknowarn
            mv $ZDOT/zshenv.d/macports_first.disabled $ZDOT/zshenv.d/macports_first 2>/dev/null            
		    echo "Macport settings actived."
		    return 1
		fi
	done
}

##-------------------------------------------------------------------------------------------#

brewnowarn () {

	dialogue_text="${GREEN}Do you have homebrew installed ?${NC}"
	echo $dialogue_text
	select answer5 in Yes No; do
		if [[ "$answer5" == "No"  ]]; then
			echo "Creating the file ${RED}~/.zsh/brewnowarn ${NC}to suppress shell warning dialogue."
			touch $HOME/.zsh/brewnowarn
		    return 1
		else
            touch $HOME/.zsh/finknowarn
            touch $HOME/.zsh/macportnowarn
            mv $ZDOT/zshenv.d/brew_first.disabled $ZDOT/zshenv.d/brew_first 2>/dev/null            
			echo "Homebrew settings actived."
			return 1
		fi
	done
}
## #####
## #/!\#
## #####

##-------------------------------------------------------------------------------------------#

uselocalfxn () {

	dialogue_text="${GREEN}Do you want to use somewhat idiosyncratic functions from $ZDOT/zshrc.d/functions.local ?${NC})"
	echo $dialogue_text
	select answer6 in Yes No; do
		if [[ "$answer6" == "Yes"  ]]; then
			echo "Creating the file ${RED}~/.zsh/zlocalfxn${NC} to activate these functions."
			touch $HOME/.zsh/zlocalfxn
			return 1
		elif [[ "$answer6" == "No"  ]]; then
			echo "Deleting the file ${RED}~/.zsh/zlocalfxn${NC} to deactivate these functions."
			/bin/rm -f $HOME/.zsh/zlocalfxn
			return 1
		else
			echo "Leaving this setting unchanged."
		fi	
	done
}

##-------------------------------------------------------------------------------------------#

usextalfxn () {

	dialogue_text="${GREEN}Do you want to use crystallography functions from $ZDOT/zshrc.d/local-functions/xtal section ?${NC}"
	echo $dialogue_text
	select answer7 in Yes No; do
		if [[ "$answer7" == "Yes"  ]]; then
			echo "Creating the files ${RED}~/.zsh/zxtalfxn${NC} and ${RED}~/.zsh/use_xtal_env${NC} to activate these functions."
			touch $HOME/.zsh/zxtalfxn
			touch $HOME/.zsh/use_xtal_env
			return 1
		elif [[ "$answer7" == "No"  ]]; then
			echo "Deleting the file ${RED}~/.zsh/zxtalfxn${NC} to deactivate these functions."
			/bin/rm -f $HOME/.zsh/zxtalfxn  $HOME/.zsh/use_xtal_env
			return 1
		else
			echo "Leaving this setting unchanged."
		fi
	done
}



######
##/!\#  02/10/2017
###### 
extrapluginadd () {

	dialogue_text="${GREEN}Do you want to add extra plugins addition ?${NC}"
	echo $dialogue_text
    select answer8 in Yes No; do
        if [[ "$answer8" == "Yes"  ]]; then
            echo "Creating the file ${RED}~/.zsh/plugextraaddi${NC} to activate these functions."
            touch $HOME/.zsh/plugextraaddi
            return 1
        else
            echo "Deleting the file ${RED}~/.zsh/plugextraaddi${NC} to deactivate these functions."
            /bin/rm -f $HOME/.zsh/plugextraaddi
            return 1
        fi
    done
}
#####
#/!\#
#####

#-------------------------------------------------------------------------------------------#

# readmore () {
# 	dialogue_text="${GREEN}Do you want to read more about zsh-templates for OS X ? ${NC}"
# 	echo $dialogue_text
# 	select answer13 in Yes No; do
# 	if [[ "$answer13" == "Yes"  ]]; then
# 		open "http://xanana.ucsc.edu/xtal/wiki/index.php/ZSH_on_OS_X"
# 		return 1
# 	else
# 		echo "Issue the command ${RED} help_zsh_templates ${NC} for further information."
# 		return 1
# 	fi
# }

#-------------------------------------------------------------------------------------------#
#                                                SCRIPT
#-------------------------------------------------------------------------------------------#

clear
echo ""
echo ""
banner
echo ""
echo ""
sleep 2
clear

#-------------------------------------------------------------------------------------------#

# echo "Keybindings setup"
whichkeybindings
echo "Answer specified: ${RED} $answer1 ${NC} "
echo ""
echo ""

#-------------------------------------------------------------------------------------------#

sleep 2 ; #clear
echo ""
echo ""
echo "User and Host Setup"
user_host_setup
echo "Answer specified: ${RED} $answer2 ${NC} "
echo ""
echo ""

 #-------------------------------------------------------------------------------------------#
 #####
 #/!\# 30/09/2017
 #####

normalizeZshenvFiles

 if [[ `which -p -S fink` != "fink not found" ]] && [[ $IS_MAC ]]; then
     sleep 2 ; #clear
     print ""
     print ""
     print "If Fink is present"
     finknowarn
     print "Answer specified: \e[1m $answer3 \e[0m "
     print ""
     print ""
 elif [[ `which -p -S port` != "port not found"  ]] && [[ $IS_MAC ]]; then
     sleep 2 ; #clear
     print ""
     print ""
     print "If Macports is present"
     macportnowarn
     print "Answer specified: \e[1m $answer4 \e[0m "
     print ""
     print ""
 elif [[ `which -p -S brew` != "brew not found" ]] && [[ $IS_MAC ]]; then
     sleep 2 ; #clear
     print ""
     print ""
     print "If Homebrew is present"
     brewnowarn
     print "Answer specified: \e[1m $answer5 \e[0m "
     print ""
     print ""
 # else
 #     :
 fi

#####
#/!\#
#####

#-------------------------------------------------------------------------------------------#

sleep 2 ; #clear
echo ""
echo ""
echo "Ask user if idiosyncratic functions should be loaded"
uselocalfxn
echo "Answer specified: ${RED} $answer6 ${NC} "
echo ""
echo ""

#-------------------------------------------------------------------------------------------#

sleep 2 ; #clear
echo ""
echo ""
echo "Ask user if crystallography functions should be loaded"
usextalfxn
echo "Answer specified: ${RED} $answer7 ${NC} "
echo ""
echo ""

#-------------------------------------------------------------------------------------------#

#####
#/!\# 02/10/2017
#####
sleep 2 ; #clear
echo ""
echo ""
echo "Ask user if extra plugins addition should be loaded"
extrapluginadd
echo "Answer specified: ${RED} $answer8 ${NC} "
echo ""
echo ""
#####
#/!\#
#####

#-------------------------------------------------------------------------------------------#
sleep 2 ; #clear
echo ""
echo ""
# This file keeps the dialogue prompting from happening again
touch ~/.zsh/configure_zsh_templates
echo "Issue the command ${RED} Z_Configure_zaemonsh_templates${NC} if you need to do this again."
echo ""
echo ""
 
# #-------------------------------------------------------------------------------------------#

# sleep 2 ; #clear
# echo ""
# echo ""
# # This opens the web browser to the zsh templates page
# readmore
# echo ""
# echo ""
  
# #-------------------------------------------------------------------------------------------#

# sleep 2 ; #clear
# echo ""
# echo ""

#prompt -s bz 
Z_Switch_prompt_ascli
echo ""
echo "${RED} +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++${NC} "
echo ""
echo "Issue the command ${RED} Z_Switch_prompt_ascli ${NC} if you want to change the prompt."
echo ""
echo "${RED} +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++${NC} "
echo ""
#-------------------------------------------------------------------------------------------#

clear && cd $HOME && exec zsh
