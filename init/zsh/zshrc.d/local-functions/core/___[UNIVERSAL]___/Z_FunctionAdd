#! /usr/bin/env zsh -f

##########################################################################################
#                                                                                        #
#  ZaemonSH created by :                                                                 #
#  Zucchelli Bryan && @N@TOME && Admiral Gr@ss H0pper on Oct 13, 2016.                   #
#  Copyright (c) 2020. All rights reserved.                                              #
#  Inspired by zsh-templates-osx created by :                                            #
#  William Scott on May 11, 2007.                                                        #
#  Copyright (c) 2007. All rights reserved.                                              #
#                                                                                        #
#  This program is free software; you can redistribute it and/or modify it under         #
#  the terms of the GNU General Public License as published by the Free Software         #
#  Foundation; either version 2 of the License, or (at your option) any later version.   #
#                                                                                        #
#  This program is distributed in the hope that it will be useful, but WITHOUT           #
#  ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or                #
#  FITNESS FOR A PARTICULAR PURPOSE.                                                     #
#  See the GNU General Public License for more details.                                  #
#                                                                                        #
#  You should have received a copy of the GNU General Public License                     #
#  along with this program ; if not, write to the Free Software Foundation,              #
#  Inc., 51 Franklin Street, Fifth Floor, Boston,  MA 02110-1301 USA                     #
#                                                                                        #
#  cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html                             #
#                                                                                        #
##########################################################################################

#----------------------------------------------------------------------------------------#
#                                      DESCRIPTION
#----------------------------------------------------------------------------------------#
# Z_FuntionAdd :
# Create, load, activate, function from ZaemonSH
# Declare level
# Select in which category.(coundn't be changed)
# Select in which sub-category or create one.
# cd to that >>category>>Sub-category.
# Give a name and test if it already exist on category
# Launch editor with default Z_SkelF function
# Declare function in correpondant category configuration.
# Load Function with Z_CorrectSymlinksFunction.

#-----------------------------------------------------------------------------------------#
#                                          TODO
#-----------------------------------------------------------------------------------------#

#-----------------------------------------------------------------------------------------#
#                                         CHANGES
#-----------------------------------------------------------------------------------------#
# 27/01/2020 :
#  • Create this one .

#-----------------------------------------------------------------------------------------#
#                                          CONFIG
#-----------------------------------------------------------------------------------------#
#######################
## COMMAND VARIABLES ##
#######################
local VERSION FCT_NAME

VERSION="0.0.1"
FCT_NAME="$(echo $0)"


#------------------------------------------------------------------------------------------#
#                                         FUNCTIONS
#------------------------------------------------------------------------------------------#
banner () {
     clear
     echo " ##############################################################################"
     echo " #                                                                            #"
     echo " #  ${GREEN}This is ${RED}$FCT_NAME: ${YEL}$VERSION on ${GREEN}$OSTYPE${NC}${YEL} system.${NC}"
     echo " #  CopyL®®v 2020, Zucchelli Bryan                                            #"
     echo " #                                                                            #"
     echo " #  Unless required by applicable law or agreed to in writing, software       #"
     echo " #  distributed under the License is distributed on an AS IS BASIS,           #"
     echo " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #"
     echo " #  See the License for the specific language governing permissions and       #"
     echo " #  limitations under the License.                                            #"
     echo " #                                                                            #"
     echo " ##############################################################################"
     echo ""
}

help(){
  echo "${RED}"
  cat<<__EOF__
    usage: $0 [  ]

    Examples:
                                                 # .


__EOF__
echo ${NC}
}

whereFunc () {

#######################################################################
# Choose your system, category, sub-category or create new one.
echo "${GREEN}Select for which system${NC}"
select system in ${(k)configfilebysystem}; do 
        local syste=$system
        clear
        if [[ $syste == "core" ]]; then 
            echo "${GREEN}Select a functions category in $syste${NC}"
            select category in ${(k)corfctlistbycategory}; do
                local categ=$category
            break            
            done
        else
            echo "${GREEN}Select a functions category in $syste${NC}"
            select category in ${(k)sysfctlistbycategory}; do
                local categ=$category
                # clear
                echo "${GREEN}Select a functions sub-category or create one${NC}"
                select subcategory in $(ls $P_SYSFCTDIR/$syste/$categ) CREATEONE; do
                    if [[ $subcategory == CREATEONE ]]; then
                        # clear
                        echo "You want to create one new $syste sub-category on $cate"
                        if ask "You really want that ?"; then 
                             echo "• ${GREEN}We create a sub-category folder on $categ  category of ${MAGENTA}$syste${GREEN} system${NC}."
                             # clear                        
                             echo -n "+++ Enter a new sub-category name.\n"
                             if ! read newsub ; then continue ; fi
                             # Verify if newsub is not empty.
                             # Verify newsub name contains only UPPERCASE and no number.
                             if [[ -n "$P_SYSFCTDIR/$syste/$categ/$newsub" ]] && [[ -d "$P_SYSFCTDIR/$syste/$categ/$newsub" ]]; then
                                 echo "• ${MAGENTA}$newsub${NC} ${RED}directory already exist, choose another name.    ${NC}"
                             else
                                 echo "+++ We create ${MAGENTA}$newsub${NC} sub-category..."
                                 mkdir "$P_SYSFCTDIR/$syste/$categ/$newsub"
                                 echo "• ${MAGENTA}$newsub${GREEN} sub-category creation on $categ ${GREEN} category of ${MAGENTA}$syste${GREEN}, done${NC}."
                                 local subcategory=$newsub
                                 sleep 1
                                 break
                             fi
                             echo "${LINEE}"
                             echo "${NC}"
                             continue 
                        else 
                            :
                        fi
                    else
                        local subcategory=$subcategory
                    fi
                break
                done    
            break
            done
 
        fi
   # echo $P_SYSFCTDIR/$syste/$categ/$subcategory
    local papath="$P_SYSFCTDIR/$syste/$categ/$subcategory" 
    echo ""
    echo ""
    break
done
echo $papath
clear

#######################################################################
# Create function
#
echo -n "+++ Enter a name for your new function.\n"
if ! read newfunc ; then continue ; fi
# Verify if newfunc is not empty.
# Verify newfunc name contains only UPPERCASE and no number.
if [[ -f $papath/$newfunc ]]; then
# if [[ -n "$P_SYSFCTDIR/$syste/$categ/$newsub/$newfunc" ]] && [[ -f "$P_SYSFCTDIR/$syste/$categ/$newfunc" ]]; then
    echo "• ${MAGENTA}$newfunc${NC} ${RED}function already exist, choose another name.${NC}"
else
    # echo "+++ We create ${MAGENTA}$newfunc${NC} on system $syste on category $category..."
    echo "+++ We create ${MAGENTA}$newfunc${NC} on $papath..."
    local SKELFPATH="$P_SYSFCTDIR/etc/skel/FunctionSkel"
    local currDate=$(date +%d/%m/%Y)
     
    cp $SKELFPATH $papath/$newfunc
    [[ $(grep "00/00/0000" $papath/$newfunc) ]] && perl -p -i -e "s|00/00/0000|$currDate|g" $papath/$newfunc
    [[ $(grep "FCTNME" $papath/$newfunc) ]] && perl -p -i -e "s/\[\[FCTNME\]\]/$newfunc/g" $papath/$newfunc
    $EDITOR $papath/$newfunc    

    echo "• ${MAGENTA}$newfunc${GREEN} function creation on $categ ${GREEN} category of ${MAGENTA}$syste${GREEN}, done${NC}."
    # local newfctpath=$P_SYSFCTDIR/$syste/$categ/$subcategory/$newfunc
    sleep 1
fi

# clear

#######################################################################
# Declare function  Load function

if [ $(echo -e $(perl -0777 -ne 'print "$1\n" while /#______##______#(.*?)#______###______#/gs' $configfilebysystem[$syste] | sed 's/\\/ /' | awk 'BEGIN{FS="="} {print $1  $2 }') | tr ")" '\n' | grep -w "$newfunc" | sed 's/(.*//') ] && [[ "$syste" != "core" ]]; then
     echo "${NC}"
     echo "${LINEE}"
     echo "  • Function ${MAGENTA} $newfunc ${GREEN}exist, it's already declared on list: ${MAGENTA}$(echo $(perl -0777 -ne 'print "$1\n" while /#______##______#(.*?)#______###______#/gs' $configfilebysystem[$syste] | sed 's/\\/ /' | awk 'BEGIN{FS="="} {print $1  $2 }') | tr ")" '\n' | grep -w "$newfunc" | sed 's/(.*// ') ${GREEN}and loaded.${NC}"                      # for zob in $(echo -e $(cat $P_CORFCTFIL | grep "=(" | sed 's/=.*//')); do
     echo "  • ${RED}Nothing to do !${NC}"
     echo "${LINEE}"
     echo "${NC}"
else
                 # ## declare associative array of declaration name list by category
                 echo "${NC}"
                 echo "${LINEE}"
                 echo "  • Function ${RED} $newfunc ${NC} exist but ${RED}undeclared and unloaded${NC}."
                 echo "+++ We loaded ${MAGENTA}$newfunc${NC}..."
                 rm /tmp/$(basename $configfilebysystem[$syste]) 2>/dev/null
                 sed "s/$sysfctlistbycategory[$categ]$systemsuffixlist[$syste]=(/$sysfctlistbycategory[$categ]$systemsuffixlist[$syste]=( $newfunc/g" $configfilebysystem[$syste] 1> /tmp/$(basename $configfilebysystem[$syste])
                 rm $configfilebysystem[$syste] && mv /tmp/$(basename $configfilebysystem[$syste]) $configfilebysystem[$syste]
                 sleep 2
                 echo "  • Function ${MAGENTA}$newfunc${NC} declared on ${GREEN}$sysfctlistbycategory[$categ]$systemsuffixlist[$syste]${NC} ${GREEN}an loaded now${NC}."
                 echo "${LINEE}"
                 echo "${NC}"
fi
}

#------------------------------------------------------------------------------------------#
#                                           SCRIPT
#------------------------------------------------------------------------------------------#
banner

whereFunc
# cd
Z_CorrectSymlinksFunction
