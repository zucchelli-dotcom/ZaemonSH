#! /usr/bin/env zsh -f

##########################################################################################
#                                                                                        #
#  ZaemonSH created by :                                                                 #
#  Zucchelli Bryan && @N@TOME && Admiral Gr@ss H0pper on Oct 13, 2016.                   #
#  Copyright (c) 2020. All rights reserved.                                              #
#  Inspired by zsh-templates-osx created by :                                            #
#  William Scott on May 11, 2007.                                                        #
#  Copyright (c) 2007. All rights reserved.                                              #
#                                                                                        #
#  This program is free software; you can redistribute it and/or modify it under         #
#  the terms of the GNU General Public License as published by the Free Software         #
#  Foundation; either version 2 of the License, or (at your option) any later version.   #
#                                                                                        #
#  This program is distributed in the hope that it will be useful, but WITHOUT           #
#  ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or                #
#  FITNESS FOR A PARTICULAR PURPOSE.                                                     #
#  See the GNU General Public License for more details.                                  #
#                                                                                        #
#  You should have received a copy of the GNU General Public License                     #
#  along with this program ; if not, write to the Free Software Foundation,              #
#  Inc., 51 Franklin Street, Fifth Floor, Boston,  MA 02110-1301 USA                     #
#                                                                                        #
#  cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html                             #
#                                                                                        #
##########################################################################################

#----------------------------------------------------------------------------------------#
#                                     DESCRIPTION
#----------------------------------------------------------------------------------------#
# Z_Configure_zaemonsh_templates_asgui v0.0.2 :
# Small panel zeamonsh darwin installation script.

#----------------------------------------------------------------------------------------#
#                                        TODO
#----------------------------------------------------------------------------------------#
# 22/10/2019 :
# • Choice off cli editor
 
#----------------------------------------------------------------------------------------#
#                                       CHANGES
#----------------------------------------------------------------------------------------#
# 28/09/2017 :
# • Unify script presentation.
# 30/09/2017 :
# • Add Homebrew, Macport support.
# • Verify all $ZDOT/zshenv.d/* files are enabled by default.
# • Reorder functions.
# 02/10/2017 :
# • Add Xquartz_setup, EtrasPlugins support.
# 04/10/2017 :
# • Correct problem with Z_Switch_prompt.
# 21/07/2019 :
# • Reoder functions.
# • Intelligent X11 Xquartz settings 2 in 1
# • Intelligent Packager (fink macport brew) 3 in 1
# • Integrate visual editor selection Z_My_prefs_edit
# • Directly integrated syntax highlighting.
# • remove GRML 
# 2020-02-22 :
# • Add cd $HOME at end of file to avoid /Users/bz/Library/init/zsh/zshenv.d
#   path after install.
# 2020-02-22 :
# • Add finderState
 
#----------------------------------------------------------------------------------------#
#                                       CONFIG
#----------------------------------------------------------------------------------------#
## Local variables.
local VERSION dialogue_text answer1 answer2 answer3 answer4 answer5 answer6 answer7 answer8 answer9 answer10 \
answer11 answer12

VERSION="0.0.2"

## local functions.
local whichkeybindings user_host_setup normalizeZshenvFiles finknowarn macportnowarn brewnowarn uselocalfxn \
usextalfxn x11_setup Xquartz_setup grmladd syntaxhighlight readmore

local finderState

#----------------------------------------------------------------------------------------#
#                                      FUNCTIONS
#----------------------------------------------------------------------------------------#
##  emacs or vi keybindings?
whichkeybindings () {
	dialogue_text=( By default, emacs rather than vi keybindings are used. \
		Do you want to use vi or emacs keybindings\? )

	answer1=$(Z_Osa_display_dialog "vi" "emacs" "Change Nothing")

	if [[ "$answer1" == "vi"  ]]; then
		print "Changing to \e[1mvi keybindings\e[0m."
		print "Delete the file ~/.zsh/zshvi or run this again to undo this setting."
		touch $HOME/.zsh/zshvi
	elif [[ "$answer1" == "emacs"  ]]; then
		print "Changing to \e[1memacs keybindings\e[0m."
		print "Delete the file ~/.zsh/zshemacs or run this again to undo this setting."
		# /bin/rm -f $HOME/.zsh/zshemacs
		touch $HOME/.zsh/zshemacs
	else
		print "Leaving this setting unchanged."
	fi

}

#-------------------------------------------------------------------------------------------#

user_host_setup () {
	dialogue_text=( Do you want to set up USER and HOST completion \(a good idea\)\? )

	answer2=$(Z_Osa_display_dialog "No" "Yes")

	if [[ "$answer2" == "Yes"  ]]; then
 		Z_User_setup
		Z_Host_setup		
	elif [[ "$answer2" == "No"  ]]; then
		print "When you are ready, issue the commands \e[1mZ_User_setup\e[0m and \e[1mZ_Host_setup\e[0m "
	else
		print "Leaving this setting unchanged."
	fi
}

#-------------------------------------------------------------------------------------------#
normalizeZshenvFiles () {
    cd $ZDOT/zshenv.d
    for f in $(/bin/ls -A $ZDOT/zshenv.d | grep -v ".txt"); do mv $f $(basename $f .disabled) 2>/dev/null; done
    for f in $(/bin/ls -A $ZDOT/zshenv.d | grep -v ".txt"); do mv $f{,.disabled}; done
    cd
}

#-------------------------------------------------------------------------------------------#


#-------------------------------------------------------------------------------------------#
# Intelligent choice (if exist, version)
#####
#/!\# 30/09/2017
#####
finknowarn () {

	dialogue_text=( You have fink installed... )

	answer3=$(Z_Osa_display_dialog "No" "Yes")

	if [[ "$answer3" == "No"  ]]; then
		print "Creating the file \e[1m~/.zsh/finknowarn \e[0mto suppress shell warning dialogue."
        touch $HOME/.zsh/finknowarn
	else
		mv $ZDOT/zshenv.d/fink_first.disabled $ZDOT/zshenv.d/fink_first 2>/dev/null
        touch $HOME/.zsh/macportnowarn
        touch $HOME/.zsh/brewnowarn
        print "Fink settings actived."
	fi
}

#-------------------------------------------------------------------------------------------#

macportnowarn () {

	dialogue_text=( Do you want to set macports \? )

	answer4=$(Z_Osa_display_dialog "No" "Yes")

	if [[ "$answer4" == "No"  ]]; then
		print "Creating the file \e[1m~/.zsh/macportnowarn \e[0mto suppress shell warning dialogue."
		touch $HOME/.zsh/macportnowarn
	else
        touch $HOME/.zsh/brewnowarn
        touch $HOME/.zsh/finknowarn
		mv $ZDOT/zshenv.d/macports_first.disabled $ZDOT/zshenv.d/macports_first 2>/dev/null
        print "Macport settings actived."
	fi
}

#-------------------------------------------------------------------------------------------#

brewnowarn () {

	dialogue_text=( Do you want to set Homebrew \? )

	answer5=$(Z_Osa_display_dialog "No" "Yes")

	if [[ "$answer5" == "No"  ]]; then
		print "Creating the file \e[1m~/.zsh/brewnowarn \e[0mto suppress shell warning dialogue."
		touch $HOME/.zsh/brewnowarn
	else
        touch $HOME/.zsh/finknowarn
        touch $HOME/.zsh/macportnowarn
	    mv $ZDOT/zshenv.d/brew_first.disabled $ZDOT/zshenv.d/brew_first 2>/dev/null
		print "Homebrew settings actived."
	fi
}
#####
#/!\#
#####

#-------------------------------------------------------------------------------------------#

uselocalfxn () {

	dialogue_text=( Do you want to use somewhat idiosyncratic functions from \$ZDOT/zshrc.d/functions.local\? )

	answer6=$(Z_Osa_display_dialog "No" "Yes" "Change Nothing")

	if [[ "$answer6" == "Yes"  ]]; then
		print "Creating the file \e[1m~/.zsh/zlocalfxn\e[0m to activate these functions."
		touch $HOME/.zsh/zlocalfxn
	elif [[ "$answer6" == "No"  ]]; then
		print "Deleting the file \e[1m~/.zsh/zlocalfxn\e[0m to deactivate these functions."
		/bin/rm -f $HOME/.zsh/zlocalfxn
	
	else
		print "Leaving this setting unchanged."
	fi	
}

#-------------------------------------------------------------------------------------------#

usextalfxn () {

	dialogue_text=( Do you want to use crystallography functions from \$ZDOT/zshrc.d/local-functions/xtal section\? )

	answer7=$(Z_Osa_display_dialog "No" "Yes" "Change Nothing")

	if [[ "$answer7" == "Yes"  ]]; then
		print "Creating the files \e[1m~/.zsh/zxtalfxn\e[0m and \e[1m~/.zsh/use_xtal_env\e[0m to activate these functions."
		touch $HOME/.zsh/zxtalfxn
		touch $HOME/.zsh/use_xtal_env
	elif [[ "$answer7" == "No"  ]]; then
		print "Deleting the file \e[1m~/.zsh/zxtalfxn\e[0m to deactivate these functions."
		/bin/rm -f $HOME/.zsh/zxtalfxn  $HOME/.zsh/use_xtal_env
	
	else
		print "Leaving this setting unchanged."
	fi
}

#-------------------------------------------------------------------------------------------#
# Intelligent (existance, versions) X11 or Xquartz choice
x11_setup () {

	dialogue_text=( Do you want to customize the behavior of Apple\'s X11\? )

	answer8=$(Z_Osa_display_dialog "No" "Yes")

	if [[ "$answer8" == "Yes"  ]]; then
 		Z_Customize_x11_gui	
	elif [[ "$answer8" == "No"  ]]; then
		print "When you are ready, issue the commands \e[1mZ_Customize_x11_gui\e[0m "
	else
		print "Leaving these settings unchanged."
	fi
}

# #-------------------------------------------------------------------------------------------#

# #####
# #/!\# 02/10/2017
# #####
Xquartz_setup () {

		dialogue_text=( Do you want to customize the behavior of Xquartz\? )

		answer9=$(Z_Osa_display_dialog "No" "Yes")

		if [[ "$answer9" == "Yes"  ]]; then
	 		Z_Customize_xquartz_gui	
		elif [[ "$answer9" == "No"  ]]; then
			print "When you are ready, issue the commands \e[1mZ_Customize_xquartz_gui\e[0m "
		else
			print "Leaving these settings unchanged."
		fi
	}
#####
#/!\#   
#####


#-------------------------------------------------------------------------------------------#

visualeditor () {
	dialogue_text=( Do you want to set up defaults graphical pdf html text and image editor \(a good idea\)\? )

	answer10=$(Z_Osa_display_dialog "No" "Yes")

	if [[ "$answer10" == "Yes"  ]]; then
 		autoload -U Z_My_prefs_edit
        Z_My_prefs_edit	
	elif [[ "$answer10" == "No"  ]]; then
		print "When you are ready, issue the commands \e[1mZ_My_prefs_edit\e[0m "
	else
		print "Leaving this setting unchanged."
	fi
}


#-------------------------------------------------------------------------------------------#

#####
#/!\#  02/10/2017
##### 
extrapluginadd () {

	 	dialogue_text=( Do you want to add extra plugins addition \? )

        answer12=$(Z_Osa_display_dialog "No" "Yes")
        if [[ "$answer12" == "Yes"  ]]; then
			print "Creating the file \e[1m~/.zsh/plugextraaddi\e[0m to activate these functions."
			touch $HOME/.zsh/plugextraaddi
        else
			print "Deleting the file \e[1m~/.zsh/plugextraaddi\e[0m to deactivate these functions."
			/bin/rm -f $HOME/.zsh/plugextraaddi
        fi
}
#####
#/!\#
#####

#-------------------------------------------------------------------------------------------#

readmore () {

	dialogue_text=( Do you want to read more about zsh-templates for OS X\? )

	answer13=$(Z_Osa_display_dialog "No" "Yes")

	if [[ "$answer13" == "Yes"  ]]; then
		open http://xanana.ucsc.edu/xtal/wiki/index.php/ZSH_on_OS_X
	else
		print "Issue the command \e[1m help_zsh_templates \e[0m for further information."
	fi
}

#-------------------------------------------------------------------------------------------#
#                                                SCRIPT
#-------------------------------------------------------------------------------------------#
clear
[[ $(ps -awx | grep -v "grep" | grep -w Finder.app) ]] && finderState=1
echo "-----finderState=$finderState"
echo "-----FINDER_RUN=$FINDER_RUN"
mkdir -p ~/.zsh

if [[ $? != 0 ]];then
	print "\e[1m Cannot create directory ~/.zsh"
	print "None of this will work!"
	print "Try (re)moving the file ~/.zsh if present \e[0m "
	return 1
fi

#-------------------------------------------------------------------------------------------#

print ""
print ""
# print "Keybindings setup"
whichkeybindings
print "Answer specified: \e[1m $answer1 \e[0m "
print ""
print ""

#-------------------------------------------------------------------------------------------#

sleep 2 ; #clear
print ""
print ""
print "User and Host Setup"
user_host_setup
print "Answer specified: \e[1m $answer2 \e[0m "
print ""
print ""

#-------------------------------------------------------------------------------------------#
#####
#/!\# 30/09/2017
#####

normalizeZshenvFiles


#-------------------------------------------------------------------------------------------#

if [[ `which -p -S fink` != "fink not found" ]]; then 
    sleep 2 ; #clear
    print ""
    print ""
    print "If Fink is present"
    finknowarn
    print "Answer specified: \e[1m $answer3 \e[0m "
    print ""
    print ""    
elif [[ `which -p -S port` != "port not found"  ]]; then 
    sleep 2 ; #clear
    print ""
    print ""
    print "If Macports is present"
    macportnowarn
    print "Answer specified: \e[1m $answer4 \e[0m "
    print ""
    print ""
elif [[ `which -p -S brew` != "brew not found" ]]; then 
    sleep 2 ; #clear
    print ""
    print ""
    print "If Homebrew is present"
    brewnowarn
    print "Answer specified: \e[1m $answer5 \e[0m "
    print ""
    print ""
# else
#     :
fi

#-------------------------------------------------------------------------------------------#

sleep 2 ; #clear
print ""
print ""
print "Ask user if idiosyncratic functions should be loaded"
uselocalfxn
print "Answer specified: \e[1m $answer6 \e[0m "
print ""
print ""

#-------------------------------------------------------------------------------------------#

sleep 2 ; #clear
print ""
print ""
print "Ask user if crystallography functions should be loaded"
usextalfxn
print "Answer specified: \e[1m $answer7 \e[0m "
print ""
print ""

#-------------------------------------------------------------------------------------------#
######
##/!\# 02/10/2017
######


#####
#/!\#
#####
if [[  `which -p -S Xquartz | grep -v "\->"` ]]; then 
    sleep 2 ; #clear
    print ""
    print ""
    print "Running the function \e[1m Z_Customize_xquartz_gui \e[0m"
    Xquartz_setup
    print ""
    print ""
elif [[  `which -p -S X11 | grep -v "\->"` ]]; then 
    sleep 2 ; #clear
    print ""
    print ""
    print "Running the function \e[1m Z_Customize_x11_gui \e[0m"
    x11_setup
    print ""
    print ""
fi

#-------------------------------------------------------------------------------------------#


#####
#/!\# 23/02/2017
#####
sleep 2 ; #clear
print ""
print ""
print "Ask user if Z_My_prefs_edit will be launch"
visualeditor
print "Answer specified: \e[1m $answer10 \e[0m "
print ""
print ""


#-------------------------------------------------------------------------------------------#
#####
#/!\# 02/10/2017
#####
sleep 2 ; #clear
print ""
print ""
print "Ask user if extra plugins addition should be loaded"
extrapluginadd
print "Answer specified: \e[1m $answer12 \e[0m "
print ""
print ""
#####
#/!\#
#####

#-------------------------------------------------------------------------------------------#
sleep 2 ; #clear
print ""
print ""
Z_Switch_prompt 
print ""
print "\e[1m +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\e[0m "
print ""
print "Issue the command \e[1m Z_Switch_prompt \e[0m if you want to change the prompt."
print ""
print "\e[1m +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\e[0m "
print ""
#-------------------------------------------------------------------------------------------#


#-------------------------------------------------------------------------------------------#
sleep 2 ; #clear
print ""
print ""
# This file keeps the dialogue prompting from happening again
touch $HOME/.zsh/configure_zsh_templates
print "Issue the command \e[1m Z_Configure_zaemonsh_templates\e[0m if you need to do this again."
print ""
print ""

#-------------------------------------------------------------------------------------------#

sleep 2 ; #clear
print ""
print ""
# This opens the web browser to the zsh templates page
readmore
print ""
print ""

#-------------------------------------------------------------------------------------------#
[[ ! $FINDER_RUN ]] && quit Finder
[[ ! $finderState ]] && quit Finder
clear && cd $HOME && exec zsh
