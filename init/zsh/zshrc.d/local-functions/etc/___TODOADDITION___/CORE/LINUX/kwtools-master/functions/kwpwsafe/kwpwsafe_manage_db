# Funktion (kwpwsafe_manage_db), managed die Datenbanken von pwsafe.# {{{
#
# usage: kwpwsafe_manage_db
#
kwpwsafe_manage_db() {
	# Variablen# {{{
	MANAGE_TITLE=$(gettext 'Datenbankverwaltung')
	lv_Delete_Db=$(gettext 'Datenbank loeschen')
	lv_Export_Db=$(gettext 'Datenbank exportieren')
	lv_Import_Db=$(gettext 'Datenbank importieren')
	lv_Passwd=$(gettext 'Passwort')
	OK_MSG=$(gettext 'Passwort wurde erfolgreich geaendert.')
	NOOK_MSG=$(gettext 'Das Passwort konnte nicht geaendert werden. Wiederholen (ja/nein)?')
	INCORRECT_PW_DB_MSG=$(gettext 'Sie haben das falsche Passwort eingegeben. Wiederholen (ja/nein)?')
	IMPORT_OK_MSG=$(gettext 'Der Import der Datenbank wurde erfolgreich durchgefuehrt.')
	IMPORT_NOOK_MSG=$(gettext 'Der Import der Datenbank ist fehlgschlagen.')
	## }}}
	# Funktion (manage_db_menu)# {{{
	MANAGE_DB_MENU=(\"$lv_Create_Db\" \"\"
	\"$lv_Export_Db\" \"\"
	\"$lv_Import_Db\" \"\"
	\"$lv_Change_Pw_Db\" \"\"
	\"$lv_Delete_Db\" \"\" $gv_Back \"\")
	manage_db_menu() {
		menubox "$1" "$MANAGE_TITLE" "$gv_Menupoint" "$MANAGE_DB_MENU"
	}
	## }}}
	manage_db_menu
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help kwpwsafe_db_help
				manage_db_menu "${gv_Auswahl#HELP }"
				;;
			$lv_Create_Db)
				# Datenbank erstellen# {{{
				create_db
				## }}}
				manage_db_menu $lv_Create_Db
				;;
			"$lv_Export_Db")
				# Datenbank exportieren# {{{
				list_db
				if [[ -n ${DB_FILES[1]} ]] ; then
					EX_MENU=($DB_FILES)
					EX_MSG=$(gettext 'Waehlen Sie eine Datenbank zum exportieren aus. Diese wird im Klartext gespeichert.')
					menubox "$Db_Choice" "$MANAGE_TITLE" "$EX_MSG" "$EX_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_db_help
								menubox "${gv_Auswahl#HELP }" "$MANAGE_TITLE" "$EX_MSG" "$EX_MENU"
								;;
							*)	# Auswahl uebernehmen und exportieren
								Db_Choice="$gv_Auswahl"
								# Passphrase eingeben
								pass_input "$Db_Choice"
								if [ ! -z "$DB_PASS" ] ; then
									Db_Choice_Ex="`print ${Db_Choice}(:r)`"
									print "$DB_PASS" | pwsafe --exportdb -q -f $Db_Choice &>/dev/null | \
									   grep '"'	> ${Db_Choice_Ex}.txt
									# Passphrase loeschen
									unset -- DB_PASS
								fi
								break
								;;
						esac
					done
				else
					no_db_msg
				fi
				## }}}
				manage_db_menu "$lv_Export_Db"
				;;
			"$lv_Import_Db")
				# Datenbank importieren# {{{
				list_db
				if [[ -n ${DB_FILES[1]} ]] ; then
					IM_MENU=($DB_FILES)
					IM_MSG=$(gettext 'Waehlen Sie eine Datenbank aus in Sie eine andere Datenbank importieren moechten.')
					menubox "$Db_Choice" "$MANAGE_TITLE" "$IM_MSG" "$IM_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_db_help
								menubox "${gv_Auswahl#HELP }" "$MANAGE_TITLE" "$IM_MSG" "$IM_MENU"
								;;
							*)	# Auswahl uebernehmen und exportieren
								Db_Choice="$gv_Auswahl"
								# zu importierende Datenbank auswaehlen
								fselect "$LOCAL_PWSAFE_PATH"
								if [[ -f $gv_Auswahl ]] ; then
									Db_Import="$gv_Auswahl"
									# Passphrase eingeben
									# Funktion (db_import_pass_menu)# {{{
									db_import_pass_menu() {
										DB_IMPORT_PASS_MSG=$(gettext 'Geben Sie hier die Passwoerter fuer die beiden Datenbanken ein. Mit den Pfeiltasten koennen Sie zwischen den Eingabefeldern springen.')
										DB_IMPORT_PASS_MENU=(\"$lv_Db\" "1 1 \"${Db_Choice##*/}\" 1 20 20 0 2"
										\"$lv_Passwd\" "2 1 \"\" 2 20 20 0 1"
										\"$lv_Db\" "3 1 \"${Db_Import##*/}\" 3 20 20 0 2"
										\"$lv_Passwd\" "4 1 \"\" 4 20 20 0 1")
										mixedform -i "$MANAGE_TITLE" "$DB_IMPORT_PASS_MSG" "$DB_IMPORT_PASS_MENU"
									}
									## }}}
									db_import_pass_menu
									while [[ -n $gv_Auswahl ]] ; do
										case "$gv_Auswahl" in
											HELP*)	script_help kwpwsafe_db_help
												db_import_pass_menu
												;;
											*)	# Auswahl uebernehmen
												Anz="${(w)#gv_Auswahl}"
												PW="${${(ws: :)${=gv_Auswahl}}[2]}"
												IPW="${${(ws: :)${=gv_Auswahl}}[4]}"
												if [ "$Anz" -eq 4 ] ; then
													# Falls die Paswoerter der Datenbank gleich sind
													# wird eine andere expect-Datei erstellt.
													if [ "$PW" = "$IPW" ] ; then
														# gleiche Passwoerter# {{{
														# expect mit der Einstellungsdatei ausfuehren
														> ${gv_WorkDir}/expect <<<"#!/usr/bin/expect -f

set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {\$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- \$arg
    }
}

set db_pass \"$PW\"

set timeout 1
match_max 100000
stty -echo
spawn pwsafe --mergedb="$Db_Import" -f $Db_Choice
expect \"Enter passphrase .*: \"
send -- \"\$db_pass\r\"
expect {
 \"*Passphrase is incorrect*\" {exit 10}
 default {exit 0}
}
stty echo
expect eof"
														(export LC_ALL=C ; expect -f ${gv_WorkDir}/expect >/dev/null)
														## }}}
													else
														# ungleiche Passwoerter# {{{
														# expect mit der Einstellungsdatei ausfuehren
														> ${gv_WorkDir}/expect <<<"#!/usr/bin/expect -f

set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {\$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- \$arg
    }
}

set db_pass \"$PW\"
set db_import_pass \"$IPW\"

set timeout 1
match_max 100000
stty -echo
spawn pwsafe --mergedb="$Db_Import" -f $Db_Choice
expect \"Enter passphrase .*: \"
send -- \"\$db_pass\r\"
expect \"Enter passphrase .*: \"
send -- \"\$db_import_pass\r\"
expect {
 \"*Passphrase is incorrect*\" {exit 10}
 default {exit 0}
}
stty echo
expect eof"
														(export LC_ALL=C ; expect -f ${gv_WorkDir}/expect >/dev/null) || \
														(del_expect ; prog_failure)
														del_expect
														## }}}
													fi
													# Exit Code ueberpruefen# {{{
													case "$?" in
														10)
															yesno "$gv_Attention" "$INCORRECT_PW_DB_MSG" "yes"
															if [ "$gv_Auswahl" = yes ] ; then
																db_import_pass_menu
															else
																# schnell die Erstellungsdatei loeschen
																unset -- PW IPW
																del_expect
																break 2
															fi
															;;
														0)
															# Import durch gefuehrt
															msgbox "$gv_Info" "$IMPORT_OK_MSG"
															unset -- PW IPW
															del_expect
															break 2
															;;
														*)
															msgbox "$gv_Attention" "$IMPORT_NOOK_MSG"
															unset -- PW IPW
															del_expect
															break 2
															;;
													esac
													## }}}
												else
													# Nachricht das alle Felder belegt sein muessen.
													input_all_field_msg
													db_import_pass_menu
												fi
												;;
										esac
									done
								else
									no_input_msg
									break
								fi
								;;
						esac
					done
				else
					no_db_msg
				fi
				
				## }}}
				manage_db_menu "$lv_Import_Db"
				;;
			$lv_Change_Pw_Db)
				# Datenbank Passwort aendern# {{{
				list_db
				if [ -n "$DB_FILES" ] ; then
					PW_MENU=($DB_FILES)
					menubox "$DB_CHANGE" "$MANAGE_TITLE" "$DB_MSG" "$PW_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_db_help
								menubox "${gv_Auswahl#HELP }" "$MANAGE_TITLE" "$DB_MSG" "$PW_MENU"
								;;
							*)
								# Passwort aendern# {{{
								DB_CHANGE="$gv_Auswahl"
								# Funktion (db_change_pass_menu)# {{{
								db_change_pass_menu() {
									DB_CHANGE_PASS_MSG=$(gettext 'Geben Sie hier erst das alte Passwort und dann in wiederholter Form das neue Passwort fuer die Datenbank ein. Mit den Pfeiltasten koennen Sie zwischen den Eingabefeldern springen.')
									DB_CHANGE_PASS_MENU=(\"$gv_Old_Passwd\" "1 1 \"\" 1 20 20 0 1"
									\"$gv_New_Passwd\" "2 1 \"\" 2 20 20 0 1"
									\"$gv_New_Passwd\" "3 1 \"\" 3 20 20 0 1")
									mixedform -i "$MANAGE_TITLE" "$DB_CHANGE_PASS_MSG" "$DB_CHANGE_PASS_MENU"
								}
								## }}}
								db_change_pass_menu
								while [[ -n $gv_Auswahl ]] ; do
									case "$gv_Auswahl" in
										HELP*)	script_help kwpwsafe_db_help
											db_change_pass_menu
											;;
										*)	# Auswahl uebernehmen
											Anz="${(w)#gv_Auswahl}"
											OPW="${${(ws: :)${=gv_Auswahl}}[1]}"
											NPW="${${(ws: :)${=gv_Auswahl}}[2]}"
											NNPW="${${(ws: :)${=gv_Auswahl}}[3]}"
											if [ "$Anz" -eq 3 ] ; then
												if [ "$NPW" = "$NNPW" ] ; then
													Char="${(c)#NPW}"
													if [ "$Char" -ge 6 ] ; then
														# expect mit der Einstellungsdatei ausfuehren
														> ${gv_WorkDir}/expect <<<"#!/usr/bin/expect -f

set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {\$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- \$arg
    }
}

set db_old_pass \"$OPW\"
set db_new_pass \"$NPW\"

set timeout 1
match_max 100000
stty -echo
spawn pwsafe --passwd -f $DB_CHANGE
expect \"Enter passphrase .*: \"
send -- \"\$db_old_pass\r\"
expect \"Enter new .*: \"
send -- \"\$db_new_pass\r\"
expect \"Reenter new .*: \"
send -- \"\$db_new_pass\r\"
expect {
 \"*Passphrase is incorrect*\" {exit 10}
 default {exit 0}
}
stty echo
expect eof"
														(export LC_ALL=C ; expect -f ${gv_WorkDir}/expect >/dev/null) || \
														(del_expect ; prog_failure)
														del_expect
														# EXIT Wert uerberpruefen# {{{
														case "$?" in
															10)
																yesno "$gv_Attention" "$INCORRECT_PW_DB_MSG" "yes"
																if [ "$gv_Auswahl" = yes ] ; then
																	db_change_pass_menu
																else
																	# schnell die Erstellungsdatei loeschen
																	del_expect
																	break 2
																fi
																;;
															0)
																# Passwort geaendert
																msgbox "$gv_Info" "$OK_MSG"
																del_expect
																break 2
																;;
															*)
																yesno "$gv_Attention" "$NOOK_MSG" "yes"
																if [ "$gv_Auswahl" = yes ] ; then
																	db_change_pass_menu
																else
																	del_expect
																	break 2
																fi
																;;
														esac
														## }}}
													else
														# falsche Password Laenge
														incorrect_6pass_length
														db_change_pass_menu
													fi
												else
													different_passwd
													db_change_pass_menu
												fi
											else
												# Nachricht das alle Felder belegt sein muessen.
												input_all_field_msg
												db_change_pass_menu
											fi
											;;
									esac
								done
								## }}}
								;;
						esac
					done
				else
					no_db_msg
				fi
				## }}}
				manage_db_menu $lv_Change_Pw_Db
				;;
			"$lv_Delete_Db")
				# Datenbank loeschen# {{{
				list_db
				if [[ -n ${DB_FILES_DEL_M[1]} ]] ; then
					DEL_MENU=($DB_FILES_DEL_M)
					U_OPT="no"
					checklist "" "$MANAGE_TITLE" "$gv_Delete_MSG" "$DEL_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_db_help
								U_OPT="no"
								checklist "${gv_Auswahl#HELP }" "$MANAGE_TITLE" "$gv_Delete_MSG" "$DEL_MENU"
								;;
							*)	# Auswahl uebernehmen und loeschen (auch das Backup)
								while read i ; do
									rm -f $i ${i}~ >/dev/null || prog_failure
								done < ${gv_LogFile}$$
								break
								;;
						esac
					done
				else
					no_db_msg
				fi
				## }}}
				manage_db_menu "$lv_Delete_Db"
				;;
			$gv_Back)
				# zurueck
				break
				;;
		esac
	done
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
