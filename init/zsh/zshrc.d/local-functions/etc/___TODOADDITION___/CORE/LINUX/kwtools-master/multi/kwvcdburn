#!/bin/zsh
#
# Autor: Kai Wilke <kiste@netzworkk.de> 22.07.2015
#
# Script: kwvcdburn, kreiert und brennt (S)VCD Filme
# Version: 0.1.1
#

trap 'setterm --inversescreen off ; setterm --reset ;
rm -rf $gv_WorkDir &>/dev/null' EXIT INT

gv_ScriptName=${0##*/}

#
# Verzeichniss in denen nach Funktionen gesucht wird
#
if [ -f /usr/local/share/kwtools/functions/sys/script_init ] ; then
	PREFIX=/usr/local
else
	PREFIX=/usr
fi
Script_init_Fpath="${PREFIX}/share/kwtools/functions/sys"
export TEXTDOMAINDIR="${PREFIX}/share/locale"
export TEXTDOMAIN="$gv_ScriptName"

if [ -z ${(M)${FPATH}##*${Script_init_Fpath}*} ] ; then
	FPATH=${Script_init_Fpath}:${FPATH}
fi

autoload -U script_init

# Scriptinitialisierung
script_init

# auf Programme pruefen
prog_check vcdimager
if [ -n "${NO_PROGS[1]}" ] ; then
	exit 0
fi

# Soll die alte Konfiguration uebernommen werden (ja/nein)?
if [ -f "${gv_HomePath}/.kwtools/vcdburnrc" -a ! -f "${gv_HomePath}/.kwtools/kwvcdburnrc" ] ; then
	CONVERT_TITLE=$(gettext 'Konfigurationsuebernahme')
	CONVERT_MSG=$(gettext 'Soll die Konfigurations Datei ${gv_HomePath}/.kwtools/vcdburnrc nach ${gv_HomePath}/.kwtools/kwvcdburnrc uebernommen werden (ja/nein)? Bei nein wird die alte Konfigurationsdatei nur geloescht.')
	yesno "$CONVERT_TITLE" "$CONVERT_MSG" "yes"
	if [ "$gv_Auswahl" != no ] ; then
		mv "${gv_HomePath}/.kwtools/vcdburnrc" "${gv_HomePath}/.kwtools/kwvcdburnrc" &>/dev/null
	else
		rm "${gv_HomePath}/.kwtools/vcdburnrc" &>/dev/null
	fi
fi

# Konfigurationen einlesen
read_file kwvcdburnrc

# Variablen
if [ -z "$FILM_DIR" ] ; then
	FILM_DIR="$HOME"
fi	
if [ -z "$VCD_TYPE" ] ; then
	VCD_TYPE="svcd"
fi

CREATE_NAME_MSG=$(gettext 'Vergeben Sie einen Namen fuer die Video-CD ohne .cue Endung, ansonsten heisst sie videocd.cue.')

# Funktion main_menu{{{
lv_Video_Cd=$(gettext 'Video-CD')
lv_Burn=$(gettext 'brennen')
MAIN_MENU=($gv_Configuration \"\" $lv_Video_Cd \"\" $lv_Burn \"\" $gv_Back \"\")
#
main_menu() {
	menubox "$1" "$gv_Mainmenu" "$gv_Menupoint" "$MAIN_MENU"
}
#}}}

##############################################################
#
# Hauptprogramm
#
##############################################################
#
hw_conf
cdrom
main_menu
while [ "$gv_Auswahl" ] ; do
	case $gv_Auswahl in
		HELP*)
    	    # Hilfe Messagebox
			script_help help
			main_menu "${gv_Auswahl#HELP }"
			;;
		$gv_Configuration)
			# Konfiguration der ~/.kwtools/kwvcdburnrc# {{{
			autoload -U kwvcdburn_conf kwvcdburn_config
			kwvcdburn_conf
			## }}}
			main_menu $gv_Configuration
			;;
		$lv_Video_Cd)
			# VCD Image erstellen{{{
			#
			# Entweder mehrere Filme zusammenpacken film1 film2 ...
			# oder einzeln. Groesse zusammenrechnen.
			PROG=vcdimager
			FORMAT="MPEG sequence"
			SUFFIX=".mpg .mpeg .MPG .MPEG"
			# Dateien auswaehlen
			file_choice "$FILM_DIR" multi
			#
			VIDEO_TITLE=($lv_Video_Cd)
			#
			# Programm vcdimager ausfuehren.
			#
			typeset -L V_Anz
			V_Anz=`wc -l <${gv_LogFile}$$`
			mv ${gv_LogFile}$$ ${gv_WorkDir}/files
			CREATE_MSG=$(gettext 'Erzeuge Video-CD: $file.')
			#
			# Soll eine VCD Struktur fuer alle Dateien erstellt werden,
			# wenn es mehr als eine Datei gibt (ja/nein)?
			if [ "$V_Anz" -gt 1 ] ; then
				CREATE_MULTI_QUESTION_MSG=$(gettext 'Soll aus allen Dateien eine einheitliche Video-CD Struktur erzeugt werden (Ja/nein)?')
				yesno "$VIDEO_TITLE" "$CREATE_MULTI_QUESTION_MSG" ""
				if [ "$gv_Auswahl" = yes ] ; then
					# Dateinamen vergeben
					inputbox "$VIDEO_TITLE" "$CREATE_NAME_MSG"
					FILE_NAME="${gv_Auswahl:-videocd}"
					CREATE_MULTI_MSG=$(gettext 'Erzeuge Video-CD ${FILE_NAME}.cue aus den Dateien.')
					# zusammenfuegen
					while read file ; do
						FILES+=( $file )
					done <${gv_WorkDir}/files
					#
					$PROG -t $VCD_TYPE -c ${FILE_NAME%.*}.cue -b ${FILE_NAME%.*}.bin $FILES | \
					progressbox "$VIDEO_TITLE" "$CREATE_MULTI_MSG" || prog_failure
				else
					# alle Dateien einzeln umwandeln.
					Anz=1
					while read file ; do
						$PROG -t $VCD_TYPE -c ${file%.*}.cue -b ${file%.*}.bin --volume-count=$V_Anz --volume-number=$Anz $file | \
						progressbox "$VIDEO_TITLE" "$CREATE_MSG" || prog_failure
						(( Anz++ ))
					done <${gv_WorkDir}/files
				fi
			elif [ "$V_Anz" -eq 1 ] ; then
				# einzelne Datei umwandeln
				file=$(< ${gv_WorkDir}/files)
				$PROG -t $VCD_TYPE -c ${file%.*}.cue -b ${file%.*}.bin $file | \
				progressbox "$VIDEO_TITLE" "$CREATE_MSG" || prog_failure
			fi
			#}}}
			main_menu $lv_Video_Cd
			;;
		$lv_Burn)
			# Film brennen# {{{
			multi_conf
			cd_dvd_burn --vcd
			## }}}
			main_menu $lv_Burn
			;;
		$gv_Exit)	break
			;;
	esac
done	
#
# umounten des Mount-Verzeichnis
if [ "$MOUNT_PATH" ] ; then
	mount_check -u $MOUNT_PATH
fi
unset -- FILM_DIR gv_Auswahl MOUNT MOUNTDIR FORMAT VCD_TYPE CDROM VOLUME_SET VOLUME_COUNT V_Anz
exit 0
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
