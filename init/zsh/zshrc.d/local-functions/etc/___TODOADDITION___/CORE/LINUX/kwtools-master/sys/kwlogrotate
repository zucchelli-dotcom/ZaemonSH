#!/bin/zsh
#
# Autor: Kai Wilke <kiste@netzworkk.de> 09.06.2015
#
# Script: kwlogrotate, zur Verwaltung der Logdateien
# Version: 0.3.2

trap 'setterm --inversescreen off ; setterm --reset ;
rm -rf $gv_Script_Lock $gv_WorkDir &>/dev/null' EXIT INT

gv_ScriptName=${0##*/}

# Verzeichniss in denen nach Funktionen gesucht wird
#
if [ -f /usr/local/share/kwtools/functions/sys/script_init ] ; then
	PREFIX=/usr/local
else
	PREFIX=/usr
fi
Script_init_Fpath="${PREFIX}/share/kwtools/functions/sys"
export TEXTDOMAINDIR="${PREFIX}/share/locale"
export TEXTDOMAIN="$gv_ScriptName"

if [ -z ${(M)${FPATH}##*${Script_init_Fpath}*} ] ; then
	FPATH=${Script_init_Fpath}:${FPATH}
fi

# script_init enthält die globalen Scripteinstellungen und lädt
# diese automatisch.
#
autoload -U script_init

# Scriptinitialisierung
script_init

# auf Programme pruefen.
prog_check logrotate
if [ -z "$PROGS" ] ; then
	exit 0
fi

# auf Root pruefen
root_check

# Nachdem das Script initialiiert wurde, kann man die anderen
# benötigten Funktionen laden.
autoload -U kwlogrotate_config

# Variablen
CREATE_TITLE=$(gettext 'Konfiguration::Name')
CREATE_MSG=$(gettext 'Geben Sie hier bitte den Namen fuer die Konfigurationsdatei ein. Am besten den Namen des Service.')
IST_FILE=${gv_WorkDir}/logfiles
LOGFILE_MENUE=${gv_WorkDir}/logfile_menue
DAILY=$(gettext 'taeglich')
WEEKLY=$(gettext 'woechentlich')
MONTHLY=$(gettext 'monatlich')
Add_Entry=$(gettext 'Eintrag hinzufuegen')
Access=$(gettext 'Rechte')
Compress=$(gettext 'Kompression')
Count=$(gettext 'Anzahl')
LogDatei=$(gettext 'Logdatei')
Mail=$(gettext 'Mail')
Name=$(gettext 'Name')
Programm=$(gettext 'Programm')
Rotatetime=$(gettext 'Rotierzeit')
Script=$(gettext 'Script')
Size=$(gettext 'Groesse')

# Funktion Hauptmenue{{{
#
MAIN_MENU=($gv_Create \"\" $gv_Change \"\" $gv_Delete \"\" $gv_Exit \"\")
main_menu() {
	menubox  "$1" "$gv_Mainmenu" "$gv_Menupoint" "$MAIN_MENU"
}
#}}}
# Funktion log_aendern_menue{{{
#
LOGFILE_TITLE=$(gettext 'Logdatei')
log_aendern_menue() {
	unset -- LOGFILE_MENU LogFiles
	local LogFiles
	while read A B ; do
		LogFiles+=( $A $B )
	done < "$LOGFILE_MENUE"
	LOGFILE_MENU=($LogFiles)
	menubox "$1" "$LOGFILE_TITLE" "$gv_Menupoint" "$LOGFILE_MENU"
}
#}}}
# Funktion log_file_wert{{{
#
log_file_wert() {
	unset -- DF_ARRAY WERT ANZAHL COMPRESSART COMPRESS ROTATE SIZE CREATE \
   		U_MAIL SCRIPT LOGDATEI Files
	FORMAT="ASCII"
	file_choice /etc/logrotate.d only
	#
	if [ "$WERT" ] ; then
		#
		# schauen, ob die Datei nicht logrotate.conf ist. 
		# Wenn nicht einlesen.
		#
		if [ "$WERT" != logrotate.conf ] ; then
			NAME="${VERZ}/${WERT}"
			Anz=1
			while read a b ; do
				case $a in
					/*)
						# Dateien im Array sammeln
						Files+=($a)
						;;
					\})
						# Array LOGDATEI[Anz] mit Werten fuellen
						LOGDATEI[Anz]=("$Files")
						unset -- Files
						(( Anz++ ))
						;;
					size)	SIZE[Anz]=($b)
						;;
					rotate)	ANZAHL[Anz]=($b)
						;;
					mail)	U_MAIL[Anz]=($b)
						;;
					create)	CREATE[Anz]=($b)
						;;
					daily)
						ROTATE[Anz]=($DAILY)
						;;
					weekly)
						ROTATE[Anz]=($WEEKLY)
						;;
					monthly)
						ROTATE[Anz]=($MONTHLY)
						;;
					compresscmd)
						COMPRESSART[Anz]=($b)
						;;
					*)
						# eventuelle Scripts erfahren.
						case ($a $b) in
							invoke-rc.d* | *restart* | *reload* | *stop* | killall* | kill* | killall5*)
								SCRIPT[Anz]="$a $b"
								;;
						esac
						;;
				esac
			done < "$NAME"
			(( Anz-- ))
			#
			#
			#
			> "$LOGFILE_MENUE" <<< "\"$Add_Entry\" \"\"
$Name \"$NAME\"" 
			L_Anz=0
			while [ "$Anz" != "$L_Anz" ] ; do
				(( L_Anz++ ))
				>> "$LOGFILE_MENUE" <<< "${LogDatei}${L_Anz} \"${LOGDATEI[L_Anz]}\"
${Count}${L_Anz} \"${ANZAHL[L_Anz]}\"
${Rotatetime}${L_Anz} \"${ROTATE[L_Anz]}\"
${Mail}${L_Anz} \"${U_MAIL[L_Anz]}\"
${Size}${L_Anz} \"${SIZE[L_Anz]}\"
${Compress}${L_Anz} \"${COMPRESSART[L_Anz]}\"
${Access}${L_Anz} \"${CREATE[L_Anz]}\"
${Script}${L_Anz} \"${SCRIPT[L_Anz]}\""
			done
			>> "$LOGFILE_MENUE" <<< "$gv_Save \"\"
$gv_Back \"\""
		else
			MSG=$(gettext 'Die Datei $WERT ist keine Logrotate Konfigurationsdatei.')
			msgbox "$gv_Attention" "$MSG"
		fi
	fi
}
#}}}
# Funktionen no_logfile_select_msg# {{{
no_logfile_select_msg() {
	MSG=$(gettext 'Sie muessen erst mindestens eine Logdatei auswaehlen.')
	msgbox "$gv_Info" "$MSG"
}
## }}}
# Funktion log_aendern{{{
#
log_aendern() {
	log_aendern_menue
	while [ "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help conf_help
				log_aendern_menue "${gv_Auswahl#HELP }"
				;;
			"$Add_Entry")
				# Einen Eintrag fuer Logdateien hinzufuegen# {{{
				if [ ! -z "$LOGDATEI" ] ; then
					Anz="${#LOGDATEI[@]}"
					L_Anz=0
					(( Anz = Anz+1 ))
					> "$LOGFILE_MENUE" <<< "\"$Add_Entry\" \"\"
$Name \"$NAME\"" 
					while [ "$Anz" != "$L_Anz" ] ; do
						(( L_Anz++ ))
						if [ ! -z "${${(ws: :)${LOGDATEI[L_Anz]}}[1]}" ] ; then
							# Nur die erste Datei checken
							access "${${(ws: :)${LOGDATEI[L_Anz]}}[1]}"
							CREATE[L_Anz]="$ACCESS"
							>> "$LOGFILE_MENUE" <<< "${LogDatei}${L_Anz} \"${LOGDATEI[L_Anz]}\"
${Count}${L_Anz} \"${ANZAHL[L_Anz]}\"
${Rotatetime}${L_Anz} \"${ROTATE[L_Anz]}\"
${Mail}${L_Anz} \"${U_MAUL[L_Anz]}\"
${Size}${L_Anz} \"${SIZE[L_Anz]}\"
${Compress}${L_Anz} \"${COMPRESSART[L_Anz]}\"
${Access}${L_Anz} \"${CREATE[L_Anz]}\"
${Script}${L_Anz} \"${SCRIPT[L_Anz]}\""
						else
							>> "$LOGFILE_MENUE" <<< "${LogDatei}${L_Anz} \"\"
${Count}${L_Anz} \"\"
${Rotatetime}${L_Anz} \"\"
${Mail}${L_Anz} \"\"
${Size}${L_Anz} \"\"
${Compress}${L_Anz} \"\"
${Access}${L_Anz} \"\"
${Script}${L_Anz} \"\""
						fi
					done
					>> "$LOGFILE_MENUE" <<< "$gv_Save \"\"
$gv_Back \"\""
				else
					MSG=$(gettext 'Sie muessen erst mindestens eine Logdatei auswaehlen um einen neuen Eintrag fuer Logdateien hinzufuegen zu koennen.')
					msgbox "$gv_Info" "$MSG"
				fi
				## }}}
				log_aendern_menue "$Add_Entry"
				;;
			$Name)
				# Name der Logdatei Konfiguration eingeben{{{
				MP_ANZ=${gv_Auswahl##*[a-z,A-Z]}
				dselect /etc/logrotate.d
				if [ "$VERZ" ] ; then
					dselect_check "$VERZ"
					if [ "$VERZ" ] ; then
						inputbox "$CREATE_TITLE" "$CREATE_MSG"
						if [ "$gv_Auswahl" ] ; then
							NAME="${VERZ}/${gv_Auswahl}"
							sed -e "s#^${Name}${MP_ANZ}.*#${Name}${MP_ANZ} \"$NAME\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
							mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
						else
							no_input_msg
						fi
					fi
				fi
				#}}}
				log_aendern_menue $Name
				;;
			$LogDatei*)
				# Logdateien auswählen{{{
				# Auswahlname speichern
				CHOICE="$gv_Auswahl"
				#
				# herausfiltern der *.Zahl Dateien
				FORMAT=""
				AUSSCHLUSS=LOG
				LogDatei_Nr="$gv_Auswahl"
				Access_Nr=${gv_Auswahl##*[a-z,A-Z]}
				Access_Nr=${Access_Nr:-1}
				#
				# vorherige Werte sichern und mit "on" kennzeichnen
				#
				rm -f $IST_FILE &>/dev/null
				for i in ${(ws: :)${LOGDATEI[Access_Nr]}} ; {
					>> $IST_FILE <<< "${i##*/}"
				}
				#
				file_choice /var/log multi
				if [ "${WERT[1]}" ] ; then
					unset -- Files
					for i in ${=WERT} ; {
						Files+=(`pwd`/${i})
					}
					LOGDATEI[Access_Nr]=("$Files")
					if [ ! -z "$LOGDATEI" ] ; then
						Anz="${#LOGDATEI[@]}"
						L_Anz=0
						> "$LOGFILE_MENUE" <<< "\"$Add_Entry\" \"\"
$Name \"$NAME\"" 
						while [ "$Anz" != "$L_Anz" ] ; do
							(( L_Anz++ ))
							access "${${(ws: :)${LOGDATEI[L_Anz]}}[1]}"
							CREATE[L_Anz]="$ACCESS"
							>> "$LOGFILE_MENUE" <<< "${LogDatei}${L_Anz} \"${LOGDATEI[L_Anz]}\"
${Count}${L_Anz} \"${ANZAHL[L_Anz]}\"
${Rotatetime}${L_Anz} \"${ROTATE[L_Anz]}\"
${Mail}${L_Anz} \"${U_MAUL[L_Anz]}\"
${Size}${L_Anz} \"${SIZE[L_Anz]}\"
${Compress}${L_Anz} \"${COMPRESSART[L_Anz]}\"
${Access}${L_Anz} \"${CREATE[L_Anz]}\"
${Script}${L_Anz} \"${SCRIPT[L_Anz]}\""
						done
						>> "$LOGFILE_MENUE" <<< "$gv_Save \"\"
$gv_Back \"\""
					fi
				else
					no_input_msg
				fi
				#}}}
				log_aendern_menue $CHOICE
				;;
			$Count*)
				# Anzahl der Rotierung eingeben{{{
				# Auswahlname speichern
				CHOICE="$gv_Auswahl"
				#
				if [ "$LOGDATEI" ] ; then
					MP_ANZ=${gv_Auswahl##*[a-z,A-Z]}
					COUNT_TITLE=(${gv_Configuration}::${Count})
					COUNT_MSG=$(gettext 'Geben Sie bitte eine Zahl an, wie oft die Logdatei rotiert werden soll.')
					number_input "$COUNT_TITLE" "$COUNT_MSG" "${ANZAHL[MP_ANZ]}"
					#
					if [ "$NUMBER" ] ; then
						sed -e "s#^${Count}${MP_ANZ}.*#${Count}${MP_ANZ} \"$NUMBER\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
						ANZAHL[MP_ANZ]="$NUMBER"
					else
						sed -e "s#^${Count}${MP_ANZ}.*#${Count}${MP_ANZ} \"\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
						ANZAHL[MP_ANZ]=""
					fi
				else
					no_logfile_select_msg
				fi
				#}}}
				log_aendern_menue $CHOICE
				;;
			$Rotatetime*)
				# Wann soll rotiert werden?{{{
				# Auswahlname speichern
				CHOICE="$gv_Auswahl"
				#
				if [ "$LOGDATEI" ] ; then
					MP_ANZ=${gv_Auswahl##*[a-z,A-Z]}
					ROTATE_TIME_TITLE=(${gv_Configuration}::${Rotatetime})
					ROTATE_TIME_MSG=$(gettext 'Waehlen Sie die Rotierzeit aus.')
					ROTATE_TIME_MENU=($DAILY \"\" $WEEKLY \"\" $MONTHLY \"\")
					#
					# Funktionen (rotatetime_menu)# {{{
					#
					rotatetime_menu() {
						menubox "$1" "$ROTATE_TIME_TITLE" "$ROTATE_TIME_MSG" "$ROTATE_TIME_MENU"
					}
					## }}}
					rotatetime_menu "${ROTATE[MP_ANZ]}"
					if [ "$gv_Auswahl" ] ; then
						while [ $gv_Auswahl ] ; do
							case $gv_Auswahl in
								HELP*)	script_help rotate_help
									rotatetime_menu "${gv_Auswahl#HELP }"
									;;
								*)	#
									# Rotate vormerken
									#
									sed -e "s#^${Rotatetime}${MP_ANZ}.*#${Rotatetime}${MP_ANZ} \"${gv_Auswahl}\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
									mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
									ROTATE[MP_ANZ]="$gv_Auswahl"
									break
									;;
							esac
						done
					else
						sed -e "s#^${Rotatetime}${MP_ANZ}.*#${Rotatetime}${MP_ANZ} \"\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
						ROTATE[MP_ANZ]=""
					fi
				else
					no_logfile_select_msg
				fi
				#}}}
				log_aendern_menue $CHOICE
				;;
			$Mail*)
				# Wem soll gemailt werden?{{{
				# Auswahlname speichern
				CHOICE="$gv_Auswahl"
				if [ "$LOGDATEI" ] ; then
					MP_ANZ=${gv_Auswahl##*[a-z,A-Z]}
					mail_address
					if [ "$MAILADR" ] ; then
						sed -e "s#^${Mail}${MP_ANZ}.*#${Mail}${MP_ANZ} \"${MAILADR}\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
						U_MAIL[MP_ANZ]="$MAILADR"
					else
						sed -e "s#^${Mail}${MP_ANZ}.*#${Mail}${MP_ANZ} \"\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
						U_MAIL[MP_ANZ]=""
					fi
				else
					no_logfile_select_msg
				fi
				#}}}
				log_aendern_menue $CHOICE
				;;
			$Size*)
				# Grösse einstellen ab wann rotiert werden soll{{{
				# Auswahlname speichern
				CHOICE="$gv_Auswahl"
				#
				if [ "$LOGDATEI" ] ; then
					MP_ANZ=${gv_Auswahl##*[a-z,A-Z]}
					SIZE_TITLE=(${gv_Configuration}::${Size})
					SIZE_MSG=$(gettext 'Waehlen Sie die Groesse aus, ab wann rotiert werden soll.')
					SIZE_MENU=(100k \"\" 250k \"\" 500k \"\" 1M \"\" 2M \"\" 4M \"\" 10M \"\" 25M \"\")
					menubox "${SIZE[MP_ANZ]}" "$SIZE_TITLE" "$SIZE_MSG" "$SIZE_MENU"
					if [ "$gv_Auswahl" ] ; then
						while [ "$gv_Auswahl" ] ; do
							case "$gv_Auswahl" in
								HELP*)	script_help size_help
									menubox "${gv_Auswahl#HELP }" "$SIZE_TITLE" "$SIZE_MSG" "$SIZE_MENU"
									;;
								*)	#
									# Grösse annehmen
									#
									sed -e "s#^${Size}${MP_ANZ}.*#${Size}${MP_ANZ} \"$gv_Auswahl\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
									mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
									SIZE[MP_ANZ]=$gv_Auswahl
									break
									;;
							esac
						done
					else
						sed -e "s#^${Size}${MP_ANZ}.*#${Size}${MP_ANZ} \"\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
						SIZE[MP_ANZ]=""
					fi
				else
					no_logfile_select_msg
				fi
				#}}}
				log_aendern_menue $CHOICE
				;;
			$Compress*)
				# Welches Kompressionsprogramm einstellen{{{
				# Auswahlname speichern
				CHOICE="$gv_Auswahl"
				if [ "$LOGDATEI" ] ; then
					MP_ANZ=${gv_Auswahl##*[a-z,A-Z]}
					compress_choice gzip bzip2
					if [ "$COMPRESS" ] ; then
						COMPRESSART[MP_ANZ]="$COMPRESS"
						UNCOMPRESSART[MP_ANZ]="$UNCOMPRESS"
						sed -e "s#^${Compress}${MP_ANZ}.*#${Compress}${MP_ANZ} \"$COMPRESS\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
					else
						COMPRESSART[MP_ANZ]=""
						UNCOMPRESSART[MP_ANZ]=""
						sed -e "s#^${Compress}${MP_ANZ}.*#${Compress}${MP_ANZ} \"\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
					fi
				else
					no_logfile_select_msg
				fi
				#}}}
				log_aendern_menue $CHOICE
				;;
			$Access*)
				# Rechte, user und Gruppenrechte einstellen{{{
				# Auswahlname speichern
				CHOICE="$gv_Auswahl"
				if [ "$LOGDATEI" ] ; then
					MP_ANZ=${gv_Auswahl##*[a-z,A-Z]}
					MOD=${${(ws: :)${CREATE[MP_ANZ]}}[1]}
					U=${${(ws: :)${CREATE[MP_ANZ]}}[2]}
					G=${${(ws: :)${CREATE[MP_ANZ]}}[3]}
					file_chmod
					if [ "$CHMOD" ] ; then
						CREATE[MP_ANZ]="$CHMOD"
						sed -e "s#^${Access}${MP_ANZ}.*#${Access}${MP_ANZ} \"$CHMOD\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
					else
						sed -e "s#^${Access}${MP_ANZ}.*#${Access}${MP_ANZ} \"\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
						CREATE[MP_ANZ]=""
					fi
				else
					no_logfile_select_msg
				fi
				#}}}
				log_aendern_menue $CHOICE
				;;
			$Script*)
				# Script, ein Befehl der nach der Rotierung ausgeführt werden soll{{{
				# Auswahlname speichern
				CHOICE="$gv_Auswahl"
				#
				if [ "$LOGDATEI" ] ; then
					MP_ANZ=${gv_Auswahl##*[a-z,A-Z]}
					KILL_ART="`which killall` -HUP"
					SCRIPT_TITLE=(${gv_Configuration}::${Script})
					SCRIPT_MSG=$(gettext 'Geben Sie hier bitte einen Befehl ein, der den Daemon (Server) veranlasst seine Einstellungen neu zu laden. Oder vielleicht hat der daemon auch einen eigenen rotate Befehl, wie squid (Proxy). Bsp: $KILL_ART syslogd.')
					inputbox "$SCRIPT_TITLE" "$SCRIPT_MSG" "${SCRIPT[MP_ANZ]}"
					#
					if [ "$gv_Auswahl" ] ; then
						sed -e "s#^${Script}${MP_ANZ}.*#${Script}${MP_ANZ} \"$gv_Auswahl\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
						SCRIPT[MP_ANZ]="$gv_Auswahl"
					else
						sed -e "s#^${Script}${MP_ANZ}.*#${Script}${MP_ANZ} \"\"#" $LOGFILE_MENUE >$LOGFILE_MENUE$$
						mv $LOGFILE_MENUE$$ $LOGFILE_MENUE
						SCRIPT[MP_ANZ]=""
					fi
				else
					no_logfile_select_msg
				fi
				#}}}
				log_aendern_menue $CHOICE
				;;
			$gv_Save)
				# Einstellungen speichern{{{
				if [ "${LOGDATEI[1]}" -a "${ANZAHL[1]}" -a "${ROTATE[1]}" -a "${NAME}" ] ; then
					kwlogrotate_config
					unset -- NAME COMPRESSART LOGDATEI ROTATE M_ADDR SIZE COMPRESS CREATE ANZAHL SCRIPT
					break
				else
					MSG=$(gettext 'Sie muessen die Menuepunkte Name und fuer alle Logdateien, Anzahl und Rotierzeit mit Werten belegen. Alle anderen Menuepunkte sind optional.')
					msgbox "$gv_Attention" "$MSG"
					log_aendern_menue
				fi
				#}}}
				;;
			$gv_Back)	break
				;;
		esac
	done
}
#}}}
##################################################################
#
# Hauptprogramm
#
##################################################################
#

if [ ! -d /etc/logrotate.d ] ; then
	create_file -d /etc/logrotate.d
fi

local Anz L_Anz
integer Anz L_Anz
net_conf
main_menu
while [ "$gv_Auswahl" ] ; do
	case $gv_Auswahl in
		HELP*)
    	    # Hilfe Messagebox
			script_help help
			main_menu "${gv_Auswahl#HELP }"
			;;
		$gv_Create)
			# Log-Konf.-datei anlegen
			# Name der Logdatei Konfiguration eingeben{{{
			#
			unset -- L_Anz LOGDATEI DF_ARRAY WERT ANZAHL COMPRESSART COMPRESS ROTATE SIZE CREATE U_MAIL SCRIPT
			integer L_Anz
			L_Anz=1
			rm -rf $LOGFILE_MENUE &>/dev/null
			dselect /etc/logrotate.d
			if [ "$VERZ" ] ; then
				dselect_check "$VERZ"
				if [ "$VERZ" ] ; then
					inputbox "$CREATE_TITLE" "$CREATE_MSG"
					if [ "$gv_Auswahl" ] ; then
						NAME="${VERZ}/${gv_Auswahl}"
						> "$LOGFILE_MENUE" <<< "\"$Add_Entry\" \"\"
$Name \"$NAME\" 
${LogDatei}${L_Anz} \"\"
${Count}${L_Anz} \"\"
${Rotatetime}${L_Anz} \"\"
${Mail}${L_Anz} \"\"
${Size}${L_Anz} \"\"
${Compress}${L_Anz} \"\"
${Access}${L_Anz} \"\"
${Script}${L_Anz} \"\"
$gv_Save \"\"
$gv_Back \"\""
						log_aendern
					else
						no_input_msg
					fi
				fi
			fi
			#}}}
			main_menu $gv_Create
			;;
		$gv_Change)
			# Log-Konf.-datei ändern{{{
			log_file_wert
			if [ "$NAME" ] ; then
				log_aendern
			fi
			#}}}
			main_menu $gv_Change
			;;
		$gv_Delete)
			# Log-Konf.-Dateien loeschen{{{
			unset -- DF_ARRAY
			rm -f $IST_FILE &>/dev/null
			FORMAT="ASCII"
			file_choice /etc/logrotate.d multi
			if [ "$WERT" ] ; then
				for i in ${=WERT} ; {
					rm -f ${VERZ}/${i} &>/dev/null
				}
			fi
			#}}}
			main_menu $gv_Delete
			;;
		$gv_Exit)	break
			;;
	esac
done	
#
exit 0
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
