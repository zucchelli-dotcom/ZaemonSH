#!/bin/zsh
#
# Autor: Kai Wilke <kiste@netzworkk.de> 29.06.2015
#
# Script: kwcryptsetup, Erstellung und Bearbeitung von verschluesselten
# Devices mittels cryptsetup.
#
# Viele Funktionen wurden aus Debians Funktions-Datei
# /lib/cryptsetup/cryptdisks.functions übernommen, korrigiert
# oder erweitert.
#
# Version: 0.1.7

# Ausführen von Befehlen auf bestimmte Signale.
# Notiz. Immer den Namen verwenden, da es auf einigen OS
# eine andere Nummerierung geben kann.
#
trap 'setterm --inversescreen off ; setterm --reset ;
rm -rf $gv_Script_Lock $gv_WorkDir &>/dev/null' EXIT INT

gv_ScriptName=${0##*/}
export gv_ScriptName


#
# Verzeichniss in denen nach Funktionen gesucht wird
#
if [ -f /usr/local/share/kwtools/functions/sys/script_init ] ; then
	PREFIX=/usr/local
else
	PREFIX=/usr
fi
Script_init_Fpath="${PREFIX}/share/kwtools/functions/sys"
export TEXTDOMAINDIR="${PREFIX}/share/locale"
export TEXTDOMAIN="$gv_ScriptName"

if [ -z ${(M)${FPATH}##*${Script_init_Fpath}*} ] ; then
	export FPATH=${Script_init_Fpath}:${FPATH}
fi

# script_init enthält die globalen Scripteinstellungen und lädt
# diese automatisch.
#
autoload -U script_init

# Scriptinitialisierung
script_init

root_check

# Variablen
CRYPT_PREFIX="kwcryptsetup"
TABFILE="/etc/crypttab"
MAPPER="/dev/mapper"
OPENSSL="${commands[openssl]}"
GNUPG="${commands[gpg]}"

prog_check cryptsetup dmsetup losetup
if [ ! -z "$NO_PROGS" ] ; then
	exit 0
fi

# Loop Support des Kernels ueberpruefen
kernel_release
# Funktion (no_loop_support_msg), Nachricht das der Kernel kein# {{{
# Support fuer das loopback Device bietet.
#
no_loop_support_msg() {
	MSG=$(gettext 'Das Modul loop konnte nicht geladen werden. Wahrscheinlich besitzt Ihr Kernel kein loopback Device Support. Das Script beendet sich jetzt.')
	msgbox "$gv_Attention" "$MSG"
}
## }}}
if [ -z ${(M)${(f)"$(< /proc/devices)"}##[[:space:]]*loop*} ] ; then
	load_module loop || \
	no_loop_support_msg
	exit 0
fi

# Falls noch nicht geladen oder als Builtin im Kernel,
# das Modul dm-crypt laden
load_module dm-crypt

# Nachdem das Script initialisiert wurde, kann man die anderen
# benötigten Funktionen laden.
autoload -U no_luks_cryptdev_msg

# Wenn es die oder eine von den Konfigurationsdateien kwcryptsetuprc
# und cryptdisks gibt einlesen.
#
read_file kwcryptsetuprc
if [ -f /etc/default/cryptdisks ] ; then
	source /etc/default/cryptdisks
fi
#
#################################################
# TODO: CIPHER hier lassen? Tendenz ja.
if [[ "${gv_K_Release%%-*}" > 2.6.33 ]] ; then
	CIPHER="aes-xts-plain64"
	#CIPHER="aes-cbc-essiv:sha256"
else
	CIPHER="aes-xts-plain"
	#CIPHER="aes-plain"
fi

# translation Variablen
lv_Container=$(gettext 'Container')
lv_Drives=$(gettext 'Laufwerke')
lv_Key=$(gettext 'Schluessel')
lv_Luks=$(gettext 'LUKS')
lv_Tcrypt=$(gettext 'TCRYPT')
lv_Partition=$(gettext 'Partition')
lv_Swap=$(gettext 'Swap')
lv_Start=$(gettext 'start')
lv_State=$(gettext 'Status')
lv_Stop=$(gettext 'stop')
lv_Management=$(gettext 'Management')
lv_File=$(gettext 'Datei')
lv_Keyscript=$(gettext 'Schluessel Script')
KEYFILE_PASSWD_MSG=$(gettext 'Geben Sie das Passwort fuer die Schluesseldatei ein.')
SINGLE_BLOCK_DEVICE_MSG=$(gettext 'Waehlen Sie ein Laufwerk aus.')
MULTI_BLOCK_DEVICE_MSG=$(gettext 'Waehlen Sie ein oder mehrere Laufwerke aus.')
PASSWD_START_MSG=$(gettext 'Geben Sie einen vorhandenen Schluessel fuer das Laufwerk "$dst" ein.')
PRECHECK_FAILED_MSG=$(gettext 'Die Vorueberpruefung von $src ist fehlgeschlagen: $pre_out.')
export KEYFILE_PASSWD_MSG

# Funktion main_menu# {{{
#
MAIN_MENU=($gv_Configuration \"\" $lv_State \"\" $lv_Luks \"\"
$lv_Drives \"\" $lv_Key \"\" $lv_Start \"\" $lv_Stop \"\" $gv_Exit \"\")
main_menu() {
	menubox "$1" "$gv_Mainmenu" "$gv_Menupoint" "$MAIN_MENU"
}
## }}}
# Funktion (no_block_device), Nachricht das es kein Block# {{{
# Geraet ist
#
no_block_device() {
	MSG=$(gettext '$dst ist kein block Geraet.')
	msgbox "$gv_Attention" "$MSG"
}
## }}}
	# Funktion (check_key_opt), prueft Schluessel Optionen,# {{{
	#
	# usage: check_key_opt KEY
	#
	check_key_opt() {
		if [[ ${#argv} = 1 ]] ; then
			unset -- key keyscriptarg
			key="$1"
	
			if [ -n "$KEYSCRIPT" ] ; then
				# keyscript => "key" is just an argument to the keyscript
				keyscriptarg="$key"
				key="-"
			elif [ -z "$key" -o "$key" = none ] ; then
				# no keyscript, no key => password
				keyscriptarg=""
				key=""
			elif [ "$key" != "${key%/dev/*}" ] ; then
				# no keyscript, device key => special treatment
				keyscriptarg=""
				key="$key"
				KEYSCRIPT=""
			else
				# no keyscript, key => file input
				keyscriptarg="$key"
				key="-"
				KEYSCRIPT="cat"
			fi
		else
			no_para_msg $0
			return 1
		fi

		return 0
	}
	## }}}
	# Funktion (checkscript_fail_msg)# {{{
	checkscript_fail_msg() {
		MSG=$(gettext 'Die Ueberpruefung von ${MAPPER}/${dst} ist fehlgeschlagen. Vielleicht ist das Passwort falsch oder falsche Argumente an das Checkscript ($CHECK) uebergeben.

Das verschluesselte Geraet $dst wird entfernt.')
		msgbox "$gv_Attention" "$MSG"
	}
	## }}}
# Funktion parse_opts# {{{
parse_opts() {
	local Opt ARG PARAM VALUE

	# Variablen# {{{
	################################
	# TODO: einige Variablen loeschen
	DST="$1"
	PARAMS=""
	LUKSPARAMS=""
	LUKSHEADER=""
	TCRYPTPARAMS=""
	PLAINPARAMS=""
    CHECK=""
    CHECKARGS=""
    PRECHECK=""
    TRIES="3"
    TMPFS=""
    MAKESWAP=""
    USELUKS=""
    USETCRYPT=""
    KEYSCRIPT=""
	CRYPTTAB_OPTIONS=""
	LOUD=""
#	# extra Variablen gegenüber Debians Funktion
#	# /lib/cryptsetup/cryptdisks.functions leeren
#	CIPHER=""
#	DISCARD=""
#	HASH=""
#	KEY_FILE=""
#	KEY_SIZE=""
#	NOAUTO=""
#	NOEARLY=""
#	OFFSET=""
#	QIET=""
#	READONLY=""
#	SKIP=""
#	VERIFY=""
	## }}}
	Opt="`print ${${(s: :)${(M)"${(f)$(< $TABFILE)}"##${DST}[[:space:]]*}}[4]}`"
	while test "x$Opt" != "x" ; do
      	ARG="${Opt/,*/}"
       	Opt="${Opt##${ARG}}"
		Opt=${Opt##,}
       	PARAM="${ARG/=*/}"
		#
        case "$ARG" in
          *=*)
            PARAM="${ARG/=*/}"
            VALUE="${ARG##$PARAM=}"
            ;;
          *)
            PARAM="$ARG"
            VALUE=""
            ;;
        esac
		#
		case "$PARAM" in
			readonly)
				PARAMS="$PARAMS -r"
				READONLY=readonly
				;;
			cipher)
	            if [ -z "$VALUE" ] ; then
					MSG=$(gettext '$DST: Es ist kein Wert fuer die Option "cipher" vorhanden.')
					msgbox "$gv_Info" "$MSG"
					return 1
	            fi
				PARAMS="$PARAMS -c $VALUE"
				;;
			size)
				if [[ "$VALUE" != <->* ]] && [[ "$VALUE" == 0 ]] ; then
					MSG=$(gettext '$DST: Dieser Wert ($VALUE) fuer "size" ist inkorrekt.')
					msgbox "$gv_Info" "$MSG"
					return 1
				else
					PLAINPARAMS="$PLAINPARAMS -s $VALUE"
				fi
				;;
			hash)
				if [ -z "$VALUE" ] ; then
					MSG=$(gettext '$DST: Es ist kein Wert fuer die Option "hash" vorhanden.')
					msgbox "$gv_Info" "$MSG"
					return 1
				fi
				PLAINPARAMS="$PLAINPARAMS -h $VALUE"
				;;
			offset)
				if [[ -z "$VALUE" ]] ; then
					MSG=$(gettext '$DST: Es ist kein Wert fuer die Option "offset" vorhanden.')
					msgbox "$gv_Info" "$MSG"
					return 1
				fi
            	PLAINPARAMS="$PLAINPARAMS -o $VALUE"
           		;;
			skip)
				if [[ -z "$VALUE" ]] ; then
					MSG=$(gettext '$DST: Es ist kein Wert fuer die Option "skip" vorhanden.')
					msgbox "$gv_Info" "$MSG"
					return 1
				fi
            	PLAINPARAMS="$PLAINPARAMS -p $VALUE"
				;;
			verify)
				PARAMS="$PARAMS -y"
				;;
			check)
				if [ -z "$VALUE" ] ; then
					VALUE="$CRYPTDISKS_CHECK"
				fi
				if [ -x "$VALUE" ] ; then
					CHECK="$VALUE"
				elif [ -x /lib/cryptsetup/checks/${VALUE} ]; then
					CHECK="/lib/cryptsetup/checks/${VALUE}"
				else
					MSG=$(gettext 'check $CHECK ist kein ausfuehrbares Script.')
					msgbox "$gv_Info" "$MSG"
					return 1
				fi
				;;
			checkargs)
				if [ -n "$VALUE" ] ; then
					CHECKARGS="$VALUE"
				fi
				;;
			precheck)
				if [ -z "$VALUE" ] ; then
					VALUE="$CRYPTDISKS_PRECHECK"
				fi
				if [ -x "$VALUE" ] ; then
					PRECHECK="$VALUE"
				elif [ -x /lib/cryptsetup/checks/${VALUE} ] ; then
					PRECHECK="/lib/cryptsetup/checks/${VALUE}"
				else
					MSG=$(gettext 'precheck $PRECHECK ist kein ausfuehrbares Script.')
					msgbox "$gv_Info" "$MSG"
					return 1
				fi
				;;	
			tries)
           		if [[ "$VALUE" != <->* ]] || [[ "$VALUE" == 0 ]] ; then
					MSG=$(gettext '$DST: Die Option tries ist falsch gesetzt - wird auf $TRIES gesetzt.')
					msgbox "$gv_Info" "$MSG"
				else
					TRIES="$VALUE"
	            fi
				PARAMS="$PARAMS --tries=$TRIES"
				;;
			discard)
				PARAMS="$PARAMS --allow-discards"
				;;
			swap)
				MAKESWAP=yes
				;;
			tmp)
				if [ -z "$VALUE" ] ; then
           			TMPFS="ext4"
				else
           			TMPFS="$VALUE"
				fi
           		;;
			luks)
				USELUKS="yes"
				;;
			luksheader)
	            if [ -z "$VALUE" ] ; then
					MSG=$(gettext '$DST: Kein Wert fuer luksheader vorhanden.')
					msgbox "$gv_Info" "$MSG"
					return 1
				fi
				LUKSPARAMS="$LUKSPARAMS --header=$VALUE"
				LUKSHEADER="$VALUE"
				;;
			tcrypt)
				USETCRYPT="yes"
				;;
			noearly)
				if [ -n "$VALUE" ]; then
					NOEARLY="yes"
				else
					NOEARLY="no"
				fi
				;;
			noauto)
				if [ -n "$VALUE" ]; then
					NOAUTO="yes"
				else
					NOAUTO="no"
				fi
				;;
			loud)
				LOUD="yes"
				;;
			quiet)
				LOUD=""
				;;
			keyscript)
	            if [ -n "$KEYSCRIPT" ] ; then
					MSG=$(gettext '$DST: Mehrere Optionen fuer die Entschluesselung von Schluesseln sind nicht zusammen erlaubt.')
					msgbox "$gv_Info" "$MSG"
					return 1
	            elif [ -z "$VALUE" ] ; then
					MSG=$(gettext '$DST: Es ist kein Wert fuer die Option "keyscript" vorhanden.')
					msgbox "$gv_Info" "$MSG"
					return 1
	            elif [ -x "$VALUE" ] ; then
	            	KEYSCRIPT="$VALUE"
	            elif [ -x "/lib/cryptsetup/scripts/${VALUE}" ] ; then
	            	KEYSCRIPT="/lib/cryptsetup/scripts/${VALUE}"
				elif type "$VALUE" &>/dev/null ; then
	            	KEYSCRIPT="$VALUE"
				else
					MSG=$(gettext '$DST: Das Script $VALUE ist nicht ausfuehrbar.')
					msgbox "$gv_Info" "$MSG"
					return 1
	            fi
				;;
			keyslot)
	            if [ -z "$VALUE" ] ; then
					MSG=$(gettext '$DST: Kein Wert fuer keyslot vorhanden.')
					msgbox "$gv_Info" "$MSG"
					return 1
				fi
				LUKSPARAMS="$LUKSPARAMS --key-slot $VALUE"
				;;
			tcrypthidden)
				TCRYPTPARAMS="$TCRYPTPARAMS --tcrypt-hidden"
				;;
		esac
		CRYPTTAB_OPTIONS="$CRYPTTAB_OPTIONS $PARAM"
		[ -z "$VALUE" ] && VALUE="yes"
		eval export CRYPTTAB_OPTION_$PARAM="\"$VALUE\""
	done
	export CRYPTTAB_OPTIONS

	return 0
}
## }}}
# Funktion parse_key# {{{
parse_key() {
	DEVICE="$1"
	KEY_FILE=${${${(s: :)${(M)"${(f)$(< $TABFILE)}"##${DEVICE}[[:space:]]*}}[3]}%% *}
}
## }}}
# Funktion cryptdisk_stop# {{{
#
# usage: cryptdisk_stop [ -c ] "$DST"
#
# -c  - erstelltes verschluesseltes Laufwerk ohne die Nachricht
#       Laufwerk wurde schon gestoppt beenden.
# DST - verschluesseltes Laufwerk
#
cryptdisk_stop() {
	local OpenCount dst Opt SrcMajor SrcMinor

	if [[ ${#argv} == 2 ]] ; then
		Opt="$1"
		dst="$2"
	elif [[ ${#argv} == 1 ]] ; then
		dst="$1"
	else
		no_para_msg $0
		return 1
	fi
	if [ ! -b ${MAPPER}/${dst} -a "$Opt" != -c ] ; then
		MSG=$(gettext '$dst: Das Laufwerk wurde schon gestoppt.')
		msgbox "$gv_Info" "$MSG"
		return 0
	fi

	OpenCount=$(dmsetup info -c --noheadings -o open $dst 2>/dev/null || true)
	if [ -z "$OpenCount" ] ; then
		MSG=$(gettext '$dst: Es gab einen Fehler (?).')
		msgbox "$gv_Info" "$MSG"
		return 1
	elif [ "$OpenCount" != 0 ] ; then
		# Laufwerk ist in Benutzung und muss erst ausgebunden (umounted)
		# werden.
		# Funktion mount_check dient zum ausbinden des Laufwerks.
		mount_check -u ${MAPPER}/${dst}
		if [ "$U_MOUNT" != yes ] ; then
			return 1
		fi
	fi

	SrcMajor=$(dmsetup deps "$dst" 2>/dev/null | sed -e 's/^.*(\([0-9]*\), [0-9]*)$/\1/g'|| true)
	SrcMinor=$(dmsetup deps "$dst" 2>/dev/null | sed -e 's/^.*([0-9]*, \([0-9]*\))$/\1/g'|| true)

	if [ -z "$SrcMajor" ] || [ -z "$SrcMinor" ] ; then
		MSG=$(gettext '$dst: Die Major oder Minor Nummer des Laufwerks wurde nicht erkannt!.')
		msgbox "$gv_Attention" "$MSG"
		return 1
	fi
	# Cryptsetup Devices schliessen
	if ! cryptdisk_close $dst ; then
		MSG=$(gettext '$dst: Das verschluesselte Laufwerk konnte nicht ausgebunden werden.')
		msgbox "$gv_Attention" "$MSG"
		return 1
	fi

	return 0
}
## }}}
# Funktion cryptdisk_start# {{{
#
# usage: cryptdisk_start [ -r ] "$DST"
# -r  - resize
# DST - Ziellaufwerk
#
cryptdisk_start() {
	local Resize_Opt Dst dst src key opts

	if [[ ${#argv} == 2 ]] && [[ $1 == -r ]] ; then
		Resize_Opt="$1"
		Dst="$2"
	elif [[ -n $1 ]] ; then
		Dst="$1"
	else
		no_para_msg $0
		return 1
	fi

	dmsetup mknodes
	# externes Medium einbinden (Schluessel)
	if [ -n "$MOUNT_PATH" ] ; then
		mount_fs
	fi

	print ${(M)"${(f)$(< $TABFILE)}"##(s#)${Dst}[[:space:]]*} | \
		while read dst src key opts ; do
			# Make sure that all fields are present
			if [ -z "$dst" ] ; then
				return 1
			elif [ -z "$src" ] || [ -z "$key" ] || [ -z "$opts" ] ; then
				MSG=$(gettext '$dst: Vermisse Parameter.')
				msgbox "$gv_Attention" "$MSG"
				return 1
			fi

			# parse UUID= symlinks
			parse_uuid_label $src
			if [ -n "$REALDEV" ] ; then
				src="$REALDEV"
			fi

			# Do the preparatory steps
			if ! parse_opts "$dst" ; then
				return 1
			fi

			if ! check_key ; then
				return 1
			fi

			# Export crypttab fields as environment variables
			export CRYPTTAB_NAME="$dst"
			export CRYPTTAB_SOURCE="$src"
			export CRYPTTAB_KEY="$key"

			# Make sure source device exists
			if [ ! -r "$src" ] ; then
				MSG=$(gettext '$dst: Das Quell Laufwerk $src ist nicht vorhanden.')
				msgbox "$gv_Attention" "$MSG"
				return 1
			fi

			# Make sure that target device doesn't exist
			if [ -b "${MAPPER}/$dst" ] ; then
				MSG=$(gettext '$dst: Das Laufwerk laeuft bereits.')
				msgbox "$gv_Attention" "$MSG"
				return 0
			fi

			# All checks passed, do the real setup
			result=ok
			# Luks Erweiterung benutzen oder nicht.
			if [ "$USELUKS" = "yes" ] ; then
				cryptdisk_luks || result="fail"
			# TCRYPT Erweiterung benutzen oder nicht.
			elif [ "$USETCRYPT" = "yes" ] ; then
				cryptdisk_tcrypt || result="fail"
			else
				cryptdisk_noluks || result="fail"
			fi

			# Finish up
			if [ "$result" != "ok" ] ; then
				MSG=$(gettext '$dst: Die Aktivierung ist fehlgeschlagen.')
				msgbox "$gv_Attention" "$MSG"
				return 1
			else
				cryptdisk_swap $dst
				cryptdisk_tmp $dst
			fi

			# Passphrase loeschen, falls nicht schon vorher geschehen
			# durch die Funktionen cryptdisk_{(no)luks,tcrypt}.
			clean_keys

			if [ "$Resize_Opt" = -r ] ; then
				if [ -n "$LUKSHEADER" ] ; then
					HEADER="--header=$LUKSHEADER"
				fi
				cryptsetup --verbose $HEADER resize "$dst" || return $?
			fi
		done
	# Externes Medium ausbinden (Bsp. Schluessel auf USB)
	umount_fs
	return 0
}
## }}}
# Funktion cryptdisk_close# {{{
cryptdisk_close() {
	if [[ ${#argv} == 1 ]] ; then
		dst="$1"
		cryptsetup close "$dst" &>/dev/null
	else
		no_para_msg $0
		return 1
	fi
	return $?
}
## }}}
# Funktion no_cryptdev_msg# {{{
no_cryptdev_msg() {
	MSG=$(gettext 'Es ist kein verschluesseltes Laufwerk vorhanden.')
	msgbox "$gv_Info" "$MSG"
}
## }}}
# Funktion check_key# {{{
#
check_key() {
	local GMODE OMODE OWNER GROUP
	if [[ ${#argv} == 1 ]] ; then
		key="$1"
	fi
	# If the keyscript option is set, the "key" is just an argument to
	# the keyscript and not necessarily a file.
	if [ -n "$KEYSCRIPT" ] ; then
		return 0
	fi

	if [ -z "$key"  ] || [ "$key" = "none" ] ; then
		key=""
		return 0
	fi

	if [ ! -e "$key" ] ; then
		MSG=$(gettext '$dst: Es wurde keine Schluesseldatei gefunden.')
		msgbox "$gv_Attention" "$MSG"
		return 1
	fi

	# luks requires a persistent key, /dev/*random is not supported
	if [ "$USELUKS" = "yes" ] && [ "$key" != "${key%random}" ] ; then
		MSG=$(gettext '$dst: LUKS arbeitet nicht mit zufaelligen Daten als Schluessel.')
		msgbox "$gv_Attention" "$MSG"
		return 1
	fi

	# tcrypt requires a persistent key, /dev/*random is not supported
	if [ "$TCRYPT" = "yes" ] && [ "$key" != "${key%random}" ] ; then
		MSG=$(gettext '$dst: TCRYPT arbeitet nicht mit zufaelligen Daten als Schluessel.')
		msgbox "$gv_Attention" "$MSG"
		return 1
	fi

	# Check ownership of $key
	OWNER=${$(ls -l $key)[3]}
	if [ "$OWNER" != root ] ; then
		MSG=$(gettext '$dst: UNSICHERER EIGENTUEMER fuer den Schluessel $key.')
		msgbox "$gv_Attention" "$MSG"
		# don't break here for now
		# return 1
	fi

	# If key is random, we're done
	if [ "$key" != "${key%random}" ] ; then
		return 0
	fi

	# Check owner group of $key
	GROUP=${$(ls -l $key)[4]}
	if [ "$GROUP" != root ] ; then
		MSG=$(gettext '$dst: UNSICHERER EIGENTUEMER GRUPPE fuer den Schluessel $key.')
		msgbox "$gv_Attention" "$MSG"
	fi

	# Check group and other permissions
	###############################
	# TODO: nur check
#	GMODE=${${${(s: :)$(ls -l $key)}[1]}[4,6]}
#	OMODE=${${${(s: :)$(ls -l $key)}[1]}[7,9]}
	GMODE=${${$(ls -l $key)[1]}[4,6]}
	OMODE=${${$(ls -l $key)[1]}[7,9]}
	if [ "$GMODE" != "---" ] && [ "$OMODE" != "---" ] ; then
		MSG=$(gettext '$dst: UNSICHERER MODUS fuer den Schluessel $key.')
		msgbox "$gv_Attention" "$MSG"
	fi

	return 0
}
## }}}
# Funktion clean_keys# {{{
clean_keys() {
	# Schlüssel-Dateien und Dateien mit
	# Passphrase schreddern.
	if [ -n "$PASSPHRASE" ] ; then
		unset -- PASSPHRASE
	fi
	if [ -n "$gv_Pass" -o -n "$gv_Old_Pass" ] ; then
		unset -- gv_Pass gv_Old_Pass
	fi
	if [ -f "${gv_WorkDir}/passphrase" ] ; then
		shred -uz ${gv_WorkDir}/passphrase &>/dev/null
	fi
#	if [ -f "$REMKEY" ] ; then
#		shred -uz "$REMKEY" &>/dev/null
#	fi
}
## }}}
# Funktion cryptdisk_luks# {{{
cryptdisk_luks() {
	local tried keyscriptarg
	tried=0
	keyscriptarg=""

	if ! cryptsetup isLuks ${LUKSHEADER:-$src} &>/dev/null ; then
		MSG=$(gettext '$dst: ${LUKSHEADER:-$src} ist keine LUKS Partition.')
		msgbox "$gv_Attention" "$MSG"
		return 1
	fi

	if ! check_key_opt "$key" ; then
		return 1
	fi

	while [ "$tried" -lt "$TRIES" ] || [ "$TRIES" -eq "0" ] ; do
		export CRYPTTAB_TRIED="$tried"
		if [ -n "$KEYSCRIPT" ] ; then
			PARAMS="$PARAMS --key-file=$key"
			if $KEYSCRIPT $keyscriptarg | \
				cryptsetup ${=PARAMS} ${=LUKSPARAMS} open --type luks $src $dst ; then
				break
			fi
		elif [ -z "$key" ] ; then
			# passwordbox
			password "$gv_Passwd_TITLE" "$PASSWD_START_MSG"
			if print $PASSPHRASE | \
				cryptsetup ${=PARAMS} ${=LUKSPARAMS} open --type luks "$src" "$dst" ; then
				break
			fi
		else
			PARAMS="$PARAMS --key-file=$key"
			if cryptsetup ${=PARAMS} ${=LUKSPARAMS} open --type luks "$src" "$dst" ; then
				break
			fi
		fi

		(( tried++ ))
		if [ "$tried" -ge "$TRIES" ] && [ "$TRIES" -ne "0" ] ; then
			return 1
		fi
	done

	if [ -n "$CHECK" ] && ! $CHECK ${MAPPER}/${dst} $CHECKARGS ; then
		checkscript_fail_msg
		cryptsetup close $dst
		return 1
	fi

	return 0
}
## }}}
# Funktion cryptdisk_noluks# {{{
cryptdisk_noluks() {	
	local pre_out tried keyscriptarg
	tried=0
	keyscriptarg=""

	if [ -z "$PRECHECK" ] ; then
		PRECHECK="/lib/cryptsetup/checks/un_blkid"
	fi

	if ! pre_out="$($PRECHECK "$src" 2>/dev/null)" && \
		! /lib/cryptsetup/checks/blkid "$src" swap >/dev/null ; then
		msgbox "$gv_Attention" "$PRECHECK_FAILED_MSG"
		return 1
	fi

	if [ -n "$KEYSCRIPT" ] ; then
		# keyscript => "key" is just an argument to the keyscript
		keyscriptarg="$key"
		key="-"
	elif [ -z "$key" ] ; then
		# no keyscript, no key => password
		keyscriptarg=""
		key=""
	else
		# no keyscript, key => file input
		keyscriptarg=""
		key="$key"
		KEYSCRIPT=""
	fi

	PARAMS="$PARAMS --key-file=$key"

	while [ "$tried" -lt "$TRIES" ] ; do
		export CRYPTTAB_TRIED="$tried"
		if [ -n "$KEYSCRIPT" ] ; then
			$KEYSCRIPT "$keyscriptarg" | \
				cryptsetup ${=PLAINPARAMS} ${=PARAMS} open --type plain "$src" "$dst"
		elif [ -z "$key" ] ; then
			# passwordbox
			PASSWD_START_MSG=$(gettext 'Geben Sie einen Schluessel fuer das Laufwerk "$dst" ein.')
			password "$gv_Passwd_TITLE" "$PASSWD_START_MSG"
			print $PASSPHRASE | \
				cryptsetup ${=PLAINPARAMS} ${=PARAMS} open --type plain "$src" "$dst"
		else
			cryptsetup ${=PLAINPARAMS} ${=PARAMS} open --type plain "$src" "$dst"
		fi

		if [ -z "$CHECK" ] || $CHECK ${MAPPER}/${dst} $CHECKARGS ; then
			break
		else
			checkscript_fail_msg
			cryptsetup close $dst
		fi

		(( tried++ ))
		if [ "$tried" -ge "$TRIES" ] ; then
			return 1
		fi
	done

	return 0
}
## }}}
# Funktion cryptdisk_tcrypt# {{{
cryptdisk_tcrypt() {
	local tried keyscriptarg
	tried=0
	keyscriptarg=""

	if [ -z "$PRECHECK" ] ; then
		PRECHECK="/lib/cryptsetup/checks/un_blkid"
	fi

	if ! pre_out="$($PRECHECK "$src" 2>/dev/null)" && \
		! /lib/cryptsetup/checks/blkid "$src" swap >/dev/null ; then
		msgbox "$gv_Attention" "$PRECHECK_FAILED_MSG"
		return 1
	fi

	if ! check_key_opt "$key" ; then
		return 1
	fi

	while [ "$tried" -lt "$TRIES" ] || [ "$TRIES" -eq "0" ] ; do
		export CRYPTTAB_TRIED="$tried"
		if [ -n "$KEYSCRIPT" ] ; then
			PARAMS="$PARAMS --key-file=$key"
			if $KEYSCRIPT "$keyscriptarg" | \
				cryptsetup ${=PARAMS} ${=TCRYPTPARAMS} open --type tcrypt $src $dst ; then
				break
			fi
		elif [ -z "$key" ] ; then
			# passwordbox
			password "$gv_Passwd_TITLE" "$PASSWD_START_MSG"
			if print $PASSPHRASE | \
				cryptsetup ${=PARAMS} ${=TCRYPTPARAMS} open --type tcrypt "$src" "$dst" ; then
				break
			fi
		else
			PARAMS="$PARAMS --key-file=$key"
			if cryptsetup ${=PARAMS} ${=TCRYPTPARAMS} open --type tcrypt "$src" "$dst" ; then
				break
			fi
		fi

		(( tried++ ))
		if [ "$tried" -ge "$TRIES" ] || [ "$TRIES" -ne "0" ] ; then
			return 1
		fi
	done

	if [ -n "$CHECK" ] && ! $CHECK ${MAPPER}/${dst} $CHECKARGS ; then
		checkscript_fail_msg
		cryptsetup close $dst
		return 1
	fi

	return 0
}
## }}}
# Funktion cryptdisk_swap# {{{
# Prepares swap partitions using random keys
cryptdisk_swap() {
	local swap_out

	if [ "$#" = 1 ] ; then
		dst="$1"
		if [[ $MAKESWAP != yes ]] || [[ ! -b ${MAPPER}/${dst} ]] ; then
			return 0
		fi

		# vorhandenes Laufwerk umounten.
		mount_check -a "${MAPPER}/${dst}"
		if [[ $U_MOUNT = no ]] ; then
			return 1
		fi

		if swap_out="$(/lib/cryptsetup/checks/un_blkid "${MAPPER}/${dst}" 2>/dev/null)" || \
			/lib/cryptsetup/checks/blkid "${MAPPER}/${dst}" swap &>/dev/null ; then
				# Swap Signatur erstellen und einbinden
				mkswap "${MAPPER}/${dst}" &>/dev/null
				# Swap mounten
				mount_check -s "${MAPPER}/${dst}"
		else
			MSG=$(gettext '$dst: Die Pruefung fuer '${MAPPER}/${dst}' ergab Fehler. ${MAPPER}/${dst} beinhaltet: $swap_out')
			msgbox "$gv_Attention" "$MSG"
			cryptdisk_close $dst
			return 1
		fi
	else
		no_para_msg $0
		return 1
	fi
	return 0
}
## }}}
# Funktion cryptdisk_tmp# {{{
# Prepares tmp partitions using random keys
cryptdisk_tmp() {
	if [ "$#" = 1 ] ; then
		dst="$1"
		if [[ -n $TMPFS ]] ; then
			if [[ -b ${MAPPER}/${dst} ]] ; then
				mkfs -t $TMPFS -q "${MAPPER}/${dst}" &>/dev/null || return 1
				mkdir -p /var/run/cryptsetup/${dst}
				mount -t $TMPFS "${MAPPER}/${dst}" "/var/run/cryptsetup/${dst}" || return 1
				chmod 1777 /var/run/cryptsetup/${dst}
				umount /var/run/cryptsetup/${dst}
			else
				no_block_device
				return 1
			fi
		fi
	else
		no_para_msg $0
		return 1
	fi
	return 0
}
## }}}
# Funktion mount_fs# {{{
mount_fs() {
	local mp

	for mp in $MOUNT_PATH ; {
		mount_check -m $mp
	}
}
## }}}
# Funktion umount_fs# {{{
umount_fs() {
	local mp

	for mp in $MOUNT_PATH ; {
		mount_check -u $mp
	}
}
## }}}
# Funktion check_batch_mode, unterstuetzt cryptsetup den batch-mode?# {{{
# Nur wichtig für luksFormat.
#
check_batch_mode() {
	if cryptsetup --batch-mode --help &>/dev/null ; then
		BATCH_MODE="--batch-mode"
	else
		unset -- BATCH_MODE
	fi
}
## }}}
##################################################################
#
# Hauptprogramm
#
##################################################################
#
hw_conf
fs_conf
os_check
# RAIDTAB bestimmen
if_conf_file "$OS" raid
lvm_version -q
#############################
# TODO: check ob gebraucht.
check_batch_mode

main_menu
while [ "$gv_Auswahl" ] ; do
	case $gv_Auswahl in
		HELP*)
    	    # Hilfe
			script_help help
			main_menu "${gv_Auswahl#HELP }"
			;;
		$gv_Configuration)
			# Konfiguration
			autoload -U kwcryptsetup_conf
			kwcryptsetup_conf
			main_menu $gv_Configuration
			;;
		$lv_State)
			# Status von verschluesselten Laufwerken anzeigen (/etc/crypttab)# {{{
			search_cryptdev
			# zur Auswahl anbieten
			if [ -n "$MAP_DEV_M" ] ; then
				STATE_TITLE="$lv_State"
				MAP_DEV_MENU=($MAP_DEV_M)
				checklist "" "$STATE_TITLE" "$MULTI_BLOCK_DEVICE_MSG" "$MAP_DEV_MENU"
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help state_help
							checklist "${gv_Auswahl#HELP }" "$STATE_TITLE" "$MULTI_BLOCK_DEVICE_MSG" "$MAP_DEV_MENU"
							;;
						*)	# Auswahl anzeigen
							rm -f ${gv_WorkDir}/dmstate &>/dev/null
		 					for i in ${=gv_Auswahl} ; {
								if [ -f "${gv_WorkDir}/dmstate" ] ; then
									cryptsetup status $i 2>/dev/null >>${gv_WorkDir}/dmstate
									print "" >>${gv_WorkDir}/dmstate
								else
									cryptsetup status $i 2>/dev/null >${gv_WorkDir}/dmstate
									print "" >>${gv_WorkDir}/dmstate
								fi
							}
							#
							if [ -f ${gv_WorkDir}/dmstate -a "`wc -l < ${gv_WorkDir}/dmstate`" -gt 0 ] ; then
								view_file ${gv_WorkDir}/dmstate
							else
								MSG=$(gettext 'Es ist kein Status Eintrag vorhanden. Ueberpruefen Sie ihre Konfiguration (/etc/crypttab)!')
								msgbox "$gv_Attention" "$MSG"
							fi
							break
							;;
					esac
				done
			else
				no_cryptdev_msg
			fi
			## }}}
			main_menu $lv_State
			;;
		$lv_Luks)
			# Lukserweiterung behandeln# {{{
			autoload -U luks_extension
			search_cryptdev -l
			# zur Auswahl anbieten
			if [ -n "${MAP_DEV_M[1]}" ] ; then
				luks_extension
			else
				no_luks_cryptdev_msg
			fi
			## }}}
			main_menu $lv_Luks
			;;
		$lv_Drives)
			# verschluesselte Laufwerke managen.
			autoload -U manage_cryptdisk
			manage_cryptdisk
			main_menu $lv_Drives
			;;
		$lv_Key)
			autoload -U manage_keys
			manage_keys
			main_menu $lv_Key
			;;
		$lv_Start)
			# Laufwerke starten# {{{
			search_cryptdev
			if [ -n "${MAP_DEV_M[1]}" ] ; then
				search_cryptdev -s
				if [ -n "${MAP_DEV_M[1]}" ] ; then
					START_TITLE="$lv_Start"
					MAP_DEV_MENU=($MAP_DEV_M)
					START_MSG=$(gettext 'Waehlen Sie ein oder mehrere Laufwerke aus, die Sie starten wollen.')
					checklist "" "$START_TITLE" "$START_MSG" "$MAP_DEV_MENU"
					while [ -n "${gv_Auswahl[1]}" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help start_help
								checklist "${gv_Auswahl#HELP }" "$START_TITLE" "$START_MSG" "$MAP_DEV_MENU"
								;;
							*)	# Auswahl starten
								for i in ${=gv_Auswahl} ; {
									cryptdisk_start "$i"
								}
								break
								;;
						esac
					done
				else
					MSG=$(gettext 'Es sind alle verschluesselten Laufwerke aktiv.')
					msgbox "$gv_Info" "$MSG"
				fi
			else
				no_cryptdev_msg
			fi
			## }}}
			main_menu $lv_Start
			;;
		$lv_Stop)
			# Laufwerke stoppen, die aktiv gekennzeichnet sind # {{{
			search_cryptdev
			if [ -n "${MAP_DEV_M[1]}" ] ; then
				search_cryptdev -a
				if [ -n "${MAP_DEV_M[1]}" ] ; then
					STOP_TITLE="$lv_Stop"
					MAP_DEV_MENU=($MAP_DEV_M)
					STOP_MSG=$(gettext 'Waehlen Sie ein oder mehrere Laufwerke aus, die Sie stoppen wollen. Diese werden dann aus dem Dateisystem ausgebunden und gestoppt.')
					checklist "" "$STOP_TITLE" "$STOP_MSG" "$MAP_DEV_MENU"
					while [ -n "${gv_Auswahl[1]}" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help stop_help
								checklist "${gv_Auswahl#HELP }" "$STOP_TITLE" "$STOP_MSG" "$MAP_DEV_MENU"
								;;
							*)	# Auswahl stoppen
								for i in ${=gv_Auswahl} ; {
									cryptdisk_stop "$i"
								}
								break
								;;
						esac
					done
				else
					MSG=$(gettext 'Es sind keine aktiven verschluesselten Laufwerke vorhanden.')
					msgbox "$gv_Info" "$MSG"
				fi
			else
				no_cryptdev_msg
			fi
			## }}}
			main_menu $lv_Stop
			;;
		$gv_Exit)	break
			;;
	esac
done	
#
# umounten der Mount-Verzeichnisse falls nicht schon getan.
umount_fs
exit 0
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
