#!/bin/zsh
#
# Autor: Kai Wilke  <kiste@netzworkk.de> 04.05.2015
#
# Script: kwecryptfs, erstellt ein verschluesseltes Dateisystem
#         ueber einem Verzeichnis.
#
# Version: 0.0.6

# Ausfuehren von Befehlen auf bestimmte Signale.
# Notiz. Immer den Namen verwenden, da es auf einigen OS
# eine andere Numerierung geben kann.
#
trap 'setterm --inversescreen off ; setterm --reset ;
rm -rf $gv_Script_Lock $gv_WorkDir &>/dev/null' EXIT INT

gv_ScriptName=${0##*/}

# Verzeichnis in denen nach Funktionen gesucht wird
#
if [ -f /usr/local/share/kwtools/functions/sys/script_init ] ; then
	PREFIX=/usr/local
else
	PREFIX=/usr
fi
Script_init_Fpath="${PREFIX}/share/kwtools/functions/sys"
export TEXTDOMAINDIR="${PREFIX}/share/locale"
export TEXTDOMAIN="$gv_ScriptName"

if [ -z ${(M)${FPATH}##*${Script_init_Fpath}*} ] ; then
	FPATH=${Script_init_Fpath}:${FPATH}
fi

# script_init enthält die globalen Scripteinstellungen und lädt
# diese automatisch.
#
autoload -U script_init

# Scriptinitialisierung
script_init

# Pruefen ob man root ist.
root_check

# Auf benutze Programme pruefen.
prog_check ecryptfsd
if [ ! -z "$NO_PROGS" ] ; then
	exit 0
fi

kernel_release
if [[ "${gv_K_Release%%-*}" < 2.6.24 ]] ; then
	MSG=$(gettext 'Ihr Kernel ($gv_K_Release) ist zu alt fuer kwecryptfs.')
    msgbox "$gv_Attention" "$MSG"
    exit 0
fi

# Nachdem das Script initialisiert wurde, kann man die anderen
# benötigten Funktionen laden. Die Funktion sys_conf wird bereits
# von der Funktion script_init ausgefuehrt.
autoload -U kwecryptfs_conf

# Wenn es eine KONFIGURATIONSRC Datei gibt einlesen.
read_file kwecryptfsrc

# Variablen
TABFILE="/etc/fstab"
gv_Key=$(gettext 'Schluessel')

# Kernel Modul ecryptfs laden
load_module ecryptfs

# Funktion main_menu# {{{
#
MAIN_MENU=($gv_Configuration \"\" $gv_Directory \"\" $gv_Key \"\"
$gv_Start \"\" $gv_Stop \"\" $gv_Exit \"\")
main_menu() {
	menubox "$1" "$gv_Mainmenu" "$gv_Menupoint" "$MAIN_MENU"
}
## }}}
# Funktion mount_fs# {{{
mount_fs() {
	for mp in $MOUNT_PATH ; {
		mount_check -m $mp
	}
}
## }}}
# Funktion umount_fs# {{{
umount_fs() {
	for mp in $MOUNT_PATH ; {
		mount_check -u $mp
	}
}
## }}}
# Funktion (parse_opts)# {{{
parse_opts() {
    typeset -L M_O_VALUE
    CIPHER=""
    PASSTHROUGH=""
    KEY_FILE=""
    KEY_PASS=""
    KEY_SALT=""
    KEY_SIZE=""
    KEY_TYPE=""
    M_O_VALUE=""
    M_POINT="$MOUNT_POINT"
	MOUNT_PATH=""
    O_DIR="$FS_DRIVE"
	NOAUTO=""
	NO_SIG_CACHE=""
    VERSION=""
    XATTR=""
	#
	if [ -n "$MOUNT_OPTION" ] ; then
		while test "x$MOUNT_OPTION" != "x" ; do
        	ARG="${MOUNT_OPTION/,*/}"
        	MOUNT_OPTION="${MOUNT_OPTION##${ARG}}"
			MOUNT_OPTION=${MOUNT_OPTION##,}
        	PARAM="${ARG/=*/}"
			#
	        case "$ARG" in
	          *=*)
	            PARAM="${ARG/=*/}"
	            VALUE="${ARG##$PARAM=}"
	            ;;
	          *)
	            PARAM="$ARG"
	            VALUE=""
	            ;;
	        esac
			#
			case "$PARAM" in
				ecryptfs_cipher)
		            if [ -z "$VALUE" ] ; then
						CIPHER="aes"
					else
						CIPHER="$VALUE"
		            fi
					;;
				ecryptfs_encrypted_view)
					VERSION="yes"
					;;
				ecryptfs_key_bytes)
		            if [[ "$VALUE" == <->* ]] ; then
						KEY_SIZE="$VALUE"
                    else
						KEY_SIZE="16"
		            fi
					;;
				ecryptfs_passthrough)
					PASSTHROUGH="yes"
					;;
				no_sig_cache)
					NO_SIG_CACHE="yes"
					;;
                key)
                    ## {{{
		            if [ -n "$VALUE" ] ; then
                        case "${VALUE%%:*}" in
                            gpg)
                                KEY_TYPE=gpg
                                ;;
                            openssl)
                                ## {{{
                                KEY_TYPE=openssl
                                Tmp="${VALUE#passphrase:}"
                                Tmp1="${Tmp#*=}"
                                Tmp2="${Tmp%=*}"
                                case "$Tmp2" in
                                    openssl_keyfile|openssl_passwd_file)
                                        KEY_FILE="$Tmp1"
                                        KEY_OPT="$Tmp2"
										##################################
										# test auf ASCII Datei (*_file)
										##################################
										KEY_TYPE="${KEY_TYPE}:${KEY_OPT}=${KEY_FILE}"
                                        ;;
                                    openssl_passwd)
                                        KEY_PASS="$Tmp1"
                                        KEY_OPT="$Tmp2"
										KEY_TYPE="${KEY_TYPE}:${KEY_OPT}=${KEY_PASS}"
                                        ;;
                                esac
                                ## }}}
                                ;;
                            passphrase)
                                ## {{{
                                KEY_TYPE=passphrase
                                Tmp="${VALUE#passphrase:}"
                                Tmp1="${Tmp#*=}"
                                Tmp2="${Tmp%=*}"
                                case "$Tmp2" in
                                    passphrase_passwd_file)
                                        KEY_FILE="$Tmp1"
                                        KEY_OPT="$Tmp2"
										KEY_TYPE="${KEY_TYPE}:${KEY_OPT}=${KEY_FILE}"
                                        ;;
                                    passphrase_passwd)
                                        KEY_PASS="$Tmp1"
                                        KEY_OPT="$Tmp2"
										KEY_TYPE="${KEY_TYPE}:${KEY_OPT}=${KEY_PASS}"
                                        ;;
                                    passphrase_salt)
                                        KEY_SALT="$Tmp1"
                                        KEY_OPT="$Tmp2"
										KEY_TYPE="${KEY_TYPE}:${KEY_OPT}=${KEY_SALT}"
                                        ;;
                                esac
                                ## }}}
                                ;;
                            pksc11-helper)
                                KEY_TYPE=pksc11-helper
                                ;;
                            tspi)
                                KEY_TYPE=tspi
                                ;;
                        esac
		            fi
                    ## }}}
					;;
				noauto)
					if [ -n "$VALUE" ]; then
						NOAUTO="yes"
					else
						NOAUTO="no"
					fi
					;;
                *)
                    if [ -n "$VALUE" ] ; then
                        M_O_VALUE+=(${PARAM}=${VALUE})
                    else
                        M_O_VALUE+=($PARAM)
                    fi
                    ;;
			esac
		done
        # eigene Mount Optionen sichern.
        if [ -n "$M_O_VALUE" ] ; then
            REST_OPTION="${${M_O_VALUE/ /}// /,}"
        fi
	fi
}
## }}}
# Funktion (read_fstab_value)# {{{
#
read_fstab_value() {
    unset -- FS_DRIVE MOUNT_POINT FILESYSTEM MOUNT_OPTION DUMP CHECK FSTAB_OLD
	print ${FSTAB_VALUES[gv_Auswahl]} | \
		while read Fsd Mp Fs Mo D C ; do
			FS_DRIVE="$Fsd"
			MOUNT_POINT="$Mp"
			FILESYSTEM="$Fs"
			MOUNT_OPTION="$Mo"
			DUMP="$D"
			CHECK="$C"
			FSTAB_OLD="$FS_DRIVE"
        done
}
## }}}
# Funktion (write_fstab), /etc/fstab neu schreiben# {{{
#
write_fstab() {
	# fstab aendern/schreiben
	if [ -n "$FSTAB_OLD" ] ; then
		print -l ${(R)${(f)"$(< $TABFILE)"}##(${FSTAB_OLD}[[:space:]]*${MOUNT_POINT}*)*} > ${gv_WorkDir}/fstab
		>> "${gv_WorkDir}/fstab" <<< "$O_DIR	$M_POINT	ecryptfs	$OPT	${DUMP:-0}	${CHECK:-0}"
		mv ${gv_WorkDir}/fstab $TABFILE
	else
		print -l ${(R)${(f)"$(< $TABFILE)"}##(${O_DIR}[[:space:]]*${M_POINT}*)*} > ${gv_WorkDir}/fstab
		>> "${gv_WorkDir}/fstab" <<< "$O_DIR	$M_POINT	ecryptfs	$OPT	${DUMP:-0}	${CHECK:-0}"
		mv ${gv_WorkDir}/fstab $TABFILE
	fi
}
## }}}
# Funktion (no_tabentry_msg), kein Eintrag vorhanden.# {{{
#
no_tabentry_msg() {
	MSG=$(gettext 'Es ist kein Eintrag fuer ecryptfs in der Datei /etc/fstab vorhanden.')
    infobox "$gv_Info" "$MSG" 3
}
## }}}
# Funktion (check_no_activ), Check ob Verzeichnis aktiv oder nicht aktiv ist# {{{
#
# usage: check_no_activ [ no | yes ]
# yes - Verzeichnis darf muss eingebunden sein.
# no - Verzeichnis darf nicht eingebunden sein.
#
check_no_activ() {
	case "${argv[1]}" in
		no|yes)
			VAR=${argv[1]}
			unset -- A_DIR_M
			for n in {1..${#FSTAB_VALUES[@]}} ; {
				for i in ${${(ws: :)${FSTAB_VALUES[n]}}[1]} ; {
					mount_check -c "$i"
					if [ "$MOUNT" = "$VAR" ] ; then
						A_DIR_M+=($i \"\" off)
					fi
				}
			}
			;;
		*)
			no_para_msg $0
			;;
	esac
}
## }}}
##################################################################
#
# Hauptprogramm
#
##################################################################
#
main_menu
while [ "$gv_Auswahl" ] ; do
	case $gv_Auswahl in
		HELP*)
    	    # Hilfe Messagebox
			script_help help
			main_menu "${gv_Auswahl#HELP }" 
			;;
		$gv_Configuration)
			# Konfiguration# {{{
            unset -- CIPHER KEY_FILE KEY_SIZE KEY_TYPE M_O_VALUE \
                MOUNT_PATH M_POINT NOAUTO O_DIR PASSTHROUGH NO_SIG_CACHE \
				VERSION XATTR
            kwecryptfs_conf -c
			## }}}
			main_menu $gv_Configuration
			;;
        $gv_Directory)
			# verschluesselte Verzeichnisse erstellen, aendern und loeschen# {{{
			autoload -U manage_cryptdir
			manage_cryptdir
			## }}}
			main_menu $gv_Directory
			;;
		$gv_Key)
			# Datei Schluesselverwaltung, einfacher Schluessel in Datei passwd=passphrase# {{{
			autoload -U manage_keys
			manage_keys
			## }}}
			main_menu $gv_Key
			;;
        $gv_Start)
            # verschluesselte Verzeichnisse starten# {{{
			read_fstab ecryptfs
            if [ -n "${FSTAB_VALUES[1]}" ] ; then
				# Pruefen ob verschluesseltes Verzeichnis eingebunden ist oder nicht.
				check_no_activ no
				if [ -n "$A_DIR_M" ] ; then
	                checklist "" "$gv_Start" "$gv_Menupoint" "$A_DIR_M"
	                while [ -n "$gv_Auswahl" ] ; do
	                    case "$gv_Auswahl" in
	                        HELP*)
	                            script_help help
	                			checklist "${gv_Auswahl#HELP }" "$gv_Start" "$gv_Menupoint" "$A_DIR_M"
	                            ;;
	                        *)
								# Verzeichnisse mounten (f.E. USB_Keyfile).
								mount_fs
								# verschluesselte Verzeichnisse mounten.
								for i in ${=gv_Auswahl} ; {
									mount "$i"
								}
								# Verzeichnisse umounten (f.E. USB_Keyfile).
								umount_fs
								break
								;;
						esac
					done
				else
					MSG=$(gettext 'Es sind alle verschluesselten Verzeichnisse aktiv.')
					msgbox "$gv_Info" "$MSG"
				fi
            else
                no_tabentry_msg
			fi
			## }}}
            main_menu $gv_Start
            ;;
        $gv_Stop)
            # verschluesselte Verzeichnisse beenden# {{{
			read_fstab ecryptfs
            if [ -n "$FSTAB_VALUES" ] ; then
				# Pruefen ob verschluesseltes Verzeichnis eingebunden ist oder nicht.
				check_no_activ yes
				if [ -n "$A_DIR_M" ] ; then
	                checklist "" "$gv_Stop" "$gv_Menupoint" "$A_DIR_M"
	                while [ -n "$gv_Auswahl" ] ; do
	                    case "$gv_Auswahl" in
	                        HELP*)
	                            script_help help
	                			checklist "${gv_Auswahl#HELP }" "$gv_Start" "$gv_Menupoint" "$A_DIR_M"
	                            ;;
	                        *)
								# Verzeichnisse umounten.
								for i in ${=gv_Auswahl} ; {
									umount "$i"
								}
								break
								;;
						esac
					done
				else
					MSG=$(gettext 'Es sind keine verschluesselten Verzeichnisse aktiv.')
					msgbox "$gv_Info" "$MSG"
				fi
            else
                no_tabentry_msg
			fi
			## }}}
            main_menu $gv_Stop
            ;;
		$gv_Exit)	break
			;;
	esac
done	
# umounten der Mount-Verzeichnisse falls nicht schon getan.
umount_fs

exit 0
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
