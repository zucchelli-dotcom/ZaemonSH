# Funktion zur Konfiguration von kwrip{{{
#
# benoetigt die Funktion net_conf
#
# usage: kwrip_conf
kwrip_conf() {
	autoload -U net_conf
	net_conf
	ENC_TITLE=$(gettext '${gv_Configuration}::Enkodierung')
	ENC_OPT_MSG=$(gettext 'Geben Sie hier die Optionen zum encodieren der Sound Dateien ein, siehe man 1 lame oder oggenc.')
	lv_Audio_Opt=$(gettext 'Audio_Optionen')
	lv_Audio_Mountdir=$(gettext 'Audio_Mountverz.')
	lv_Audio_Dir=$(gettext 'Audioverz.')
	lv_Cddb_Use=$(gettext 'CDDB_verwenden')
	lv_Cddb_Serv=$(gettext 'CDDB_Server')
	lv_Eject=$(gettext 'CD/DVD_auswerfen')
	lv_Read_Drive=$(gettext 'Leselaufwerk')
	lv_Proxy=$(gettext 'Proxy')
	lv_Encoder_Use=$(gettext 'Encoder_benutzen')
	lv_Encoder_Prog=$(gettext 'Encoder_Programm')
	lv_Lame_Enc_Opt=$(gettext 'Lame_Enc_Opt')
	lv_Ogg_Enc_Opt=$(gettext 'Ogg_Enc_Opt')
	lv_Video_Mountdir=$(gettext 'Video_Mountverz.')
	lv_Video_Dir=$(gettext 'Videoverz.')
# Funktion konf_menue{{{
konf_menue() {
	CONF_MENU=($lv_Audio_Opt \"$AUDIO_OPTIONS\"
	$lv_Audio_Mountdir \"$AUDIO_MOUNT_PATH\"
	$lv_Audio_Dir \"$AUDIO_DIR\"
	$lv_Cddb_Use \"$CDDB\"
	$lv_Cddb_Serv \"$CDDB_SRV\"
	$lv_Read_Drive \"$READ_DEVICE\"
	$lv_Eject \"${EJECT:-no}\"
	$lv_Proxy \"$PROXY\"
	$lv_Encoder_Use \"$ENCODE\"
	$lv_Encoder_Prog \"$FM_PROG\"
	$lv_Lame_Enc_Opt \"$LAME_ENC_OPT\"
	$lv_Ogg_Enc_Opt \"$OGG_ENC_OPT\"
	$lv_Video_Mountdir \"$VIDEO_MOUNT_PATH\"
	$lv_Video_Dir \"$VIDEO_DIR\"
	$gv_Save \"\" $gv_Back \"\")
	menubox "$1" "$gv_Configuration" "$gv_Menupoint" "$CONF_MENU"
}
#}}}
konf_menue
while [ "$gv_Auswahl" ] ; do
	case "$gv_Auswahl" in
		HELP*)	script_help conf_help
			konf_menue "${gv_Auswahl#HELP }"
			;;
		$lv_Audio_Opt)
			# Audio Optionen eingeben{{{
			AUDIO_OPT_TITLE=(${gv_Configuration}::${lv_Audio_Opt})
			AUDIO_OPT_MSG=$(gettext 'Geben Sie hier die Optionen zum rippen von Audio-CDs ein (man 1 cdparanoia).')
			inputbox "$AUDIO_OPT_TITLE" "$AUDIO_OPT_MSG" "$AUDIO_OPTIONS"
			if [ -n "$gv_Auswahl" ] ; then
				AUDIO_OPTIONS="$gv_Auswahl"
			else
				AUDIO_OPTIONS="-vwB"
			fi
			#}}}
			konf_menue $lv_Audio_Opt
			;;
		$lv_Audio_Mountdir)
			# Mount Partition fuer Audio angeben.# {{{
			mount_path "$AUDIO_MOUNT_PATH"
			if [ -n "$MOUNT_PATH" ] ; then
				AUDIO_MOUNT_PATH="$MOUNT_PATH"
			else
				unset -- AUDIO_MOUNT_PATH
			fi
			## }}}
			konf_menue $lv_Audio_Mountdir
			;;
		$lv_Audio_Dir)
			# Audio Verzeichnis angeben{{{
			#
			dselect "$AUDIO_DIR"
			if [ "$VERZ" ] ; then
				dselect_check -c "$VERZ"
				if [ "$VERZ" ] ; then
					user_device_check "$VERZ" AIE
					AUDIO_DIR="$VERZ"
				fi
			else
				AUDIO_DIR=""
			fi
			#}}}
			konf_menue $lv_Audio_Dir
			;;
		$lv_Cddb_Serv)
			# CDDB Server eingeben{{{
			CDDB_TITLE=$(gettext '${gv_Configuration}::CDDB')
			CDDB_MSG=$(gettext 'Geben Sie hier bitte den CD Datenbbank Server ein der abgefragt werden soll (Standard ist freedb.freedb.org).')
			inputbox "$CDDB_TITLE" "$CDDB_MSG" "$CDDB_SRV"
			if [ -n "$gv_Auswahl" ] ; then
				CDDB_SRV="$gv_Auswahl"
			else
				CDDB_SRV="freedb.freedb.org"
			fi
			#}}}
			konf_menue $lv_Cddb_Serv
			;;
		$lv_Cddb_Use)
			# CDDB verwenden (ja/nein){{{
			CDDB_TITLE="${gv_Configuration}::CDDB"
			CDDB_MSG=$(gettext 'Soll eine CD Datenbbank abgefragt werden (ja/nein)?')
			yesno "$CDDB_TITLE" "$CDDB_MSG" "$CDDB"
			if [ "$gv_Auswahl" != no ] ; then
				CDDB="yes"
			else
				CDDB="no"
			fi
			#}}}
			konf_menue $lv_Cddb_Use
			;;
		$lv_Read_Drive)
			# Leselaufwerk auswaehlen. Wird von der Funktion cdrom bereitgestellt.{{{
			if [ -n "${CD_DEV_E[1]}" ] ; then
				READ_CD_MENU=($CD_DEV_E)
				READ_TITLE=(${gv_Configuration}::${lv_Read_Drive})
				READ_MSG=$(gettext 'Waehlen Sie ihr Leselaufwerk aus.')
				menubox "$READ_DEVICE" "$READ_TITLE" "$READ_MSG" "$READ_CD_MENU"
				while [ "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help share/cdrom_help
							menubox "${gv_Auswahl#HELP }" "$READ_TITLE" "$READ_MSG" "$READ_CD_MENU"
							;;
						*)	user_device_check $gv_Auswahl A
							READ_DEVICE="$gv_Auswahl"
							break
							;;
					esac
				done
			else
				no_dev_cd
			fi
			#}}}
			konf_menue $lv_Read_Drive
			;;
		$lv_Eject)
			# nach dem lesen/rippen der CD/DVD diese auswerfen?{{{
			EJECT_TITLE="${gv_Configuration}::${lv_Eject}"
			MSG=$(gettext 'Soll die CD/DVD nach dem rippen/kopieren ausgeworfen werden (ja/nein)?')
			yesno "$EJECT_TITLE" "$MSG" "$EJECT"
			if [ "$gv_Auswahl" != no ] ; then
				EJECT="yes"
			else
				EJECT="no"
			fi
			#}}}
			konf_menue $lv_Eject
			;;
		$lv_Proxy)
			# http Proxy einstellen{{{
			gv_Proxy="$PROXY"
			conf_proxy -o
			if [ -n "$gv_Proxy" ] ; then
				PROXY="$gv_Proxy"
			else
				unset -- PROXY
			fi
			#}}}
			konf_menue $lv_Proxy
			;;
		$lv_Encoder_Prog)
			# Encoder Programme, wie lame oder oggenc einstellen.{{{
			# Immer neu einlesen falls jemand diese im Netzwerk geloescht hat.
			prog_check lame oggenc
			if [ -n "$PROGS" ] ; then
				ENC_MENU=($PROGS_E)
			fi
			# Funktion Encodierungsprogrammmenue, encoder_prog_menu# {{{
			#
			# usage: encoder_prog_menu
			ENC_TITLE=(${gv_Configuration}::${lv_Encoder_Prog})
			encoder_prog_menu() {
				menubox "$1" "$ENC_TITLE" "$gv_Menupoint" "$ENC_MENU"
			}
			## }}}
			# Funktion (no_cddvdprog_opt) Nachricht das es noch keine Konfiguration fuer# {{{
			# dieses Encodierungsprogramm gibt
			#
			# usage no_cddvdprog_opt "PROG"
			# PROG - Programm dessen Konfiguration noch nicht erledigt wurde.
			#
			#
			no_cddvdprog_opt() {
				MSG=$(gettext 'Sie haben noch keine richtigen Optionen fuer das Encodierungsprogramm "$FM_PROG" erzeugt. Es werden die Standard Optionen genommen. Siehe Manpages zu den einzelnen Programmen.')
				msgbox "$gv_Info" "$MSG"
			}
			## }}}
			encoder_prog_menu "$FM_PROG"
			while [ -n "$gv_Auswahl" ] ; do
				case "$gv_Auswahl" in
					HELP*)	script_help encoder_help
						encoder_prog_menu "${gv_Auswahl#HELP }"
						;;
					*)
						# Auswahl wird uebernommen
						FM_PROG="$gv_Auswahl"
						if [ "$FM_PROG" = lame -a -z "$LAME_ENC_OPT" ] ; then
							no_cddvdprog_opt "$FM_PROG"
						elif [ "$FM_PROG" = oggenc -a -z "$OGG_ENC_OPT" ] ; then
							no_cddvdprog_opt "$FM_PROG"
						fi
						break
					;;
				esac
			done
			#}}}
			konf_menue $lv_Encoder_Prog
			;;
		$lv_Encoder_Use)
			# Encoder verwenden (ja/nein){{{
			ENCODER_MSG=$(gettext 'Soll ein Encoder zum umwandeln in andere Formate benutzt werden (ja/nein)?')
			yesno "$ENC_TITLE" "$ENCODER_MSG" "$ENCODE"
			if [ "$gv_Auswahl" != no ] ; then
				ENCODE="yes"
			else
				ENCODE="no"
			fi
			#}}}
			konf_menue $lv_Encoder_Use
			;;
		$lv_Lame_Enc_Opt)
			# Lame Encoder Programmoptionen einstellen{{{
			inputbox "$ENC_TITLE" "$ENC_OPT_MSG" "$LAME_ENC_OPT"
			if [ -n "$gv_Auswahl" ] ; then
				LAME_ENC_OPT="$gv_Auswahl"
			else
				unset -- LAME_ENC_OPT
			fi
			#}}}
			konf_menue $lv_Lame_Enc_Opt
			;;
		$lv_Ogg_Enc_Opt)
			# Oggenc Programmoptionen einstellen{{{
			inputbox "$ENC_TITLE" "$ENC_OPT_MSG" "$OGG_ENC_OPT"
			if [ -n "$gv_Auswahl" ] ; then
				OGG_ENC_OPT="$gv_Auswahl"
			else
				unset -- OGG_ENC_OPT
			fi
			#}}}
			konf_menue $lv_Ogg_Enc_Opt
			;;
		$lv_Video_Mountdir)
			# Mount Partition fuer Video angeben.# {{{
			mount_path "$VIDEO_MOUNT_PATH"
			if [ -n "$MOUNT_PATH" ] ; then
				VIDEO_MOUNT_PATH="$MOUNT_PATH"
			else
				unset -- VIDEO_MOUNT_PATH
			fi
			## }}}
			konf_menue $lv_Video_Mountdir
			;;
		$lv_Video_Dir)
			# Video Verzeichnis angeben{{{
			dselect "$VIDEO_DIR"
			if [ "$VERZ" ] ; then
				dselect_check -c "$VERZ"
				if [ "$VERZ" ] ; then
					user_device_check "$VERZ" AIE
					VIDEO_DIR="$VERZ"
				fi
			else
				VIDEO_DIR=""
			fi
			#}}}
			konf_menue $lv_Video_Dir
			;;
		$gv_Save)
			if [ "$READ_DEVICE" ] ; then
				kwrip_config
				break
			else
				MSG=$(gettext 'Sie muessen wenigstens das Leselaufwerk auswaehlen.')
				msgbox "$gv_Attention" "$MSG"
			fi
			;;
		$gv_Back)	break
			;;	
	esac
done
}
#}}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
