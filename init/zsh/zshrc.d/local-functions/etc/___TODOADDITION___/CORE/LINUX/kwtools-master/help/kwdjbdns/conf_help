# conf_help fuer kwdjbdns{{{
TITLE="${gv_Configuration}::${gv_Help}"
MSG=$(gettext 'Hier kann man die einzelnen DNS Server einrichten.

dnscache: Ein DNS Cache daemon. Geben Sie bitte die IP von 
\tlocalhost (127.0.0.1) ein und tragen Sie diese in
\t/etc/resolv.conf ein.

tinydns: Ein eigenstaendiger DNS Server. Geben Sie hier die
\tIP des Rechners an (192.168.0.1) auf dem tinydns laeuft.

axfrdns: Dies ist ein Zone Transfer Service. Dieser muss laufen,
\twenn tinydns eingerichtet wurde und ein dnscache den Cache
\tdes tinydns nutzen darf, genauso wie das ucspi-tcp
\tPaket installiert sein muss.
\tHier muessen Sie nichts eingeben. Wichtig ist das tinydns
\tlaeuft.

pickdns: Dies ist ein load-balancing DNS server. Er akzeptiert
\twiederholende DNS Anfragen von Rechnern aus dem Internet und
\tantwortet mit einer dynamsichen Auswahl von lokal konfigurierten
\tIP-Adressen im 5 Sekunden TTLs Takt.

rbldns: rbldns ist ein IP-address-listing DNS Server. Er akzeptiert
\twiederholende DNS-Fragen von Rechnern aus dem Internet, die
\tueber verschiedenartige IP-Adressen fragen. Er versorgt Sie
\tmit Antworten, die zeigen, ob die Adressen auf einer
\toertlich konfigurierten Liste, wie RBL oder DUL sind.
\tHier geben Sie bitte die domain, die verwaltet werden soll
\tein und die IP von ihrem Rechner.

walldns: walldns ist ein reverse DNS wall Server. Er akzeptiert
\twiederholende DNS-Fragen fuer in-addr.arpa Domains von
\tRechnern aus dem Internet, und liefert allgemeine
\t(generische) Antworten, die vermeiden, lokale Rechner
\tInformation zu offenbaren.
\tZum Beispiel, versorgt walldns einen PTR-record fuer
\t4.3.2.1.in-addr.arpa und zeigt 4.3.2.1.in-addr.arpa,
\tals den Namen von IP 1.2.3.4 an, und ein passender A record
\tzeigt 1.2.3.4 als die IP Adresse von 4.3.2.1.in-addr.arpa.
\tGeben Sie hier die IP ihres Rechners an.')
#}}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
