# Funktion (kwpwsafe_open_db), Datenbank Eintrage verwalten.# {{{
#
kwpwsafe_open_db() {
	autoload -U kwpwsafe_db_conf
	# Variablen# {{{
	lv_Entries=$(gettext 'Eintraege')
	lv_User_Cp=$(gettext 'Benutzer kopieren')
	lv_Pw_Cp=$(gettext 'Passwort kopieren')
	lv_Group_Create=$(gettext 'Gruppe anlegen')
	lv_Name=$(gettext 'Name')
	lv_Password_Gen=$(gettext 'Passwort generieren')
	lv_Notes=$(gettext 'Notiz')
	#
	UNSET=(PW_NAME PW_GROUP PW_USER PW_PASSWD PW_NOTES)
	DATA_MSG=$(gettext 'Waehlen Sie einen Eintrag aus der Liste der Datenbank $DB_FILE.')
	OPEN_DB_TITLE="$lv_Db::${DB_FILE##*/}"
	## }}}
	# Funktion (no_delete_data_msg), konnte die Datensaetze nicht loeschen# {{{
	no_delete_data_msg() {
		if [[ ${#argv} == 1 ]] ; then
			local Data
			Data="$1"
			MSG=$(gettext 'Konnte den Datensatz "$Data" nicht loeschen.')
			msgbox "$gv_Attention" "$MSG"
		else
			no_para_msg $0
		fi
	}
	## }}}
	# Auswahl Abfrage, eingabe, aendern, loeschen
	# Funktion (open_db_menu)# {{{
	#
	OPEN_DB_MENU=($lv_Entries \"\" $gv_Create \"\"
	$gv_Change \"\" $gv_Delete \"\" $gv_Back \"\")
	open_db_menu() {
		menubox "$1" "$OPEN_DB_TITLE" "$gv_Menupoint" "$OPEN_DB_MENU"
	}
	## }}}
	open_db_menu
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help kwpwsafe_open_db_help
				open_db_menu "${gv_Auswahl#HELP }"
				;;
			$lv_Entries)
				# Eintrage ansehen, Passwort und/oder Benutzer# {{{
				# kopieren
				# Funktion (entries_menu)# {{{
				ENTRIES_MENU=($gv_Display \"\" \"$lv_User_Cp\" \"\"
				\"$lv_Pw_Cp\" \"\")
				entries_menu() {
					menubox "$1" "$OPEN_DB_TITLE" "$gv_Menupoint" "$ENTRIES_MENU"
				}
				## }}}
				# Funktion (data_menu)# {{{
				data_menu() {
					menubox "$1" "$OPEN_DB_TITLE" "$DATA_MSG" "$DATA_MENU"
				}
				## }}}
				read_pwsafe_entry "$DB_FILE"
				if [ -n "${PW_ENTRY[1]}" ] ; then
					DATA_MENU=($PW_ENTRY)
					data_menu
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_list_help
								data_menu "${gv_Auswahl#HELP }"
								;;
							*)
								# Menue fuer die Eintraege# {{{
								# Auswahl sichern
								Data_key="$gv_Auswahl"
								TERMINAL_MSG=$(gettext 'Druecken Sie ENTER, wenn Sie die Daten uebernommen haben.')
								#
								entries_menu
								while [ -n "$gv_Auswahl" ] ; do
									case "$gv_Auswahl" in
										HELP*)	script_help kwpwsafe_entries_help
											entries_menu "${gv_Auswahl#HELP }"
											;;
										$gv_Display)
											# Werte anzeigen# {{{
											read_pwsafe_data "$DB_FILE" "$Data_key"
											if [ -n "$PW_NAME" -o -n "$PW_GROUP" ] ; then
												MSG="${lv_Name}:	$PW_NAME
${gv_Group}:	$PW_GROUP
${gv_User}:	$PW_USER
${gv_Passwd}:	$PW_PASSWD
${lv_Notes}:
`print $PW_NOTES | tr '\012' '\n'`"
												msgbox "$OPEN_DB_TITLE" "$MSG"
												# Werte wieder loeschen
												unset -- PW_PASSWD PW_LOGIN PW_NOTES \
													PW_NAME PW_GROUP
											else
												# keine Daten verfuegbar
												no_entry_msg
											fi
											## }}}
											entries_menu $gv_Display
											;;
										$lv_User_Cp)
											# Benutzername in die Zwischenablage kopieren# {{{
											if [[ -n $DISPLAY ]] ; then
												print "$DB_PASS" | pwsafe -u "$Data_key" -x -q -f "$PWSAFECF" &>/dev/null
											else
												print "${gv_User}:" `print "$DB_PASS" | pwsafe -u "$Data_key" -E -q -f "$PWSAFECF"`
												print -n "$TERMINAL_MSG" ; read
											fi
											## }}}
											entries_menu $lv_User_Cp
											;;
										$lv_Pw_Cp)
											# Passwort in die Zwischenablage kopieren# {{{
											if [[ -n $DISPLAY ]] ; then
												print "$DB_PASS" | pwsafe -p "$Data_key" -x -q -f "$PWSAFECF" &>/dev/null
											else
												print "${gv_Passwd}:" `print "$DB_PASS" | pwsafe -p "$Data_key" -E -q -f "$PWSAFECF"`
												print -n "$TERMINAL_MSG" ; read
											fi
											## }}}
											entries_menu $lv_Pw_Cp
											;;
									esac
								done
								## }}}
								data_menu $Data_key
								;;
						esac
					done
				else
					no_entry_msg
				fi
				## }}}
				open_db_menu $lv_Entries
				;;
			$gv_Create)
				# Eintrag erstellen# {{{
				unset -- $UNSET
				kwpwsafe_db_conf
				#}}}
				open_db_menu $gv_Create
				;;
			$gv_Change)
				# Eintrag aendern# {{{
				unset -- $UNSET
				read_pwsafe_entry "$DB_FILE"
				if [ -n "${PW_ENTRY[1]}" ] ; then
					CHANGE_MENU=($PW_ENTRY)
					menubox "" "$OPEN_DB_TITLE" "$DATA_MSG" "$CHANGE_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_list_help
								menubox "${gv_Auswahl#HELP }" "$OPEN_DB_TITLE" "$DATA_MSG" "$CHANGE_MENU"
								;;
							*)	# Auswahl einlesen
								CHANGE=yes
								read_pwsafe_data "$DB_FILE" "$gv_Auswahl"
								if [ -n "$PW_NAME" -o -n "$PW_GROUP" ] ; then
									kwpwsafe_db_conf
								else
									# keine Daten verfuegbar
									no_entry_msg
								fi
								CHANGE=""
								break
								;;
						esac
					done
				else
					no_entry_msg
				fi
				## }}}
				open_db_menu $gv_Change
				;;
			$gv_Delete)
				# Eintraege loeschen# {{{
				unset -- $UNSET
				read_pwsafe_entry "$DB_FILE"
				if [ -n "${PW_ENTRY_M[1]}" ] ; then
					DEL_MENU=($PW_ENTRY_M)
					checklist "" "$OPEN_DB_TITLE" "$gv_Delete_MSG" "$DEL_MENU"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_list_help
								checklist "${gv_Auswahl#HELP }" "$OPEN_DB_TITLE" "$gv_Delete_MSG" "$DEL_MENU"
								;;
							*)
								# Auswahl loeschen
								while read i ; do
									print "$DB_PASS" | pwsafe --delete "$i" -q -f "$DB_FILE" &>/dev/null || \
									no_delete_data_msg "$i"
								done <${gv_LogFile}$$
								break
								;;
						esac
					done
				else
					no_entry_msg
				fi
				## }}}
				open_db_menu $gv_Delete
				;;
			$gv_Back)	break
				;;
		esac
	done
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
