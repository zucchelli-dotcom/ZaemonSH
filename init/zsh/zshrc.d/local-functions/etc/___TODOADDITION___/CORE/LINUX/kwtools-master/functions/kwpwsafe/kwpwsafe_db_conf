# Funktion (kwpwsafe_db_conf)# {{{
#
# usage: kwpwsafe_db_conf
kwpwsafe_db_conf() {
	# Pruefen ob ein Eintrag erstellt oder# {{{
	# geaendert werden soll.
	if [ "$CHANGE" = yes ] ; then
		PW_GROUP_OLD="$PW_GROUP"
		PW_NAME_OLD="$PW_NAME"
		PW_USER_OLD="$PW_USER"
		PW_PASSWD_OLD="$PW_PASSWD"
		PW_NOTES_OLD="$PW_NOTES"
	fi
	## }}}
	# Funktion (kwpwsafe_db_conf_menu)# {{{
	kwpwsafe_db_conf_menu() {
		KWPWSAFE_DB_CF_MENU=($gv_Group \"$PW_GROUP\" $lv_Name \"$PW_NAME\"
		$gv_User \"$PW_USER\" $gv_Passwd \"$PW_PASSWD\"
		\"$lv_Password_Gen\" \"\" $lv_Notes \"$PW_NOTES\"
		$gv_Save \"\" $gv_Back \"\")
		menubox "$1" "$OPEN_DB_TITLE" "$gv_Menupoint" "$KWPWSAFE_DB_CF_MENU"
	}
	## }}}
	kwpwsafe_db_conf_menu
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help kwpwsafe_db_conf_help
				kwpwsafe_db_conf_menu "${gv_Auswahl#HELP }"
				;;
			$gv_Group)
				# Gruppe auswaehlen/anlegen# {{{
				read_pwsafe_entry "$DB_FILE"
				# menu
				GROUPS_MENU=(\"$lv_Group_Create\" \"\" $PW_GROUPS_E)
				menubox "" "$OPEN_DB_TITLE" "$gv_Menupoint" "$GROUPS_MENU"
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help kwpwsafe_conf_help
							menubox "${gv_Auswahl#HELP }" "$OPEN_DB_TITLE" "$gv_Menupoint" "$GROUPS_MENU"
							;;
						$lv_Group_Create)
							# Gruppe eingeben# {{{
							MSG=$(gettext 'Geben Sie den Namen der Gruppe ein (z.B. haushalt).')
							inputbox "$OPEN_DB_TITLE" "$MSG" "$PW_GROUP"
							if [ -n "$gv_Auswahl" ] ; then
								if [ -z "`print ${${(ws: :)${(M)${=PW_GROUPS}##${gv_Auswahl}.*}}[1]}`" ] ; then
									PW_GROUP="$gv_Auswahl" 
								else
									# Nachricht, Name schon vorhanden 
									MSG=$(gettext 'Die $gv_Group $gv_Auswahl ist schon vorhanden. Nehmen Sie eine andere.')
									PW_GROUP="" 
									msgbox "$gv_Info" "$MSG"
								fi
							else
								no_input_msg
								PW_GROUP="" 
							fi
							## }}}
							break
							;;
						*)
							# Auswahl uebernehmen bzw. pruefen# {{{
							if [ -n "$gv_Auswahl" -a -n "$PW_NAME" ] ; then
								# checken, ob Group schon vorhanden ist
								if [ -z "`print ${(M)${=PW_GROUPS}##${gv_Auswahl}.${PW_NAME}*}`" ] ; then
									PW_GROUP="$gv_Auswahl" 
								else
									# Nachricht, Gruppe.Name schon vorhanden.
									MSG=$(gettext 'Der $gv_Group ${gv_Auswahl}.${PW_NAME} ist schon vorhanden. Nehmen Sie eine andere $gv_Group oder ${lv_Name}.')
									PW_GROUP="" 
									msgbox "$gv_Info" "$MSG"
								fi
							elif [ -n "$gv_Auswahl" ] ; then
								PW_GROUP="$gv_Auswahl" 
							else
								no_input_msg
								PW_GROUP="" 
							fi
							## }}}
							break
							;;
					esac 
				done
				## }}}
				kwpwsafe_db_conf_menu $gv_Group
				;;
			$lv_Name)
				# Name eingeben# {{{
				MSG=$(gettext 'Geben Sie den Namen des Eintrages ein (z.B. haushalt).')
				inputbox "$OPEN_DB_TITLE" "$MSG" "$PW_NAME"
				if [ -n "$gv_Auswahl" -a -n "$PW_GROUP" ] ; then
					if [ -z "`print ${(M)${=PW_GROUPS}##${PW_GROUP}.${gv_Auswahl}*}`" ] ; then
						PW_NAME="$gv_Auswahl" 
					else
						# Nachricht, Name schon vorhanden 
						MSG=$(gettext 'Der $lv_Name $gv_Auswahl ist schon vorhanden. Nehmen Sie einen anderen.')
						PW_NAME="" 
						msgbox "$gv_Info" "$MSG"
					fi
				elif [ -n "$gv_Auswahl" ] ; then
					if [ -z "`print ${(M)${=PW_GROUPS}##${gv_Auswahl}*}`" ] ; then
						PW_NAME="$gv_Auswahl" 
					else
						# Nachricht, Name schon vorhanden 
						MSG=$(gettext 'Der $lv_Name $gv_Auswahl ist schon vorhanden. Nehmen Sie einen anderen.')
						PW_NAME="" 
						msgbox "$gv_Info" "$MSG"
					fi
				else
					no_input_msg
					PW_NAME="" 
				fi
				## }}}
				kwpwsafe_db_conf_menu $lv_Name
				;;
			$gv_User)
				# UserName eingeben# {{{
				MSG=$(gettext 'Geben Sie den Namen des Benutzers ein (z.B. Loginname).')
				inputbox "$OPEN_DB_TITLE" "$MSG" "$PW_USER"
				if [ -n "$gv_Auswahl" ] ; then
					PW_USER="$gv_Auswahl" 
				else
					PW_USER=""
				fi
				## }}}
				kwpwsafe_db_conf_menu $gv_User
				;;
			$gv_Passwd)
				# Passwort eingeben# {{{
				MSG=$(gettext 'Geben Sie ein Passwort ein. Nehmen Sie am besten unterschiedliche Zeichen in Gross- und Kleinschreibung und .')
				inputbox "$OPEN_DB_TITLE" "$MSG" "$PW_PASSWD"
				if [ -n "$gv_Auswahl" ] ; then
					PW_PASSWD="$gv_Auswahl" 
				else
					PW_PASSWD="" 
				fi
				## }}}
				kwpwsafe_db_conf_menu $gv_Passwd
				;;
			"$lv_Password_Gen")
				# Passwort generieren# {{{
				if [[ -z $PASSWD_LENGTH ]] ; then
					PASSWD_LENGTH=8
				fi
				PW_PASSWD=${${${(ws: :)$(head -c 256 /dev/urandom | uuencode -m -)}[4]}[1,$PASSWD_LENGTH]}
				## }}}
				kwpwsafe_db_conf_menu "$lv_Password_Gen"
				;;
			$lv_Notes)
				# Notiz eingeben# {{{
				if [ -n "$PW_NOTES" ] ; then
					print $PW_NOTES | tr '\012' '\n' >${gv_WorkDir}/notes
				fi
				# Mittels der Funktion edit_file
				# herrausfinden ob ein Editor konfiguriert
				# wurde oder die dialogbox "editbox" benutzt
				# werden soll.
				# Und dann nat. damit die Datei bearbeiten
				edit_file "$OPEN_DB_TITLE" ${gv_WorkDir}/notes
				# Pruefen auf >0 Lines in der Datei sind.
				if [ "`wc -l < ${gv_WorkDir}/notes`" -gt 0 ] ; then
					unset -- PW_NOTES
					while read a ; do
						if [ -z "$PW_NOTES" ] ; then
							PW_NOTES="${a}"
						else
							# \\012 ist fuer die moegliche Anzeige in
							# der dialogbox menubox und als Kennzeichnung
							# fuer die Speicherung.
							# \012 = Newline
							PW_NOTES="${PW_NOTES}\\012${a}"
						fi
					done < ${gv_WorkDir}/notes
				fi
				## }}}
				kwpwsafe_db_conf_menu $lv_Notes
				;;
			$gv_Save)
				# speichern# {{{
				OK=""
				if [ -n "$PW_NAME" -a -n "$DB_PASS" -a -n "$DB_FILE" ] ; then
					# expect mit der Einstellungsdatei ausfuehren
					> ${gv_WorkDir}/expect <<<"#!/usr/bin/expect -f

set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {\$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- \$arg
    }
}

set mpass \"$DB_PASS\"
set pw_group \"$PW_GROUP\""
					# Datenbankeintrag aendern/erstellen
					# erstellen# {{{
					if [ "$CHANGE" != yes ] ; then
						# Username
						if [ -n "$PW_USER" ] ; then
							>> ${gv_WorkDir}/expect <<<"set pw_user \"$PW_USER\""
						else
							>> ${gv_WorkDir}/expect <<<"set pw_user n"
						fi
						# Passwort
						if [ -n "$PW_PASSWD" ] ; then
							>> ${gv_WorkDir}/expect <<<"set pw_pass \"$PW_PASSWD\"
set pw_enablepass \"$PW_PASSWD\""
						else
							>> ${gv_WorkDir}/expect <<<"set pw_pass \"\"
set pw_enablepass \"\""
						fi
						# Notiz
						if [ -n "$PW_NOTES" ] ; then
							>> ${gv_WorkDir}/expect <<<"set pw_notes \"${PW_NOTES//\\012/012}\""
						else
							>> ${gv_WorkDir}/expect <<<"set pw_notes \"\""
						fi
						# Standard Ausfuehrungen speichern/erstellen
						>> ${gv_WorkDir}/expect <<<"set timeout 1
match_max 100000
stty -echo
spawn pwsafe -a $PW_NAME -f $DB_FILE
expect \"Enter passphrase .*: \"
send -- \"\$mpass\r\"
expect -exact \"\r
group \[<none>\]: \"
send -- \"\$pw_group\r\"
expect -exact \"\r
username: \"
send -- \"\$pw_user\r\"
expect -exact \"\r
password \[return for random\]: \"
send -- \"\$pw_pass\r\"
expect -exact \"\r
password again: \"
send -- \"\$pw_enablepass\r\"
expect -exact \"\r
notes: \"
send -- \"\$pw_notes\r\"
stty echo
expect eof"
						(export LC_ALL=C ; expect -f ${gv_WorkDir}/expect >/dev/null) || (del_expect ; prog_failure)
						# schnell die Erstellungsdatei loeschen
						del_expect
						# Variablen loschen
						unset -- PW_PASSWD PW_GROUP PW_NAME PW_NOTES PW_USER
						break
						## }}}
					else
						# aendern# {{{
						# pruefen, ob was geaendert wurde
						if [ "$PW_USER_OLD" != "$PW_USER" ] ; then
							OK=yes
						fi
						if [ "$PW_GROUP_OLD" != "$PW_GROUP" ] ; then
							OK=yes
						fi
						if [ "$PW_NAME_OLD" != "$PW_NAME" ] ; then
							OK=yes
						fi
						if [ "$PW_PASSWD_OLD" != "$PW_PASSWD" ] ; then
							OK=yes
						fi
						if [ "$PW_NOTES_OLD" != "$PW_NOTES" ] ; then
							OK=yes
						fi
						if [ "$PW_NOTES_OLD" != "$PW_NOTES" ] ; then
							OK=yes
						fi
						# Wenn es Veraenderungen gab
						# diese anwenden, ansonsten
						# gar nichts tun.
						if [ "$OK" = yes ] ; then
							# Username
							if [ -n "$PW_USER" ] ; then
								>> ${gv_WorkDir}/expect <<<"set pw_user \"$PW_USER\""
							else
								>> ${gv_WorkDir}/expect <<<"set pw_user \"\""
							fi
							# Passwort
							>> ${gv_WorkDir}/expect <<<"set pw_change_pass \"y\"
set pw_pass \"$PW_PASSWD\"
set pw_enablepass \"$PW_PASSWD\""
							# Notiz
							if [ -n "$PW_NOTES" ] ; then
								>> ${gv_WorkDir}/expect <<<"set pw_notes \"${PW_NOTES//\\012/012}\""
							else
								>> ${gv_WorkDir}/expect <<<"set pw_notes \" \""
							fi
							# Standard Ausfuehrungen speichern/erstellen
							>> ${gv_WorkDir}/expect <<<"set pw_name \"$PW_NAME\"
set timeout 1
match_max 100000
stty -echo
spawn pwsafe -e $PW_NAME_OLD -f $DB_FILE
expect \"Enter passphrase .*: \"
send -- \"\$mpass\r\"
expect \"name: .* \"
send -- \"\$pw_name\r\"
expect \"group: .* \"
send -- \"\$pw_group\r\"
expect \"username: .* \"
send -- \"\$pw_user\r\"
expect -exact \"\r
change password ? \[n\] \"
send -- \"\$pw_change_pass\r\"
expect -exact \"\r
new password: \[return for random\] \"
send -- \"\$pw_pass\r\"
expect -exact \"\r
new password again: \"
send -- \"\$pw_enablepass\r\"
expect \"notes:* \"
send -- \"\$pw_notes\r\"
expect \"Confirm changing* \"
send -- \"\r\"
stty echo
expect eof"
							(export LC_ALL=C ; expect -f ${gv_WorkDir}/expect >/dev/null) || (del_expect ; prog_failure)
							# schnell die Erstellungsdatei loeschen
							del_expect
							# Variablen loeschen
							unset -- PW_PASSWD PW_GROUP PW_NAME PW_NOTES PW_USER
						else
							MSG=$(gettext 'Es wurde nichts geaendert.')
							msgbox "$gv_Info" "$MSG"
						fi
						break
					fi
					## }}}
				else
					MSG=$(gettext 'Sie muessen mindestens einen $lv_Name eingeben.')
					msgbox "$gv_Info" "$MSG"
					kwpwsafe_db_conf_menu
				fi
				## }}}
				;;
			$gv_Back)
				unset -- PW_PASSWD PW_GROUP PW_NAME PW_NOTES PW_USER
				break
				;;
		esac
	done
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
