# Funktion (kwparted_parttab), Partitionstabellen aller Festplatten{{{
# sichern und die des MBR
#
kwparted_parttab() {
	# pruefen, ob folgende Programme installiert sind.
	prog_check sfdisk sgdisk
	if [ -n "$NO_PROGS" ] ; then
		return 1
	fi
	#
	lv_Backup=$(gettext 'Sicherung')
	lv_Fp=$(gettext 'Festplatte')
	# Funktion (no_backup_msg), Erstellung des Backups fehlgeschlagen.# {{{
	#
	no_backup_msg() {
		MSG=$(gettext 'Das Erstellen einer Sicherung von der Festplatte $FP ist fehlgeschlagen.')
		msgbox "$gv_Attention" "$MSG"
	}
	## }}}
	# Funktion (no_backup_back_msg), Zuruecksichern des Backups fehlgeschlagen.# {{{
	#
	no_backup_back_msg() {
		MSG=$(gettext 'Das Zurueckspielen der Sicherung ($PT) auf die Festplatte von $FP ist fehlgeschlagen.')
		msgbox "$gv_Attention" "$MSG"

	}
	## }}}
	# Funktion parttab_menue{{{
	PARTTAB_MENU=(\"$PART_TAB $gv_Create\" \"\"	\"$lv_Backup $gv_Create\" \"\"
	\"$lv_Backup $gv_Back\" \"\" $gv_Back \"\")
	parttab_menue() {
		menubox "$1" "$PART_TAB" "$gv_Menupoint" "$PARTTAB_MENU"
	}
	#}}}
	parttab_menue
	while [ -n "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)
				script_help parttab_help
				parttab_menue "${gv_Auswahl#HELP }"
				;;
			"$PART_TAB $gv_Create")
				# Partitionstabelle erstellen# {{{
				# Funktion label_create_menu# {{{
				#
				# Herausfinden von Festplatten die keine Partitionstabelle
				# besitzen und zur Auswahl anbieten.
				#
				label_create_menu() {
					unset -- Disk_Part_Cr
					for i in ${=DISK_DEV} ; {
						if ! parted -s $i print &>/dev/null ; then
							Disk_Part_Cr+=($i \"\")
						fi	
					}
					#
					# Gibt es keine Partitionstabelle wird eine Information darueber angezeigt
					# und abgebrochen.
					if [ -z "${Disk_Part_Cr[1]}" ] ; then
						MSG=$(gettext 'Alle Festplatten haben schon eine Partitionstabelle.')
						msgbox "$gv_Info" "$MSG"
						break
					else
						LABEL_MENU=($Disk_Part_Cr $gv_Back \"\")
						menubox "$1" "$PART_TAB" "$gv_Menupoint" "$LABEL_MENU"
					fi
				}
				## }}}
				label_create_menu
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)
							script_help parttab_help
							label_create_menu "${gv_Auswahl#HELP }"
							;;
						/dev*)
							# eine Partitionstabelle kreieren.
							L_DISK="$gv_Auswahl"
							disk_create_parttab $gv_Auswahl
							break
							;;
						$gv_Back)	break
							;;
					esac
				done
				## }}}
				parttab_menue "$PART_TAB $gv_Create"
				;;
			"$lv_Backup $gv_Create")
				# Sicherung erstellen - alle oder einzeln# {{{
				Timestamp=$(date +%Y%m%d-%H:%M)
				# Funktion backup_create_menu# {{{
				backup_create_menu() {
					BACKUP_CREATE_MENU=($Disk_Choice_ALL \"\" $DISK_DEV_E $gv_Back \"\")
					menubox "$1" "$PART_TAB" "$gv_Menupoint" "$BACKUP_CREATE_MENU"
				}
				## }}}
				# Funktion (backup_parttab), MBR und Partitionstabelle sichern# {{{
				#
				# usage: backup_parttab FP
				# FP - Festplatte
				#
				backup_parttab() {
					if [[ ${#argv} == 1 ]] ; then
						local Backup_Fp Backup_Gpt_File Backup_Mpt_File
						Backup_Fp="$1"
						# wird gespeichert als hda.parttab-${Date}.txt
						Index=$DISK_DEV[(i)$Backup_Fp]
						Fp_Name="${DISK_DEV_NAME[Index]}"
						Backup_Gpt_File="/boot/${Timestamp}_${Backup_Fp##*/}-Backup:${Fp_Name}.gpt"
						Backup_Mpt_File="/boot/${Timestamp}_${Backup_Fp##*/}-Backup:${Fp_Name}.mpt"
						# Gibt es eine Partitionstabelle wird sie gespeichert.
						# Und zwar in Form von Byte und Compact.
						if touch /boot/testfile ; then
							rm -f /boot/testfile &>/dev/null
							disklabel "$Backup_Fp"
							case "$FPDISKLABEL" in
								gpt)
									if ! sgdisk -b "$Backup_Gpt_File" "$Backup_Fp" &>/dev/null ; then
										no_backup_msg
										return 1
									fi
									;;
								msdos)
									if ! sfdisk "$Backup_Fp" > "$Backup_Mpt_File" &>/dev/null ; then
										no_backup_msg
										return 1
									fi
									;;
							esac
						else
							MSG=$(gettext 'Das Verzeichnis /boot ist nicht beschreibbar. Ist /boot readonly eingebunden?')
							msgbox "$gv_Info" "$MSG"
							return 1
						fi
					else
						no_para_msg $0
						return 1
					fi
					return 0
				}
				## }}}
				backup_create_menu
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)
							script_help parttab_help
							backup_create_menu "${gv_Auswahl#HELP }"
							;;
						$Disk_Choice_ALL)
							# alle Festplatten Partitionstabellen sichern.# {{{
							for i in ${=DISK_DEV} ; {
								if ! backup_parttab "$i" ; then
									return 1
								fi
							}
							## }}}
							backup_create_menu $Disk_Choice_ALL
							;;
						/dev*)
							# Die Partitionstabelle einer Festplatte sichern.# {{{
							Fp="$gv_Auswahl"
							if ! backup_parttab "$gv_Auswahl" ; then
								return 1
							fi
							## }}}
							backup_create_menu "$Fp"
							;;
						$gv_Back) break
							;;
					esac
				done
				## }}}
				parttab_menue "$lv_Backup $gv_Create"
				;;
			"$lv_Backup $gv_Back")
				# Sicherung zurueck spielen - einzeln# {{{
				#######################################
				# 1. Datei Auswahl
				# 2. Festplatte Auswahl
				# 3. speichern ausfuehren
				# 4. Status
				unset -- PT FP
				# Funktion backup_back_menu# {{{
				backup_back_menu() {
					BACK_MENU=($PART_TAB \"$PT\" $lv_Fp \"$FP\"
						$gv_Save \"\" $gv_Back \"\")
					menubox "$1" "$PART_TAB" "$gv_Menupoint" "$BACK_MENU"
				}
				## }}}
				backup_back_menu
				while [[ -n $gv_Auswahl ]] ; do
					case "$gv_Auswahl" in
						HELP*)
							script_help parttab_help
							backup_back_menu "${gv_Auswahl#HELP }"
							;;
						$PART_TAB)
							# Sicherungsdatei auswaehlen# {{{
							SUFFIX=".mpt .gpt"
							FORMAT=""
							file_choice /boot only
							if [[ -n $WERT ]] ; then
								PT="$WERT"
							fi
							## }}}
							backup_back_menu $PART_TAB
							;; 
						$lv_Fp)
							# Festplatte auswaehlen# {{{
							if [[ -n ${DISK_DEV_E[1]} ]] ; then
								# Funktion backup_back_fp_menu# {{{
								backup_back_fp_menu() {
									BACK_FP_MENU=($DISK_DEV_E)
									menubox "$1" "$PART_TAB" "$gv_Menupoint" "$BACK_FP_MENU"
								}
								## }}}
								#
								backup_back_fp_menu $FP
								while [ "$gv_Auswahl" ] ; do
									case "$gv_Auswahl" in
										HELP*)
											script_help parttab_help
											backup_back_fp_menu "${gv_Auswahl#HELP }"
											;;
										*)
											FP="$gv_Auswahl"
											break
											;;
									esac
								done
							fi
							## }}}
							backup_back_menu $lv_Fp
							;; 
						$gv_Save)
							# Sicherung zurueckspielen.# {{{
							if [ -n "$PT" -a -n "$FP" ] ; then
								disklabel "$FP"
								case "$FPDISKLABEL" in
									gpt)
										if ! sgdisk -l "$PT" "$FP" &>/dev/null ; then
											no_backup_back_msg
											return 1
										fi
										;;
									msdos)
										if ! sfdisk "$FP" < "$PT" &>/dev/null ; then
											no_backup_back_msg
											return 1
										fi
										;;
								esac
							else
								MSG=$(gettext 'Sie muessen beide Menuepunkte mit Werten belegen.')
								msgbox "$gv_Info" "$MSG"
								backup_back_menu
							fi
							## }}}
							;;
						$gv_Back)
							break
							;;
					esac
				done
				## }}}
				parttab_menue "$lv_Backup $gv_Back"
				;;
			$gv_Back)	break
				;;
		esac
	done
	return 0
}
#}}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
