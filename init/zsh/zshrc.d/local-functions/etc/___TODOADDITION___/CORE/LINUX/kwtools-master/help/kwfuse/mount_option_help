# mount_option_help fuer kwfuse{{{
TITLE=$(gettext 'fusetab::${gv_Configuration}::Mountoptionen::${gv_Help}')
MSG=$(gettext 'Dies sind die FUSE Mountoptionen fuer alle Dateisysteme.
Die Mountoptionen fmask und dmask sind nicht mit aufgefuehrt,
das sie aehnlich der Option umask sind bloss das sie nur fuer
Dateien oder nur fuer Verzeichnisse gelten.

-------------------allgemeine Mountoptionen---------------------
auto: Soll das Dateisystem beim starten des Rechners automatisch
\teingebunden werden (ja/nein)?

user: Darf ein Benutzer das Dateisystem ein/ausbinden (ja/nein)?

----------------------FUSE Mountoptionen------------------------
allow_other: Dies Option ueberschreibt den Sichherheitsmechanismus
\tfuer den Dateisystemzugriff des Benutzer, der das Datei-
\tsystem eingebunden hat. Duerfen alle Benutzer inclusive
\troot Zugriff auf das Dateisystem haben (ja/nein)? Diese
\tOption ist per Standard nur root erlaubt, aber man kann
\tdiese Richtlinie mit einer Konfigurationsoption in der
\t/etc/fuse.conf umgehen (user_allow_other).

allow_root: Ist aehnlich der Option allow_other, aber es limitiert
\tden Dateisystemzugriff auf root und dem Benutzer der das
\tDateisystem eingebunden hat. Soll diese Option aktiviert
\twerden (ja/nein)? Diese Option und 'allow_other' schliessen 
\tsich gegenseitig aus.

default_permissions: Per Standard prueft FUSE nicht die Dateisystem-
\trechte. Es wird dem Dateisystem ueberlassen, ob es eine
\tZugriffsrichtlinie aufstellt oder es dem darunterliegendem
\tDatei Zugriffsmechanismus ueberlaesst. Diese Option schaltet
\tdie Ueberpruefung der Rechte auf Dateien ein. Besonders
\tnuetzlich ist diese Option in Verbindung mit 'allow_other'

debug: Schaltet die Debug Informationen ein (ja/nein).

direct_io: Diese Option schaltet die Benutzung des Kernel Dateicache
\tfuer das Dateisystem aus. Dies hat verschiedene Effekte:

\t- Jeder read() oder write() System Aufruf initiiert ein
\toder mehrere Lese- oder Schreiboperationen, die Daten
\twerden dabei nicht vom Kernel gecached.

\t- Die Rueckgabewerte der read() und write() System Aufrufe
\tkorrespondieren mit den Rueckgabewerten der Lese- und 
\tScreiboperationen. Dies ist sinnvoll, wenn zum Beispiel
\tdie Dateigroesse nicht bekannt ist, bevor die Datei
\tgelesen wird (Bsp.: Netzwerk Dateisysteme).

fsname: Hier koennen Sie den Dateisystemnamen eingeben. Standard ist
\tder Programmname.

gid: Ueberschreibt das 'st_gid' Feld, welches vom Dateisystem gesetzt
\twird. Setzt die Gruppen-ID der Dateien auf dem Dateisystem.

hard_remove: Wenn eine geoeffnete Datei geloescht wird, wird diese
\tstandardmaessig in eine versteckte Datei umbenannt
\t(.fuse.hiddenXXX) und nur geloescht wenn die Datei wieder
\tgeschlossen wurde. Dies erleichtert die Dateisystem
\tImplementierung, welche ein Problem damit hat. Diese Option
\tschaltet das verstecken Verhalten von Dateien aus und
\tloescht diese sofort, durch einen unlink Operation oder
\tin einer rename Operation, welche eine existierende Datei
\tueberschreibt.

\tEs wird vorgeschlagen diese Option nicht zu benuzten. Falls
\tdie Option hard_remove gesetzt wird fehlen folgende libc
\tFunktionen (returning errno of ENOENT):
\t- read()
\t- write()
\t- fsync()
\t- close()
\t- f*xattr()
\t- ftruncate()
\t- fstat()
\t- fchmod()
\t- fchown()

kernel_cache: Diese Option schaltet das Entleeren des Caches, mit
\tdem Dateiinhalt, bei jedem open() System Aufruf aus. Diese
\tOption sollte nur auf Dateisystemen eingesetzt werden, wo
\tdie Dateiinhalte niemals extern veraendert werden (nicht
\tdurch das eingebundene FUSE Dateisystem).
\tDadurch ist es nicht geeignet fuer Netzwerk Dateisysteme
\tund anderen "zwischenschichtigen" Dateisystemen.

NOTIZ: Falls diese Option nicht spezifiert wird (und 'direct_io' 
\tauch nicht) werden die Daten nach dem open() System Aufruf
\tgecacht, so das ein read() System Aufruf nicht immer eine
\tLeseoperation initiiert.

large_read: Problem bei grossen Lese Anfragen. Dies kann die
\tGeschwindigkeit, auf einigen Dateisystemen verbessern, aber
\tauch herabsetzen. Diese Option ist nur nuetzlich bei der
\tVerendung von 2.4.X und 2.6.X Kerneln, die automatisch fuer
\tdie benoetigte Groesse ein Optimum an Geschwindigkeit be-
\tstimmen.

max_read: Geben Sie bitte die maximale Groesse der Speicherseiten
\tan, die fuer Leseoperationen genutzt werden sollen an (0 -
\t32, 32=128Kb auf i386). Standard ist unbegrenzt.

nonempty: Darf das Laufwerk ueber einer nicht leeren Datei oder 
\tVerzeichnis eingebunden werden (ja/nein)?. Per Standard wird
\tdies abgelehnt (ab Version 2.3.1). Zum Beispiel koennten
\tgerade automatische Backups in dieses Verzeichnis schreiben.

readdir_ino: Falls die Option 'use_ino' nicht gesetzt ist, wird
\tversucht das 'd_ino' Feld in readdir() zu fuellen. Wenn
\tder Name vorher nachgeschlagen wurde und er noch im Cache
\tist, wird die gefundene Inode Nummer benutzt. Ansonsten
\twird sie auf '-1' gesetzt. Ist die Option 'use_ino' gesetzt
\twird diese Option ignoriert.

uid: Ueberschreibt das 'st_uid' Feld, welches vom Dateisystem
\tgesetzt wird. Setzt die Benutzer-ID der Dateien auf dem
\tDateisystem.

use_ino: Benutzung des 'st_ino' Feld in getattr() und fill_dir().
\tDiese Werte werden benutzt um das 'st_ino' Feld in der
\tstat()/lstat()/fstat() Funktionen und das 'd_ino' Feld in
\tder readdir() Funktion zu belegen. Das Dateisystem gibt
\tkeine eindeutige Garantie, wie einige Anwendungen sich auf
\tdiese Werte verlassen, die fuer das ganze Dateisystem
\tgelten.

umask: Ueberschreibt die Zugriffbits im 'st_mode' Feld, welches vom
\tDateisystem gesetzt wird. Sie muessen Oktalziffern benutzen
\t(Bsp.: 0022 = rwxr-xr-x).')
#}}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
