# Funktion (kwmutt_gpg_config), schreibt die gpg Konfigurationsdatei# {{{
# fuer "mutt".
#
# usage: kwmutt_gpg_config
#
kwmutt_gpg_config() {
#
# Konfiguration schreiben.
#
> $M_GPG <<< "# Beginn $M_GPG
#
# Autor: Kai Wilke <kiste@netzworkk.de>
#
# Command formats for gpg.
# 
# %p    The empty string when no passphrase is needed,
#       the string "PGPPASSFD=0" if one is needed.
#
#       This is mostly used in conditional % sequences.
#
# %f    Most PGP commands operate on a single file or a file
#       containing a message.  %f expands to this file's name.
#
# %s    When verifying signatures, there is another temporary file
#       containing the detached signature.  %s expands to this
#       file's name.
#
# %a    In "signing" contexts, this expands to the value of the
#       configuration variable $pgp_sign_as.  You probably need to
#       use this within a conditional % sequence.
#
# %r    In many contexts, mutt passes key IDs to pgp.  %r expands to
#       a list of key IDs.

# Note that we explicitly set the comment armor header since GnuPG, when used
# in some localiaztion environments, generates 8bit data in that header, thereby
# breaking PGP/MIME.
#
# Zudem sollte der Pfal zur Datei "gpg.rc" angegeben werden da diese 
# entsprechende Konfigurationen enthaelt. Mutt liefert meist hierzu 
# auch schon eine fertige mit, jedoch sollte wenn moeglich erst geschaut
# werden ob nicht vom Distributor breits eine fuer die verwendete Mutt Version
# eine solche Datei im System vorhanden ist.
#
# Unter Debian Stand 09/2007 Testing-Lenny ist diese unter "/usr/share/doc/mutt/examples/gpg.rc"
# zufinden.
# 
# Die Originale von Mutt befindet sich bei Debian Stand 09/2007 Testing-Lenny 
# unter "/etc/Muttrc.d/gpg.rc"
#
#source /etc/Muttrc.d/gpg.rc

set pgp_autosign=\"$pgp_autosign\"
set pgp_autoencrypt=\"$pgp_autoencrypt\"
# pattern for good signature - may need to be adapted to locale!
set pgp_good_sign=\"$pgp_good_sign\"
set pgp_check_exit=\"$pgp_check_exit\"
set pgp_long_ids=\"$pgp_long_ids\"
set pgp_retainable_sigs=\"$pgp_retainable_sigs\"
set pgp_show_unusable=\"$pgp_show_unusable\"
set pgp_sign_as=\"$pgp_sign_as\"
set pgp_strict_enc=\"$pgp_strict_enc\"
set pgp_timeout=\"$pgp_timeout\"
set pgp_sort_keys=\"$pgp_sort_keys\"
set pgp_auto_decode=\"$pgp_auto_decode\"
# decode application/pgp
set pgp_decode_command=\"$pgp_decode_command\"
# hole keys
set pgp_getkeys_command=\"$pgp_getkeys_command\"
# verify a pgp/mime signature
set pgp_verify_command=\"$pgp_verify_command\"
# decrypt a pgp/mime attachment
set pgp_decrypt_command=\"$pgp_decrypt_command\"
# create a pgp/mime signed attachment
set pgp_sign_command=\"$pgp_sign_command\"
# create a pgp/mime encrypted and signed attachment
set pgp_encrypt_sign_command=\"$pgp_encrypt_sign_command\"
# create a pgp/mime encrypted attachment
set pgp_encrypt_only_command=\"$pgp_encrypt_only_command\"
# import a key into the public key ring
set pgp_import_command=\"$pgp_import_command\"
# export a key from the public key ring
set pgp_export_command=\"$pgp_export_command\"
# Pruefe key
set pgp_verify_key_command=\"$pgp_verify_key_command\"
# lese im public key ring
set pgp_list_pubring_command=\"$pgp_list_pubring_command\"
# lese im secret key ring
set pgp_list_secring_command=\"$pgp_list_secring_command\"
set forward_decrypt=\"$forward_decrypt\"

# End $M_GPG"
}
#
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
