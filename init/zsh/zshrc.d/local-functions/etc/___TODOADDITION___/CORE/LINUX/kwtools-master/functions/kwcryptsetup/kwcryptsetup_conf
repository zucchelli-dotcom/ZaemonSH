# Funktion kwcryptsetup_conf# {{{
#
# benoetigt die Funktion kwcryptsetup_config
#
# usage: kwcryptsetup_conf
#
kwcryptsetup_conf() {
	local Konf_Opt
	if [[ ${#argv} == 1 ]] ; then
		Konf_Opt="$1"
	else
		unset -- Konf_Opt
	fi
	
	# Variablen# {{{
	lv_Align=$(gettext 'Ausrichtung')
	lv_Check=$(gettext 'Pruefung')
	lv_Checkargs=$(gettext 'Pruefungsargumente')
	lv_Cipher=$(gettext 'Verschluesselung')
	lv_Discard=$(gettext 'Discard')
	lv_Hash=$(gettext 'Hash')
	lv_Header=$(gettext 'LUKS-Header')
	lv_Iteration_Time=$(gettext 'Passwort-Zeit')
	lv_Keyfile=$(gettext 'Schluesseldatei')
#	umgezogen -> kwcryptsetup
#	lv_Keyscript=$(gettext 'Schluessel Script')
	lv_Keysize=$(gettext 'Schluesselgroesse')
	lv_Keyslot=$(gettext 'Schluessel Slot')
	lv_Mountdir=$(gettext 'Mountverz.')
	lv_Noauto=$(gettext 'Noauto')
	lv_Noearly=$(gettext 'Verzoegerung')
	lv_Offset=$(gettext 'Offset')
	lv_Precheck=$(gettext 'Vorpruefung')
	lv_Quiet=$(gettext 'still')
	lv_Readonly=$(gettext 'nur lesen')
	lv_Size=$(gettext 'Groesse')
	lv_Skip=$(gettext 'Skip')
	lv_Use_Luks="$lv_Luks"
	lv_Use_Tcrypt="$lv_Tcrypt"
	#####################################
	# TODO: verstecken?, noch nicht im Menue integriert.
	lv_Tcrypt_Hidden=$(gettext 'TCRYPT verstecken')
	################################
	lv_Timeout=$(gettext 'Timeout')
	lv_Tmp=$(gettext 'Tmpfs')
	lv_Tries=$(gettext 'Wiederholungen')
	lv_Verify=$(gettext 'Passwort ueberpruefen')
	lv_Loud=$(gettext 'gespraechig')
	## }}}
	# Funktion conf_menu# {{{
	conf_menu() {
		unset -- KONF
		HASH="${HASH:-sha512}"
		KEY_SIZE="${KEY_SIZE:-256}"
		TRIES="${TRIES:-3}"
		#
		if [[ $Konf_Opt == --change ]] ; then
			#$lv_Header \"$LUKSHEADER\" $lv_Swap \"$MAKESWAP\" $lv_Tmp \"$TMPFS\" 
			KONF_MENU=($lv_Size \"$SIZE\" $lv_Cipher \"$CIPHER\"
			$lv_Hash \"$HASH\" $lv_Mountdir \"$MOUNT_PATH\"
			$lv_Offset \"$OFFSET\" \"$lv_Readonly\" \"$READONLY\"
			$lv_Discard \"$DISCARD\" \"$lv_Verify\" \"$VERIFY\"
			$lv_Iteration_Time \"$ITERATION_TIME\"
			$lv_Keyfile \"$KEY_FILE\" $lv_Keysize \"$KEY_SIZE\"
			$lv_Precheck \"$PRECHECK\" $lv_Check \"$CHECK\"
			$lv_Checkargs \"$CHECKARGS\" \"$lv_Keyscript\" \"$KEYSCRIPT\"
			$lv_Skip \"$SKIP\"
			$lv_Timeout \"$TIMEOUT\"
			$lv_Noearly \"$NOEARLY\" $lv_Noauto \"$NOAUTO\"
			$lv_Loud \"$LOUD\" $lv_Quiet \"$QUIET\"
			$lv_Tries \"$TRIES\" 
			$gv_Save \"\" $gv_Back \"\")
		elif [[ $Konf_Opt == --cont ]] ; then
			unset -- USELUKS USETCRYPT
			KONF_MENU=($lv_Size \"$SIZE\" $lv_Cipher \"$CIPHER\"
			$lv_Hash \"$HASH\" $lv_Mountdir \"$MOUNT_PATH\"
			$lv_Offset \"$OFFSET\" \"$lv_Readonly\" \"$READONLY\"
			$lv_Discard \"$DISCARD\" \"$lv_Verify\" \"$VERIFY\"
			$lv_Iteration_Time \"$ITERATION_TIME\"
			$lv_Keyfile \"$KEY_FILE\" $lv_Keysize \"$KEY_SIZE\"
			$lv_Precheck \"$PRECHECK\" $lv_Check \"$CHECK\"
			$lv_Checkargs \"$CHECKARGS\" \"$lv_Keyscript\" \"$KEYSCRIPT\"
			$lv_Skip \"$SKIP\" $lv_Swap \"$MAKESWAP\" $lv_Tmp \"$TMPFS\"
			$lv_Timeout \"$TIMEOUT\" $lv_Noearly \"$NOEARLY\"
			$lv_Noauto \"$NOAUTO\" $lv_Loud \"$LOUD\"
			$lv_Quiet \"$QUIET\"
			$lv_Tries \"$TRIES\" $gv_Save \"\" $gv_Back \"\")
		elif [[ $Konf_Opt == --part ]] ; then
			KONF_MENU=($lv_Align \"$ALIGN\" $lv_Cipher \"$CIPHER\"
			$lv_Hash \"$HASH\" $lv_Use_Luks \"$USELUKS\"
			$lv_Header \"$LUKSHEADER\" $lv_Use_Tcrypt \"$USETCRYPT\"
			$lv_Mountdir \"$MOUNT_PATH\" $lv_Offset \"$OFFSET\"
			\"$lv_Readonly\" \"$READONLY\" $lv_Discard \"$DISCARD\"
			\"$lv_Verify\" \"$VERIFY\" $lv_Iteration_Time \"$ITERATION_TIME\"
			$lv_Keyfile \"$KEY_FILE\" $lv_Keysize \"$KEY_SIZE\"
			$lv_Precheck \"$PRECHECK\" $lv_Check \"$CHECK\"
			$lv_Checkargs \"$CHECKARGS\" \"$lv_Keyscript\" \"$KEYSCRIPT\"
			$lv_Skip \"$SKIP\" $lv_Swap \"$MAKESWAP\" $lv_Tmp \"$TMPFS\"
			$lv_Timeout \"$TIMEOUT\" $lv_Noearly \"$NOEARLY\"
			$lv_Noauto \"$NOAUTO\" $lv_Loud \"$LOUD\"
			$lv_Quiet \"$QUIET\" $lv_Tries \"$TRIES\"
			\"$lv_Keyslot\" \"$KEYSLOT\" $gv_Save \"\" $gv_Back \"\")
		else
			# fertig
			KONF=yes
			KONF_MENU=($lv_Align \"$ALIGN\" $lv_Size \"$SIZE\"
			$lv_Cipher \"$CIPHER\" $lv_Hash \"$HASH\"
			$lv_Use_Luks \"$USELUKS\" $lv_Header \"$LUKSHEADER\"
			$lv_Use_Tcrypt \"$USETCRYPT\" $lv_Mountdir \"$MOUNT_PATH\"
			$lv_Offset \"$OFFSET\" \"$lv_Readonly\" \"$READONLY\" 
			$lv_Discard \"$DISCARD\" \"$lv_Verify\" \"$VERIFY\"
			$lv_Iteration_Time \"$ITERATION_TIME\"
			$lv_Keyfile \"$KEY_FILE\" $lv_Keysize \"$KEY_SIZE\"
			$lv_Precheck \"$PRECHECK\" $lv_Check \"$CHECK\"
			$lv_Checkargs \"$CHECKARGS\" \"$lv_Keyscript\" \"$KEYSCRIPT\"
			$lv_Skip \"$SKIP\" $lv_Swap \"$MAKESWAP\"
			$lv_Tmp \"$TMPFS\" $lv_Timeout \"$TIMEOUT\"
			$lv_Noearly \"$NOEARLY\" $lv_Noauto \"$NOAUTO\"
			$lv_Loud \"$LOUD\" $lv_Quiet \"$QUIET\"
			$lv_Tries \"$TRIES\" \"$lv_Keyslot\" \"$KEYSLOT\"
			$gv_Save \"\" $gv_Back \"\")
		fi
		menubox "$1" "$gv_Configuration" "$gv_Menupoint" "$KONF_MENU"
	}
	## }}}
	conf_menu
	while [ "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help conf_help
				conf_menu "${gv_Auswahl#HELP }"
				;;
			$lv_Align)
				# Ausrichtung bei RAID.# {{{
				ALIGN_MSG=$(gettext 'Geben Sie ein vielfaches von 512 Byte Sektoren ein (8 = 4096 Byte).')
				number_input "$gv_Configuration" "$ALIGN_MSG" "$ALIGN"
				if [ -n "$NUMBER" ] ; then
					ALIGN="$NUMBER"
				else
					ALIGN=""
				fi
				## }}}
				conf_menu $lv_Align
				;;
			$lv_Check)
				# Auswahl eines Prüf-Script# {{{
				FORMAT="SCRIPT"
				SUFFIX=""
				file_choice "${CHECK%/*}" only "$CHECK"
				if [ -x "$WERT" ] ; then
					CHECK="${VERZ}/${WERT##*/}"
				else
					CHECK=""
				fi
				## }}}
				conf_menu $lv_Check
				;;
			$lv_Checkargs)
				# Argumente fuer CHECK Script# {{{
				CHECKARGS_MSG=$(gettext 'Geben Sie die Argumente fuer das Pruefscript ein.')
				inputbox "$gv_Configuration" "$CHECKARGS_MSG" "$CHECKARGS"
				if [ -n "$gv_Auswahl" ] ; then
					CHECKARGS="$gv_Auswahl"
				else
					CHECKARGS=""
				fi
				## }}}
				conf_menu $lv_Checkargs
				;;
			$lv_Cipher)
				# Verschluesselung Algorithmus.# {{{
				CIPHER_MSG=$(gettext 'Geben Sie einen Algorithmus fuer die Verschluesselung ein.')
				inputbox "$gv_Configuration" "$CIPHER_MSG" "$CIPHER"
				if [ -n "$gv_Auswahl" ] ; then
					CIPHER="$gv_Auswahl"
				else
					CIPHER="aes-xts-plain"
				fi
				## }}}
				conf_menu $lv_Cipher
				;;
			$lv_Discard)
				# Soll discards benutzt werden?# {{{
				DISCARD_MSG=$(gettext 'Soll die Benutzung von Discard bei Anforderung an ein Device erlaubt werden (ja/nein)?')
				yesno "$gv_Configuration" "$DISCARD_MSG" "$DISCARD"
				if [ "$gv_Auswahl" = yes ] ; then
					DISCARD=yes
				else
					DISCARD=no
				fi
				## }}}
				conf_menu $lv_Discard
				;;
			$lv_Size)
				# Groesse des Containers eingeben.# {{{
				# Funktion no_2mb_size_msg# {{{
				no_2mb_size_msg() {
					MSG=$(gettext 'Sie muessen schon eine Groesse von mehr als 2 MByte auswaehlen.')
					msgbox "$gv_Attention" "$MSG"
					unset -- SIZE
				}
				## }}}
				SIZE_MSG=$(gettext 'Geben Sie die Groesse des Containers ein (>2MByte).')
				number_input -D "$gv_Configuration" "$SIZE_MSG" "$SIZE"
				if [ -n "$NUMBER" ] ; then
					# Laufwerksangaben in KiloByte umrechnen
					convert_drive_size "${NUMBER##*[0-9]}" "${NUMBER%%[a-zA-Z]*}"
					if [ -n "$SIZE_B" ] ; then
						if [[ "$SIZE_B" -gt 2048 ]] ; then
							SIZE="$NUMBER"
						else
							no_2mb_size_msg
						fi
					fi
				fi
				## }}}
				conf_menu $lv_Size
				;;
			$lv_Hash)
				# Soll Hash verwendet werden?# {{{
				HASH_MSG=$(gettext 'Waehlen Sie einen Hashwert fuer die Passphrase aus (Standard ist sha512).')
				HASH_MENU=($gv_None \"\" ripemd160 \"\" rmd160 \"\" rmd160compat \"\" sha256 \"\" sha384 \"\" sha512 \"\")
				# Funktion hash_menu# {{{
				hash_menu() {
					menubox "$1" "$gv_Configuration" "$HASH_MSG" "$HASH_MENU"
				}
				## }}}
				# Auswahl anbieten
				hash_menu "$HASH"
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help conf_help
							hash_menu "${gv_Auswahl#HELP }"
							;;
						$gv_None)
							unset -- HASH
							break
							;;
						*)
							# Auswahl uebernehmen
							HASH="$gv_Auswahl"
							break
							;;
					esac
				done
				## }}}
				conf_menu $lv_Hash
				;;
			$lv_Header)
				# Ein Laufwerk oder Datei für den LUKS-Header# {{{
				# auswählen oder erstellen.
				# Funktion header_menu# {{{
				HEADER_TITLE=($lv_Header)
				HEADER_MENU=($lv_File \"\" $lv_Partition \"\"
					$gv_Back \"\")
				header_menu() {
					menubox "$1" "$HEADER_TITLE" "$gv_Menupoint" "$HEADER_MENU"
				}
				## }}}
				header_menu
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help conf_help
							header_menu "${gv_Auswahl#HELP }"
							;;
						$lv_File)
							# Verzeichnis auswaehlen und Dateinamen eingeben.# {{{
							dselect "$VERZ"
							if [ -n "$VERZ" ] ; then
								dselect_check -c "$VERZ"
								if [ -n "$VERZ" ] ; then
									HEADER_MSG=$(gettext 'Geben Sie bitte einen Namen fuer die Datei ein.')
									inputbox "$HEADER_TITLE" "$HEADER_MSG"
									if [ -n "$gv_Auswahl" ] ; then
										LUKSHEADER="${VERZ}/${gv_Auswahl}"
									else
										LUKSHEADER=""
									fi
								fi
							fi
							## }}}
							header_menu $lv_File
							;;
						$lv_Partition)
							# Partitionen/LVM/RAID verschluesseln# {{{
							unset -- Parts
							disk
							partdb
							if [ -n "${PART_E[1]}" ] ; then
								# Partitionen
								if [ -n "$PART_E" ] ; then
									Parts="$Parts $PART_E"
								fi
								# RAID Arrays finden und zur Auswahl stellen.
								raid_filter -l
								# LV's finden.
								lv
								if [ -n "${LV_E[1]}" ] ; then
									Parts="$Parts $LV_E"
								fi
								if [ -n "${R_DEVS_E[1]}" ] ; then
									Parts="$Parts $R_DEVS_E"
								fi
								# Gefundene Devices zur Auswahl anbieten.
								part_choice "$Parts"
								#
								if [ -n "$WERT" ] ; then
									LUKSHEADER="$gv_Auswahl"
								else
									LUKSHEADER=""
									no_part_choice_msg
								fi
							else
								no_part_msg
							fi
							## }}}
							header_menu $lv_Partition
							;;
						$gv_Back)	break
							;;
					esac
				done
				## }}}
				conf_menu $lv_Header
				;;
			$lv_Use_Luks)
				# Soll die Erweiterung Luks verwendet werden?# {{{
				LUKS_MSG=$(gettext 'Soll die Erweiterung LUKS verwendet werden (ja/nein)?')
				yesno "$gv_Configuration" "$LUKS_MSG" "$USELUKS"
				if [ "$gv_Auswahl" = yes ] ; then
					USELUKS=yes
					USETCRYPT=no
					MAKESWAP=no
				else
					USELUKS=no
				fi
				## }}}
				conf_menu $lv_Use_Luks
				;;
			$lv_Use_Tcrypt)
				# Soll die Erweiterung Luks verwendet werden?# {{{
				TCRYPT_MSG=$(gettext 'Soll die Erweiterung TCRYPT verwendet werden (ja/nein)?')
				yesno "$gv_Configuration" "$TCRYPT_MSG" "$USETCRYPT"
				if [ "$gv_Auswahl" = yes ] ; then
					USETCRYPT=yes
					USELUKS=no
					MAKESWAP=no
				else
					USETCRYPT=no
				fi
				## }}}
				conf_menu $lv_Use_Tcrypt
				;;
			$lv_Tcrypt_Hidden)
				##################################### {{{
				# TODO: Einstellung fehlt noch
				hier_ist_noch_nichts "$lv_Tcrypt_Hidden"
				## }}}
				conf_menu $lv_Tcrypt_Hidden
				;;
			$lv_Mountdir) 
				# Mount Verzeichnis eingeben
				mount_path "$MOUNT_PATH"
				conf_menu $lv_Mountdir
				;;
			$lv_Noauto)
				# Auswahl ob beim Bootprozess das Laufwerk gemappt werden soll,# {{{
				# oder erst spaeter manuell (Ja/Nein).
				NOAUTO_MSG=$(gettext 'Soll das verschluesselte Laufwerk beim Start des Rechners ignoriert werden (ja/nein)?')
				yesno "$gv_Configuration" "$NOAUTO_MSG" "$NOAUTO"
				if [ "$gv_Auswahl" = yes ] ; then
					NOAUTO=yes
				else
					NOAUTO=no
				fi
				## }}}
				conf_menu $lv_Noauto
				;;
			$lv_Offset)
				# Offset/Versatz in Sektoren eingeben.# {{{
				OFFSET_MSG=$(gettext 'Geben Sie eine Zahl ein um wieviele Sektoren der 1. Sektor verschoben werden soll. Also ab welchem Sektor das original Laufwerk auf das verschluesselte Laufwerk abgebildet werden soll.')
				number_input "$gv_Configuration" "$OFFSET_MSG" "$OFFSET"
				if [ "$NUMBER" ] ; then
					OFFSET="$NUMBER"
				else
					OFFSET=""
				fi
				## }}}
				conf_menu $lv_Offset
				;;
			$lv_Readonly)
				# Setup Readonly?# {{{
				RO_MSG=$(gettext 'Soll das Laufwerk im Nur Lesemodus erstellt werden (ja/nein)?')
				yesno "$gv_Configuration" "$RO_MSG" "$READONLY"
				if [ "$gv_Auswahl" = yes ] ; then
					READONLY=yes
				else
					READONLY=no
				fi
				## }}}
				conf_menu $lv_Readonly
				;;
			$lv_Verify)
				# Soll die Passphrase uberprueft werden?# {{{
				PASS_VERIFY_MSG=$(gettext 'Soll die Passphrase nochmal ueberprueft werden (ja/nein)?')
				yesno "$gv_Configuration" "$PASS_VERIFY_MSG" "$VERIFY"
				if [ "$gv_Auswahl" = yes ] ; then
					VERIFY=yes
				else
					VERIFY=no
				fi
				## }}}
				conf_menu $lv_Verify
				;;
			$lv_Iteration_Time)	
				# Passwortzeit eingeben# {{{
				ITERATION_MSG=$(gettext 'Geben Sie die Zeit in Sekunden fuer den Passwort Prozess ein (Standard ist 1).')
				number_input "$gv_Configuration" "$ITERATION_MSG" "${ITERATION_TIME:-1}"
				if [ -n "$NUMBER" ] ; then
					ITERATION_TIME="$NUMBER"
				else
					ITERATION_TIME="1"
				fi
				## }}}
				conf_menu $lv_Iteration_Time
				;;
			$lv_Keyfile)
				# Schluesseldatei auswaehlen# {{{
				FORMAT=""
				SUFFIX=""
				file_choice "${KEY_FILE%/*}" only "$KEY_FILE"
				if [ -n "$WERT" ] ; then
					KEY_FILE="${VERZ}/${WERT##*/}"
				else
					KEY_FILE="none"
				fi
				## }}}
				conf_menu $lv_Keyfile
				;;
			$lv_Keysize)
				# Schluesselgroesse eingeben# {{{
				KEY_SIZE_MSG=$(gettext 'Waehlen Sie bitte die Schluesselgroesse aus (Standard ist 256).')
				KEY_SIZE_MENU=(128 \"\" 192 \"\" 256 \"\")
				menubox "$KEY_SIZE" "$gv_Configuration" "$KEY_SIZE_MSG" "$KEY_SIZE_MENU"
				while [ "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help key_size_help
							menubox "${gv_Auswahl#HELP }" "$gv_Configuration" "$KEY_SIZE_MSG" "$KEY_SIZE_MENU"
							;;
						*)	# Wert uebernehmen
							KEY_SIZE="$gv_Auswahl"
							break
							;;
					esac
				done
				## }}}
				conf_menu $lv_Keysize
				;;
			$lv_Keyscript)
				# Script auswaehlen welches die Schluesseldatei bearbeitet,# {{{
				# z.B. um eine gnupg verschluesselte Schluesseldatei
				# zu entschluesseln.
				FORMAT="SCRIPT"
				SUFFIX=""
				file_choice "${KEYSCRIPT%/*}" only "$KEYSCRIPT"
				if [ -x "$WERT" ] ; then
					KEYSCRIPT="${VERZ}/${WERT##*/}"
				else
					KEYSCRIPT=""
				fi
				## }}}
				conf_menu $lv_Keyscript
				;;
			$lv_Loud)
				# Soll loud verwendet werden?# {{{
				LOUD_MSG=$(gettext 'Soll beim starten des Laufwerks eine Warnung ausgegeben werden, wenn dieses nicht existiert (ja/nein)?')
				yesno "$gv_Configuration" "$LOUD_MSG" "$LOUD"
				if [ "$gv_Auswahl" = yes ] ; then
					LOUD=yes
				else
					LOUD=no
				fi
				## }}}
				conf_menu $lv_Loud
				;;
			$lv_Precheck)
				# Auswahl eines Prüf-Script, das vor dem öffnen# {{{
				# des Laufwerks ausgeführt wird.
				FORMAT="SCRIPT"
				SUFFIX=""
				file_choice "${PRECHECK%/*}" only "$PRECHECK"
				if [ -x "$WERT" ] ; then
					PRECHECK="${VERZ}/${WERT##*/}"
				else
					PRECHECK=""
				fi
				## }}}
				conf_menu $lv_Precheck
				;;
			$lv_Quiet)
				# Soll quiet verwendet werden?# {{{
				QUIET_MSG=$(gettext 'Soll beim starten des Laufwerks eine Warnung unterdrueckt werden, wenn dieses nicht existiert (ja/nein)?')
				yesno "$gv_Configuration" "$QUIET_MSG" "$QUIET"
				if [ "$gv_Auswahl" = yes ] ; then
					QUIET=yes
				else
					QUIET=no
				fi
				## }}}
				conf_menu $lv_Quiet
				;;
			$lv_Skip)
				# skip in Sektoren eingeben, Ueberspringen der Sektoren.# {{{
				SKIP_MSG=$(gettext 'Geben Sie die Zahl der Sektoren ein die uebersprungen werden sollen zur Berechnung des Initialisierungsvektors. Siehe Hilfe.')
				number_input "$gv_Configuration" "$SKIP_MSG" "$SKIP"
				if [ "$NUMBER" ] ; then
					SKIP="$NUMBER"
				else
					SKIP=""
				fi
				## }}}
				conf_menu $lv_Skip
				;;
			$lv_Swap)
				# Soll ein Swap Laufwerk erstellt werden?# {{{
				SWAP_MSG=$(gettext 'Soll ein verschluesseltes Swap-Laufwerk erstellt werden (ja/nein)?')
				yesno "$gv_Configuration" "$SWAP_MSG" "$MAKESWAP"
				if [ "$gv_Auswahl" = yes ] ; then
					MAKESWAP=yes
					USELUKS=no
					USETCRYPT=no
				else
					MAKESWAP=no
				fi
				## }}}
				conf_menu $lv_Swap
				;;
			$lv_Tmp)
				# Soll ein temporaeres Laufwerk erstellt werden?# {{{
				unset -- Fs_Type
				TMP_MSG=$(gettext 'Waehlen Sie ein Dateisytem fuer das zu erzeugende verschluesselte Laufwerk aus.')
				formatprogs_check
				if [ -n "${FM_Menue[1]}" ] ; then
					Fs_Type=($gv_None \"\" $FM_Menue)
					menubox "$TMPFS" "$gv_Configuration" "$TMP_MSG" "$Fs_Type"
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help share/format_help
								menubox "${gv_Auswahl#HELP }" "$gv_Configuration" "$gv_Menupoint" "$Fs_Type"
								;;
							$gv_None)
								TMPFS=""
								break
								;;
							*)
								# uebernehmen
								TMPFS="$gv_Auswahl"
								break
						esac
					done
				else
					TMPFS=""
				fi
				## }}}
				conf_menu $lv_Tmp
				;;
			$lv_Timeout)
				# Timeout eingeben fuer die Passwort Abfrage.# {{{
				TIMEOUT_MSG=$(gettext 'Geben Sie den Timeout, in Sekunden, fuer die Passwort-Abfrage ein (Standard ist 5).')
				number_input "$gv_Configuration" "$TIMEOUT_MSG" "${TIMEOUT:-5}"
				if [ "$NUMBER" ] ; then
					TIMEOUT="$NUMBER"
				else
					TIMEOUT="5"
				fi
				## }}}
				conf_menu $lv_Timeout
				;;
			$lv_Noearly)
				# Auswahl ob beim Bootprozess das Laufwerk erst spaeter erstellt# {{{
				# werden soll, z. B. nachdem LVM oder RAID Arrays erstellt worden sind
				# (Ja/Nein).
				NOEARLY_MSG=$(gettext 'Soll das verschluesselte Laufwerk beim Start des Rechners verzoegert erstellt werden, zum Beispiel nach dem erstellen von RAID Arrays (ja/nein)?')
				yesno "$gv_Configuration" "$NOEARLY_MSG" "$NOEARLY"
				if [ "$gv_Auswahl" = yes ] ; then
					NOEARLY=yes
				else
					NOEARLY=no
				fi
				## }}}
				conf_menu $lv_Noearly
				;;
			$lv_Tries)
				# Wie oft soll versucht werden, die Passphrase eingeben zu koennen.# {{{
				TRIES_MSG=$(gettext 'Geben Sie ein, wie oft die Passphrasenabfrage versucht werden soll zu wiederholen (Standard ist 3).')
				number_input "$gv_Configuration" "$TRIES_MSG" "${TRIES:-3}"
				if [ -n "$NUMBER" ] ; then
					TRIES="$NUMBER"
				else
					TRIES="3"
				fi
				## }}}
				conf_menu $lv_Tries
				;;
			$lv_Keyslot)
				# Standard Schluessel Slot auswaehlen# {{{
				KEYSLOT_MSG=$(gettext 'Waehlen Sie einen Standard Schluessel Slot aus.')
				KEYSLOT_MENU=($gv_None \"\" 0 \"\" 1 \"\" 2 \"\" 3 \"\" 4 \"\" 5 \"\" 6 \"\" 7 \"\")
				# Funktion keyslot_menu# {{{
				keyslot_menu() {
					menubox "$1" "$gv_Configuration" "$KEYSLOT_MSG" "$KEYSLOT_MENU"
				}
				## }}}
				# Auswahl anbieten
				keyslot_menu "$KEYSLOT"
				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help conf_help
							keyslot_menu "${gv_Auswahl#HELP }"
							;;
						$gv_None)
							unset -- KEYSLOT
							break
							;;
						*)
							# Auswahl uebernehmen
							KEYSLOT="$gv_Auswahl"
							break
							;;
					esac
				done
				## }}}
				conf_menu $lv_Keyslot
				;;
			$gv_Save)
				# speichern# {{{
				if [ "$KONF" = yes ] ; then
					autoload -U kwcryptsetup_config
					kwcryptsetup_config
				else
					# Einstellungen fuer das veraendern von Laufwerken.# {{{
					unset -- OPT PLAINPARAMS LUKSPARAMS LUKSFORMAT EXTRAPARAMS \
						TCRYPTPARAMS PARAMS
					if [ -n "$CIPHER" ] ; then
						OPT="${OPT},cipher=$CIPHER"
						PARAMS="$PARAMS --cipher=$CIPHER"
					fi
					if [ -n "$HASH" ] ; then
						OPT="${OPT},hash=$HASH"
						PLAINPARAMS="$PLAINPARAMS --hash=$HASH"
					fi
					if [ -n "$KEY_SIZE" ] ; then
						OPT="${OPT},size=$KEY_SIZE"
						PLAINPARAMS="$PLAINPARAMS --key-size=$KEY_SIZE"
					fi
					if [ -n "$OFFSET" ] ; then
						OPT="${OPT},offset=$OFFSET"
						PLAINPARAMS="$PLAINPARAMS --offset $OFFSET"
					fi
					if [ -n "$SKIP" ] ; then
						OPT="${OPT},skip=$SKIP"
						PLAINPARAMS="$PLAINPARAMS --skip $SKIP"
					fi
					if [ "$VERIFY" = yes ] ; then
						OPT="${OPT},verify"
					fi
					if [ "$READONLY" = yes ] ; then
						OPT="${OPT},readonly"
						PARAMS="$PARAMS --readonly"
					fi
					if [ "$DISCARD" = yes ] ; then
						OPT="${OPT},discard"
						EXTRAPARAMS="$EXTRAPARAMS --allow-discards"
					fi
					if [ "$USELUKS" = yes ] ; then
						OPT="${OPT},luks"
						if [ -n "$ALIGN" ] ; then
							LUKSFORMAT="--align-payload=$ALIGN"
						fi
						if [ -n "$HEADER" ] ; then
							LUKSPARAMS="$LUKSPARAMS --header=$LUKSHEADER"
						fi
						if [ -n "$KEYSLOT" ] ; then
							OPT="${OPT},keyslot=$KEYSLOT"
							LUKSPARAMS="$LUKSPARAMS --key-slot $KEYSLOT"
						fi
					fi
					if [ "$USETCRYPT" = yes ] ; then
						OPT="${OPT},tcrypt"
						if [ -n "$TCRYPTHIDDEN" ] ; then
							OPT="${OPT},tcypthidden"
							TCRYPTPARAMS="$TCRYPTPARAMS --tcrypt-hidden=$TCRYPTHIDDEN"
						fi
					fi
					if [ "$MAKESWAP" = yes ] && [ "$USELUKS" != yes ] && \
						[ "$USETCRYPT" != yes ] ; then
						OPT="${OPT},swap"
						PARAMS="$PARAMS --key-file=/dev/urandom"
						KEY_FILE=/dev/urandom
					fi
					if [ -n "$TMPFS" -a "$MAKESWAP" != yes ] ; then
						OPT="${OPT},tmp=$TMPFS"
					fi
					if [ -n "$PRECHECK" ] ; then
						OPT="${OPT},precheck=$PRECHECK"
					fi
					if [ -n "$CHECK" ] ; then
						OPT="${OPT},check=$CHECK"
					fi
					if [ -n "$CHECKARGS" ] ; then
						OPT="${OPT},checkargs=$CHECKARGS"
					fi
					if [ -n "$TRIES" ] ; then
						OPT="${OPT},tries=$TRIES"
						PARAMS="$PARAMS --tries=$TRIES" 
					fi
					if [ "$NOEARLY" = yes ] ; then
						OPT="${OPT},noearly"
					fi
					if [ "$NOAUTO" = yes ] ; then
						OPT="${OPT},noauto"
					fi
					if [ "$LOUD" = yes ] ; then
						OPT="${OPT},loud"
					fi
					if [ "$QUIET" = yes ] ; then
						OPT="${OPT},quiet"
					fi
					if [ "$MAKESWAP" != yes ] ; then
						if [ "$KEY_FILE" != none -a -f "$KEY_FILE" ] ; then
							PARAMS="$PARAMS --key-file=$KEY_FILE"
						else
							KEY_FILE=none
						fi
						if [ -n "$KEYSCRIPT" ] ; then
							OPT="${OPT},keyscript=$KEYSCRIPT"
						fi
					fi
					if [ -n "$ITERATION_TIME" ] ; then
						PARAMS="$PARAMS --iter-time=$ITERATION_TIME" 
					fi
					if [ -n "$TIMEOUT" ] ; then
						PARAMS="$PARAMS --timeout=$TIMEOUT" 
					fi
					OPT="${OPT#,}"
					## }}}
				fi
				## }}}
				break
				;;
			$gv_Back) 
				break
				;;
		esac
	done
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
