# Funktion (value_choice_gpt), gpt Auswahl zerpfluecken{{{
#
value_choice_gpt() {
	if [[ ${#argv} == 1 ]] ; then
		unset -- Fs_Type Fs_Type_Old SIZE SIZE_OLD Flag Ist_Part_Type L_PART_END \
			L_PART_START L_PART_SIZE L_PART_OLD_SIZE Max_Part_Start \
			Max_Part_End max_size MAX_SIZE Part_Auswahl Ist_Part_Name
		local Choice_Nr
		Choice_Nr="$1"
		Part_Auswahl=${${${(ws: :)${PART_ANZ_NR[Choice_Nr]}}[2]}//\"/}
		if [ "${NAME[Choice_Nr]}" = --${FREE}-- ] ; then
			Fs_Type="$gv_None"
			Fs_Type_Old="$Fs_Type"
			Max_Part_Start=${START_NR[Choice_Nr]}
			Max_Part_End=${END_NR[Choice_Nr]}
		elif [ "${NAME[Choice_Nr+1]}" = --${FREE}-- ] ; then
			Fs_Type=${PART_FS[Choice_Nr]}
			Fs_Type_Old="$Fs_Type"
			Max_Part_Start=${START_NR[Choice_Nr]}
			Max_Part_End=${END_NR[Choice_Nr+1]}
		else
			Fs_Type=${PART_FS[Choice_Nr]}
			Fs_Type_Old="$Fs_Type"
			Max_Part_Start=${START_NR[Choice_Nr]}
			Max_Part_End=${END_NR[Choice_Nr]}
		fi
		# ist Max_Part_End gleich DISK_CAP wird 1(MiB) abgezogen,
		# da DISK_CAP die komplette Festplattengroesse ist.
		if [[ $Max_Part_End == $DISK_CAP ]] ; then
			(( Max_Part_End = DISK_CAP -1 ))
		fi
		#
		Ist_Part_Name=${NAME[Choice_Nr]}
		L_PART_END=$Max_Part_End
		L_PART_START=$Max_Part_Start
		L_PART_SIZE=${PART_SIZE[Choice_Nr]}
		L_PART_OLD_SIZE=$L_PART_SIZE
		# Flags
		if [ ! -z `print ${${FLAG[Choice_Nr]}%%,*}` ] ; then
			Flag="${${FLAG[Choice_Nr]}%%,*} on"
		fi
		# MAX_SIZE Variable belegen und in Max_Size
		# die moegliche Groesse speichern.
		# Die Variable MAX_SIZE dient fuer die MSG
		# beim vergroessern der Partition.
		(( Max_Size = Max_Part_End-Max_Part_Start ))
		MAX_SIZE="${Max_Size}MiB"
		# vorhandene Groesse speichern
		Size=${${PART_ANZ_SIZE_NR[Choice_Nr]}%MiB}
		if [[ $Size -gt $Max_Size ]] ; then
			SIZE="$MAX_SIZE"
		else
			SIZE="${Size}MiB"
		fi
		# Die Variable SIZE_OLD dient fuer die MSG
		# beim anlegen/verkleinern der Partition.
		SIZE_OLD="$SIZE"
	else
		no_para_msg $0
	fi
}
#}}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
