#!/bin/zsh
#
# Autor: Kai Wilke <kiste@netzworkk.de> 09.06.2015
#
# Script: kwpwsafe, Frontend zur Verwaltung der Passwoerter mit dem Programm
#         pwsafe.
#
# Version: 0.1.2

# Ausführen von Befehlen auf bestimmte Signale.
# Notiz. Immer den Namen verwenden, da es auf einigen OS
# eine andere Numerierung geben kann.
#
trap 'setterm --inversescreen off ; setterm --reset ; unset -- DB_PASS ;
rm -rf $gv_WorkDir &>/dev/null' EXIT INT

gv_ScriptName=${0##*/}

# Verzeichniss in denen nach Funktionen gesucht wird
#
if [ -f /usr/local/share/kwtools/functions/sys/script_init ] ; then
	PREFIX=/usr/local
else
	PREFIX=/usr
fi
Script_init_Fpath="${PREFIX}/share/kwtools/functions/sys"
export TEXTDOMAINDIR="${PREFIX}/share/locale"
export TEXTDOMAIN="$gv_ScriptName"

if [ -z ${(M)${FPATH}##*${Script_init_Fpath}*} ] ; then
	FPATH=${Script_init_Fpath}:${FPATH}
fi

# script_init enthält die globalen Scripteinstellungen und lädt
# diese automatisch.
#
autoload -U script_init

# Scriptinitialisierung
script_init

# Pruefen ob pwsafe und expect installiert sind.
prog_check pwsafe expect
if [ -n "$NO_PROGS" ] ; then
	exit 0
fi

#
# Wenn es eine Konf.-Datei gibt einlesen.
#
read_file kwpwsaferc
if [[ -z $PASSWD_LENGTH ]] ; then
	PASSWD_LENGTH="8"
fi

# Variablen
# $gv_HomePath, da man auch mal mit sudo arbeitet.
DEFAULT_PWSAFECF="${gv_HomePath}/.pwsafe.dat"
LOCAL_PWSAFE_PATH="${gv_HomePath}/.pwsafe"
create_file -d "$LOCAL_PWSAFE_PATH"
#
lv_Db=$(gettext 'Datenbank')
lv_Create_Db=$(gettext 'Datenbank erstellen')
lv_Change_Pw_Db=$(gettext 'Passwort aendern')
lv_Data_Db=$(gettext 'Daten verwalten')
lv_Open_Db=$(gettext 'Datenbank oeffnen')
lv_Manage_Db=$(gettext 'Datenbank verwalten')
DB_MSG=$(gettext 'Waehlen Sie eine Datenbank aus.')
INCORRECT_PW_MSG=$(gettext 'Sie haben das falsche Passwort eingegeben.')

# Funktion (del_expect), schreddert die temporaere Datei expect# {{{
#
del_expect() {
	shred -uz ${gv_WorkDir}/expect &>/dev/null
}
## }}}
# Funktion (list_db), listet alle vorhandenen Datenbanken auf.# {{{
#
list_db() {
	unset -- DB_FILES DB_FILES_M DB_FILES_DEL_M
	for i in ${DEFAULT_PWSAFECF}(.N) ${LOCAL_PWSAFE_PATH}/*.dat*~*~(.N) ; {
		DB_FILES+=($i \"\")
		if [[ $i = $DEFAULT_PWSAFE_FILE ]] ; then
			DB_FILES_M+=($i \"\" on)
		else
			DB_FILES_M+=($i \"\" off)
		fi
		DB_FILES_DEL_M+=($i \"\" off)
	}
}
## }}}
# Funktion (no_db_msg), Nachricht das keine DAtenbank vorhanden ist.# {{{
no_db_msg() {
	MSG=$(gettext 'Es sind keine Datenbanken vorhanden. Sie muessen erst eine erstellen.')
	msgbox "$gv_Info" "$MSG"
}
## }}}
# Funktion (pass_input), Passwort Eingabe fuer die pwsafe Datenbank# {{{
#
# usage: pass_input DB_FILE
# DB_FILE - Datenbank Datei
#
pass_input() {
	if [ "$#" = 1 ] ; then
		DB_FILE="$1"
		PASSWD_MSG=$(gettext 'Geben Sie das Passwort fuer die Datenbank $DB_FILE ein.')
		# Passwortlaenge min. 1 Zeichen, da pwsafe, auf der Konsole,
		# keine Laenge vorschreibt.
		password "$gv_Passwd_TITLE" "$PASSWD_MSG" 1
		if [ -n "$PASSPHRASE" ] ; then
			# Passwort pruefen
			if print "$PASSPHRASE" | pwsafe -q -f $DB_FILE &>/dev/null ; then
				DB_PASS="$PASSPHRASE"
				unset -- PASSPHRASE
			else
				unset -- PASSPHRASE
				msgbox "$gv_Info" "$INCORRECT_PW_MSG"
			fi
		fi
	else
		no_para_msg $0
	fi
}
## }}}
# Funktion (read_pwsafe_data), Daten Liste einlesen# {{{
#
# usage: read_pwsafe_data DB_FILE LIST
# DB_FILE - Datenbank Datei
# LIST - Ein Eintrag der ausgewaehlt werden soll
#
read_pwsafe_data() {
	rm -f $gv_LogFile &>/dev/null
	unset -- PW_USER PW_PASSWD PW_NOTES PW_GROUP PW_NAME
	local Group Name PWSAFECF
	if [ "${#argv}" = 2 ] ; then
		if [ -f "$1" ] ; then
			# IFS Backup und auf Tab stellen
			IFSBAK="$IFS"
			IFS=$'\t'
			PWSAFECF="$1"
			Group="${2%.*}"
			Name="${2##*.}"
			print "$DB_PASS" | pwsafe --exportdb -f "$PWSAFECF" &>/dev/null | \
			grep "$Group" | grep "$Name" | \
			while read uuid group name login passwd notes ; do
				PW_GROUP="${group//\"/}"
				PW_NAME="${name//\"/}"
				PW_USER="${login//\"/}"
				PW_PASSWD="${passwd//\"/}"
				PW_NOTES="${${${notes//\012/\\012}//\015/}//\"/}"
			done
			IFS="$IFSBAK"
		else
			no_file_msg
		fi
	else
		no_para_msg $0
	fi
}
## }}}
# Funktion (read_pwsafe_entry), Daten Liste einlesen# {{{
#
# usage: read_pwsafe_entry DB_FILE
# DB_FILE - Datenbank Datei
#
read_pwsafe_entry() {
	unset -- Pw_Entry PW_ENTRY PW_ENTRY_M PW_GROUPS PW_GROUPS_E
	if [ "${#argv}" = 1 ] ; then
		if [ -f "$1" ] ; then
			PWSAFECF="$1"
			print "$DB_PASS" | pwsafe --list -q -f "$PWSAFECF" 2>/dev/null | \
				grep -v "$PWSAFECF" | \
				while read Pw_Entry ; do
					case "$Pw_Entry" in
						*[^:]*)
							PW_ENTRY+=(\"$Pw_Entry\" \"\")
							PW_ENTRY_M+=(\"$Pw_Entry\" \"\" off)
							if [ -z ${${(ws: :)${(M)${PW_GROUPS}##${Pw_Entry%.*}}}[1]} ] ; then
								PW_GROUPS_E+=(${Pw_Entry%.*} \"\")
							fi
							PW_GROUPS+=($Pw_Entry)
							;;
					esac
				done
		else
			no_file_msg
		fi
	else
		no_para_msg $0
	fi
}
## }}}
	# Funktion (create_db)# {{{
	#
	# usage: create_db
	create_db() {
		CREATE_TITLE="$lv_Create_Db"
		lv_Db_Name=$(gettext 'Datenbank-Name')
		# Funktion (incorrect_6pass_length), falsche Passwortlaenge# {{{
		incorrect_6pass_length() {
			MSG=$(gettext 'Die Laenge des/der Passworts/Passphrase muss mindestens 6 Zeichen sein.')
			msgbox "$gv_Attention" "$MSG"
		}
		## }}}
		# Funktion (create_db_menu)# {{{
		create_db_menu() {
			CREATE_DB_MENU=(\"$lv_Db_Name\" \"$CR_PWSAFE\"
			\"$gv_Passwd\" \"$DB_PASSWD1\" $gv_Save \"\")
			menubox "$1" "$CREATE_TITLE" "$gv_Menupoint" "$CREATE_DB_MENU"
		}
		## }}}
		create_db_menu
		while [ -n "$gv_Auswahl" ] ; do
			case "$gv_Auswahl" in
				HELP*)	script_help kwpwsafe_create_db_help
					create_db_menu "${gv_Auswahl#HELP }"
					;;
				$lv_Db_Name)
					# Datenbank Name eingeben# {{{
					MSG=$(gettext 'Geben Sie den Datenbank-Namen ohne Endung (.dat) ein.')
					inputbox "$lv_Db_Name" "$MSG" "${CR_PWSAFE%.dat}"
					if [ -n "$gv_Auswahl" ] ; then
						# pruefen ob diese DB schon vorhanden ist.
						if [ ! -f "${LOCAL_PWSAFE_PATH}/${gv_Auswahl}.dat" ] ; then
							CR_PWSAFE="${gv_Auswahl}.dat"
						else
							MSG=$(gettext 'Die Datenbank ${gv_Auswahl}.dat ist schon vorhanden.')
							msgbox "$gv_Info" "$MSG"
							CR_PWSAFE=""
						fi
					else
						CR_PWSAFE=""
					fi
					## }}}
					create_db_menu $lv_Db_Name
					;;
				$gv_Passwd)
					# Passwort eingeben# {{{
					# Funktion (passwd_db_menu)# {{{
					passwd_db_menu() {
						PASSWD_DB_MSG=$(gettext 'Geben Sie ein Passwort ein. Nehmen Sie am besten unterschiedliche Zeichen in Gross- und Kleinschreibung. Mit den Pfeiltasten koennen Sie zwischen den Eingabefeldern springen.')
						PASSWD_DB_MENU=(\"$gv_New_Passwd\" "1 1 \"\" 1 20 20 0 1"
						\"$gv_New_Passwd\" "2 1 \"\" 2 20 20 0 1")
						mixedform -i "$CREATE_TITLE" "$PASSWD_DB_MSG" "$PASSWD_DB_MENU"
					}
					## }}}
					passwd_db_menu
					while [ -n "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help kwpwsafe_db_help
								passwd_db_menu
								;;
							*)
								# Passwoerter pruefen und evtl. uebernehmen.# {{{
								Anz="${(w)#gv_Auswahl}"
								NPW="${${(ws: :)${=gv_Auswahl}}[1]}"
								NNPW="${${(ws: :)${=gv_Auswahl}}[2]}"
								if [ "$Anz" -eq 2 ] ; then
									if [ "$NPW" = "$NNPW" ] ; then
										Char="${(c)#NPW}"
										if [ "$Char" -ge 6 ] ; then
											password_display "$NPW"
											DB_PASSWD1="$gv_Star_Passphrase"
											unset -- gv_Star_Passphrase
											DB_PASSWD="$NPW" 
											break
										else
											# falsche Password Laenge
											incorrect_6pass_length
											passwd_db_menu
										fi
									else
										different_passwd
										passwd_db_menu
									fi
								else
									input_all_field_msg
									passwd_db_menu
								fi
								## }}}
								;;
						esac
					done
					## }}}
					create_db_menu $gv_Passwd
					;;
				$gv_Save)
					# Pruefen ob Datenbank-Name und Passwort eingegeben sind# {{{
					if [ -n "$CR_PWSAFE" -a -n "$DB_PASSWD" ] ; then
						# expect mit der Einstellungsdatei ausfuehren
						> ${gv_WorkDir}/expect <<<"#!/usr/bin/expect -f

set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {\$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- \$arg
    }
}

set db_pass \"$DB_PASSWD\"

set timeout 1
match_max 100000
stty -echo
spawn pwsafe --createdb -f ${LOCAL_PWSAFE_PATH}/${CR_PWSAFE}
expect \"Enter passphrase .*: \"
send -- \"\$db_pass\r\"
expect \"Reenter .*: \"
send -- \"\$db_pass\r\"
stty echo
expect eof"
						(export LC_ALL=C ; expect -f ${gv_WorkDir}/expect >/dev/null) || (del_expect ; prog_failure)
						# schnell die Erstellungsdatei loeschen
						del_expect
						break
					else
						MSG=$(gettext 'Sie muessen erst die Menuepunkte $lv_Db_Name und $gv_Passwd mit einem Wert belegen.')
						msgbox "$gv_Info" "$MSG"
						create_db_menu
					fi
					## }}}
					;;
			esac
		done
	}
	## }}}
# Funktion (select_db), Datenbank auswaehlen# {{{
#
select_db() {
	list_db
	if [ -n "${DB_FILES_M[1]}" ] ; then
		DB_MENU=($DB_FILES_M)
		radiolist "" "$gv_Mainmenu" "$DB_MSG" "$DB_MENU"
		while [ -n "$gv_Auswahl" ] ; do
			case "$gv_Auswahl" in
				HELP*)	script_help kwpwsafe_list_db_help
					radiolist "${gv_Auswahl#HELP }" "$gv_Mainmenu" "$DB_MSG" "$DB_MENU"
					;;
				*)	# Auswahl uebernehmen
					DB_FILE="$gv_Auswahl"
					pass_input "$DB_FILE"
					break
					;;
			esac
		done
	else
		no_db_msg
	fi
}
## }}}
# Funktion (first_check)# {{{
#
first_check() {
	DB_FILES=(${LOCAL_PWSAFE_PATH}/*.dat(.N))
	if [[ -z ${DB_FILES[1]} ]] ; then
		# DB erstellen
		create_db
		# Pruefen ob DB erstellt wurde
		if [ -n "$DB_PASSWD" -a -n "$CR_PWSAFE" ] ; then
			DB_FILE="$CR_PWSAFE"
			DB_PASS="$DB_PASSWD"
		else
			exit 0
		fi
	elif [[ -f ${DB_FILES[1]} ]] ; then
		# DB oeffnen
		select_db
		# Pruefen ob DB geoeffnet wurde
		if [[ -z $DB_PASS ]] ; then exit 0 ; fi
	fi
}
## }}}
# Funktion (main_menu)# {{{
#
MAIN_MENU=(\"$lv_Data_Db\" \"\" \"$lv_Open_Db\" \"\"
	\"$lv_Manage_Db\" \"\" $gv_Configuration \"\" $gv_Exit \"\")
main_menu() {
	menubox "$1" "$gv_Mainmenu" "$gv_Menupoint" "$MAIN_MENU"
}
## }}}

##################################################################
#
# Hauptprogramm
#
##################################################################

first_check
main_menu
while [ "$gv_Auswahl" ] ; do
	case $gv_Auswahl in
		HELP*)
    	    # Hilfe Messagebox
			script_help help
			main_menu "${gv_Auswahl#HELP }"
			;;
		$lv_Data_Db)
			# Daten abfragen, ... und bearbeiten# {{{
			autoload -U kwpwsafe_open_db
			kwpwsafe_open_db
			## }}}
			main_menu $lv_Data_Db
			;;
		$lv_Open_Db)
			# Datenbank oeffnen# {{{
			select_db
			## }}}
			main_menu $lv_Open_Db
			;;
		$lv_Manage_Db)
			# Datenbank verwalten.# {{{
			autoload -U kwpwsafe_manage_db
			kwpwsafe_manage_db
			## }}}
			main_menu $lv_Manage_Db
			;;
		$gv_Configuration)
    	    # Default Configuration# {{{
			autoload -U kwpwsafe_conf kwpwsafe_config
			kwpwsafe_conf
			## }}}
			main_menu $gv_Configuration
			;;
		$gv_Exit)	break
			;;
	esac
done	
#
exit 0
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
