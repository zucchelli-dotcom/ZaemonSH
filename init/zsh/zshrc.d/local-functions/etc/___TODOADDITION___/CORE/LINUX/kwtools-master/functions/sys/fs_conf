# Funktion fs_conf, zum managen des/der Dateisysteme# {{{
#
# usage: fs_conf
#
fs_conf() {
	###### Dateisystem Funktionen ###### {{{
	# Funktion (copy_fs), kopiert ein Dateisystem von einer Partition# {{{
	# auf eine andere.
	#
	# usage: copy_fs FS SRC DST [ SRC_SIZE ]
	# FS  - Dateisystem des Quell Laufwerks
	# SRC - Quell Laufwerks
	# DST - Ziel Laufwerks
	# SRC_SIZE - Groesse des Quell Dateisystem in MebiByte
	# SRC_SIZE wird fuer die Anzeige mittels "dd_gauge" benoetigt.
	#
	copy_fs() {
		if [[ ${#argv} -eq 4 ]] ; then
			local Dst Fs Src Src_Size
			Fs="$1"
			Src="$2"
			Dst="$3"
			Src_Size="$4"
			COPY_TITLE=$(gettext 'Partition kopieren')
			COPY_MSG=$(gettext 'Status beim kopieren von Laufwerk $Src -> $Dst.')
			case "$Fs" in
				ext[234])
					# ext* Dateisysteme kopieren# {{{
					# Src und Dst Laufwerk umounten.
					mount_check -a $Src
					if [ "$U_MOUNT" = yes ] ; then
						mount_check -a $Dst
					fi
					if [ "$U_MOUNT" = yes ] ; then
						# auf Ausfuehrbarkeit von e2image pruefen.
						prog_check e2image
						if [ -n "$PROGS" ] ; then
							e2image -ra -p "$Src" "$Dst" 2>1 | \
								progressbox "$COPY_TITLE" "$COPY_MSG" || \
								prog_failure
						fi
					fi
					## }}}
					;;
				fat16|fat32|vfat)
					# FAT Dateisysteme kopieren# {{{
					# Src und Dst Laufwerk umounten.
					mount_check -a $Src
					if [ "$U_MOUNT" = yes ] ; then
						mount_check -a $Dst
					fi
					if [ "$U_MOUNT" = yes ] ; then
						# auf Ausfuehrbarkeit von dd pruefen.
						prog_check dd
						# Src_Size wird fuer die Berechnung von dd_gauge
						# benoetigt.
						if [ -n "$PROGS" ] ; then
							dd if=${Src} of=${Dst} >/dev/null 2>$gv_LogFile &
							dd_gauge "dd if=${Src} of=${Dst}" "$Src_Size" "$COPY_MSG"  
						fi
					fi
					## }}}
					;;
				hfs|hfsplus)
					# HFS[+] Dateisysteme kopieren# {{{
					# Src und Dst Laufwerk umounten.
					mount_check -a $Src
					if [ "$U_MOUNT" = yes ] ; then
						mount_check -a $Dst
					fi
					if [ "$U_MOUNT" = yes ] ; then
						# auf Ausfuehrbarkeit von dd pruefen.
						prog_check dd
						# Src_Size wird fuer die Berechnung von dd_gauge
						# benoetigt.
						if [ -n "$PROGS" ] ; then
							dd if=${Src} of=${Dst} >/dev/null 2>$gv_LogFile &
							dd_gauge "dd if=${Src} of=${Dst}" "$Src_Size" "$COPY_MSG"  
						fi
					fi
					## }}}
					;;
				jfs)
					# JFS Dateisystem kopieren# {{{
					# Src und Dst Laufwerk umounten.
					mount_check -a $Src
					if [ "$U_MOUNT" = yes ] ; then
						mount_check -a $Dst
					fi
					if [ "$U_MOUNT" = yes ] ; then
						# auf Ausfuehrbarkeit von dd pruefen.
						prog_check dd
						if [ -n "$PROGS" ] ; then
							dd if=${Src} of=${Dst} >/dev/null 2>$gv_LogFile &
							dd_gauge "dd if=${Src} of=${Dst}" "$Src_Size" "$COPY_MSG"  
						fi
					fi
					## }}}
					;;
				ntfs)
					# NTFS Dateisystem kopieren# {{{
					# Src und Dst Laufwerk umounten.
					mount_check -a $Src
					if [ "$U_MOUNT" = yes ] ; then
						mount_check -a $Dst
					fi
					if [ "$U_MOUNT" = yes ] ; then
						# auf Ausfuehrbarkeit von ntfsclone pruefen.
						prog_check ntfsclone
						if [ -n "$PROGS" ] ; then
							# -f - egal ob Fehler kopieren.
							ntfsclone -f --overwrite $Dst $Src | \
								progressbox "$COPY_TITLE" "$COPY_MSG" || \
								prog_failure
						fi
					fi
					## }}}
					;;
				reiserfs)
					# reiserfs Dateisysteme kopieren# {{{
					# Src und Dst Laufwerk umounten.
					mount_check -a $Src
					if [ "$U_MOUNT" = yes ] ; then
						mount_check -a $Dst
					fi
					if [ "$U_MOUNT" = yes ] ; then
						# auf Ausfuehrbarkeit von dd pruefen.
						prog_check dd
						# Src_Size wird fuer die Berechnung von dd_gauge
						# benoetigt.
						if [ -n "$PROGS" ] ; then
							dd if=${Src} of=${Dst} >/dev/null 2>$gv_LogFile &
							dd_gauge "dd if=${Src} of=${Dst}" "$Src_Size" "$COPY_MSG"  
						fi
					fi
					## }}}
					;;
				reiser4)
					# reiser4 Dateisysteme kopieren# {{{
					# Src und Dst Laufwerk umounten.
					mount_check -a $Src
					if [ "$U_MOUNT" = yes ] ; then
						mount_check -a $Dst
					fi
					if [ "$U_MOUNT" = yes ] ; then
						# auf Ausfuehrbarkeit von dd pruefen.
						prog_check dd
						# Src_Size wird fuer die Berechnung von dd_gauge
						# benoetigt.
						if [ -n "$PROGS" ] ; then
							dd if=${Src} of=${Dst} >/dev/null 2>$gv_LogFile &
							dd_gauge "dd if=${Src} of=${Dst}" "$Src_Size" "$COPY_MSG"  
						fi
					fi
					## }}}
					;;
				ufs)
					# UFS Dateisysteme kopieren# {{{
					# #########################
					# TODO: ufs tools checken
					# Src und Dst Laufwerk umounten.
					mount_check -a $Src
					if [ "$U_MOUNT" = yes ] ; then
						mount_check -a $Dst
					fi
					if [ "$U_MOUNT" = yes ] ; then
						# auf Ausfuehrbarkeit von dd pruefen.
						prog_check dd
						# Src_Size wird fuer die Berechnung von dd_gauge
						# benoetigt.
						if [ -n "$PROGS" ] ; then
							dd if=${Src} of=${Dst} >/dev/null 2>$gv_LogFile &
							dd_gauge "dd if=${Src} of=${Dst}" "$Src_Size" "$COPY_MSG"  
						fi
					fi
					## }}}
					;;
				xfs)
					# XFS Dateisysteme kopieren# {{{
					# Src und Dst Laufwerk umounten.
					# Sind die FSs schon gemountet kann man sie problemlos kopieren.
					# 1. das Quell Laufwerk testen, ob es schon gemountet ist.
					if [ -n "`print ${(M)${(f)"$(< /proc/mounts)"}##(#s)${Src}[[:space:]]}`" ] ; then
						Src_Mp=${${(s: :)${(M)${(f)"$(< /proc/mounts)"}##(#s)${Src}[[:space:]]*}}[2]}
					else
						# Ins Arbeitsverz. mounten
						Work_Dir_Mt_Src="${gv_WorkDir}/${Src##*/}"
						create_file -d "$Work_Dir_Mt_Src"
						mount -t xfs "$Src" "$Work_Dir_Mt_Src" || prog_failure
						if [ "$?" = 0 ] ; then
							Src_Mp="$Work_Dir_Mt_Src"
						else
							unset -- Src_Mp
						fi
					fi
					# 2. das Ziel Laufwerk testen, ob es schon gemountet ist.
					if [ -n "`print ${(M)${(f)"$(< /proc/mounts)"}##(#s)${Dst}[[:space:]]}`" ] ; then
						Dst_Mp=${${(s: :)${(M)${(f)"$(< /proc/mounts)"}##(#s)${Dst}[[:space:]]*}}[2]}
					else
						# Ins Arbeitsverz. mounten
						Work_Dir_Mt_Dst="${gv_WorkDir}/${Dst##*/}"
						create_file -d "$Work_Dir_Mt_Dst"
						mount -t xfs "$Dst" "$Work_Dir_Mt_Dst" || prog_failure
						if [ "$?" = 0 ] ; then
							Dst_Mp="$Work_Dir_Mt_Dst"
						else
							unset -- Dst_Mp
						fi
					fi
					# xfs Filesystem kopieren und umounten.
					if [ -n "$Src_Mp" -a -n "$Dst_Mp" ] ; then
						# auf Ausfuehrbarkeit von xfsdump und xfsrestore pruefen.
						# Diese werden anstelle von xfs_copy benutzt, falls
						# die Groessenunterschiede beider Laufwerke zu gross
						# sind (man 8 xfs_copy).
						###############################
						# TODO: 1>/dev/null pruefen
						prog_check xfsdump xfsrestore
						if [ -n "$PROGS" ] ; then
							xfsdump -J - "$Src_Mp" &>/dev/null | \
								xfsrestore -J - "$Dst_Mp" 1>/dev/null | \
								progressbox "$COPY_TITLE" "$COPY_MSG" || \
								prog_failure
						fi
					else
						no_copy_fs_msg
					fi
					# ohne Frage umounten.
					if [ -n "$Work_Dir_Mt_Src" ] ; then
						mount_check -a "$Work_Dir_Mt_Src"
					fi
					# ohne Frage umounten.
					if [ -n "$Work_Dir_Mt_Dst" ] ; then
						mount_check -a "$Work_Dir_Mt_Dst"
					fi
					## }}}
					;;
				*)
					no_fs_support_msg "$Fs"
					;;
			esac
		else
			no_para_msg $0
		fi
	}
	## }}}
	# Funktion (floppy_format), Floppy mit fdformat formatieren ###### {{{
	#
	# benoetigt die Funktionen yesno, format und formatprogs_check
	#
	# usage: floppy_format "$FLOPPY"
	#
	floppy_format() {
		if [ "$#" -eq 1 ] ; then
			# pruefen, ob Programm ausfuehrbar ist.
			FTITLE=$(gettext 'Formatierung')
			prog_check fdformat
			if [ -z "$NO_PROGS" ] ; then
				Floppy="$1"
				if [ -b "$Floppy" ] ; then
					mount_check -a $Floppy
					if [[ $U_MOUNT == yes ]] ; then
						fdformat $Floppy 2>&1 | progressbox $FTITLE "$Floppy"
					fi
					while [ $? = 1 ] ; do
						MSG=$(gettext 'Es ist keine Diskette im Laufwerk. Schieben sie bitte eine rein. Wollen Sie fortfahren (ja/nein)?')
						yesno "$gv_Attention" "$MSG" ""
					    if [ "$gv_Auswahl" = yes ] ; then
					    	fdformat $Floppy 2>&1 | progressbox $FTITLE "$Floppy"
						else
					    	break
					    fi
					done
				else
	                no_block_dev_msg "$Floppy"
				fi
			fi
		else
			no_para_msg $0
		fi
	}
	## }}}
	# Funktion (format), Formatierung{{{
	#
	# benoetigt die Funktionen no_format_msg, kernel_release und load_module
	# kernel_release wird von der Funktion script_init geladen und wird von
	# load_module benoetigt.
	#
	# usage: format DEVICE [ FS ]
	# FS - optional das Filesystem mit uebergeben, wenn schon vorher bekannt
	#      durch die Funktion formatprogs_check.
	format() {
		# Funktion (mkfs_fs), erstellt das Filesystem# {{{
		#
		# usage: mkfs_fs FS
		#
		mkfs_fs() {
			FS="$1"
			case $FS in
				btrfs)
					# btrfs Dateisystem erstellen# {{{
					PROG=mkfs.${FS}
					load_module $FS
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG -f $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				exfat)
					# exfat Dateisystem erstellen.# {{{
					PROG=mkfs.${FS}
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				fat16)
					# fat16 benoetigt -F 16.# {{{
					PROG=mkfs.vfat
					load_module vfat
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG -F 16 $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				fat32)
					# fat32 benoetigt -F 32.# {{{
					PROG=mkfs.vfat
					load_module vfat
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							mkfs.vfat -F 32 $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				ext2)
					# Ist der Geraetename ein RAID Geraet, kommt der Parameter "stride"# {{{
					# mit hinzu.
					if [ "$gv_ScriptName" = kwraid ] ; then
						# Stride Size Berechnung
						raid_stride_calc $RAIDLEVEL $NRRAIDDISK $CHUNKSIZE
						if [ -n "$STRIDE_SIZE" ] ; then
							PROG_OPT="-F -b 4096 -E stride=${STRIDE_SIZE},stripe_width=${STRIPE_WIDTH}"
						else
							PROG_OPT="-F -b 4096"
						fi
					else
						PROG_OPT="-F -b 4096"
					fi
					PROG=mkfs.${FS}
					load_module $FS
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG ${=PROG_OPT} $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				ext[34])
					# Ist der Geraetename ein RAID Geraet, kommt der Parameter "stride"# {{{
					# mit hinzu.
					if [ "$gv_ScriptName" = kwraid ] ; then
						# Stride Size Berechnung
						raid_stride_calc $RAIDLEVEL $NRRAIDDISK $CHUNKSIZE
						if [ -n "$STRIDE_SIZE" ] ; then
							PROG_OPT="-F -b 4096 -E stride=${STRIDE_SIZE},stripe_width=${STRIPE_WIDTH}"
						else
							PROG_OPT="-F -b 4096"
						fi
					else
						PROG_OPT="-F -b 4096"
					fi
					PROG=mkfs.${FS}
					load_module "jbd $FS"
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG ${=PROG_OPT} $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				hfs)
					# hfs benoetigt die Option -h, sonst wird# {{{
					# ein hfs+ FS erstellt.
					PROG=mkfs.${FS}
					load_module $FS
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG -h $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				hfsplus)
					# hfs+ erstellen# {{{
					PROG=mkfs.${FS}
					load_module $FS
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				jfs)
					# Bei jfs muss ein Y an mkfs.jfs# {{{
					# uebergeben werden.
					#
					PROG=mkfs.jfs
					load_module $FS
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							echo Y | $PROG $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				ntfs)
					# ntfs benoetigt nichts weiter.# {{{
					# -f - fast
					PROG=mk${FS}
					load_module $FS
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG -f $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				reiserfs)
					# Bei reiserfs muss ein y an mkfs.reiser*# {{{
					# uebergeben werden.
					#
					PROG=mkfs.reiserfs
					load_module $FS
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							echo y | $PROG $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				reiser4)
					# Bei reiser4 muss kein y an mkfs.reiser*# {{{
					# uebergeben werden.
					#
					PROG=mkfs.reiser4
					load_module reiserfs
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG -y $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				linux-swap|swap)
					# Swap Partition erstellen# {{{
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							mkswap -f $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				ufs)
					# ufs Dateisystem erstellen.# {{{
					PROG=mkfs.${FS}
					load_module $FS
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				xfs)
					# -f fuer force, falls schon ein Dateisystem auf der Partition ist.# {{{
					PROG=mkfs.${FS}
					load_module $FS
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG -f $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
				*)
					# alles andere benoetigt nichts weiter.# {{{
					PROG=mkfs.${FS}
					load_module $FS
					for i in ${=F_PART} ; {
						# Geraet ausbinden
						mount_check -a $i
						if [[ $U_MOUNT == yes ]] ; then
							$PROG $i 2>&1 | progressbox $FTITLE "$i" || prog_failure
						fi
					}
					## }}}
					;;
			esac
		}
		## }}}
		if [[ ${#argv} -ge 1 ]] ; then
			unset -- F_FS
			F_PART="$1"
			F_FS="$2"
			MSG=$(gettext 'Soll das Laufwerk (${=F_PART}) wirklich formatiert werden? Alle Daten gehen dabei verloren. Fortfahren (ja/nein)?')
			yesno "$gv_Attention" "$MSG" ""
			if [ "$gv_Auswahl" != yes ] ; then
			   	#break
			   	return 1
			fi
			#
			if [ -z "$F_FS" ] ; then
				formatprogs_check
				#
				# Die Variable FM_Menue wird vorher von der Funktion formatprogs_check belegt.
				#
				if [ -n "${FM_Menue[1]}" ] ; then
					FTITLE=$(gettext 'Formatierung')
					FMSG=$(gettext 'Waehlen Sie ein Dateisystem aus, mit welchem das Laufwerk formatiert werden soll.')
					menubox "$FS" "$FTITLE" "$FMSG" "$FM_Menue"
					#
					while [ "$gv_Auswahl" ] ; do
						case "$gv_Auswahl" in
							HELP*)	script_help share/format_help
								menubox "${gv_Auswahl#HELP }" "$FTITLE" "$FMSG" "$FM_Menue"
								;;
							*)	
								FS=$gv_Auswahl
								mkfs_fs "$FS"
								break
								#
								;;
						esac
					done
				fi
			else
				mkfs_fs "$F_FS"
			fi
		else
			no_para_msg $0
		fi
		return 0
	}
	#}}}
	# Funktion (formatprogs_check), checkt welche Formatierungs Werkzeuge installiert sind{{{
	#
	# usage: formatprogs_check [ -p (parted)| -s (swap) ]
	# nichts - alle von den kwtools unterstuetzen FSs.
	#
	formatprogs_check() {
		unset -- FM_Menue Fs
		local Fs Anz
		integer Anz
		case "$1" in
			-p)	Fs=(btrfs exfat ext2 ext3 ext4 fat16 fat32 hfs hfsplus jfs
				linux-swap ntfs reiserfs reiser4 ufs xfs)
				;;
			-s)	Fs=swap
				;;
			*)	Fs=(btrfs exfat ext2 ext3 ext4 fat16 fat32 hfs hfsplus jfs
				ntfs reiserfs reiser4 swap ufs xfs)
				;;
		esac
		#
		Anz=0
		for i in $Fs ; {
			case $i in
				fat16|fat32)
					if [[ -x ${commands[mkfs.vfat]} ]] ; then
						(( Anz++ ))
						FM_Menue[Anz]="$i \"\""
					fi
					;;
				ntfs)
					if [[ -x ${commands[mk${i}]} ]] ; then
						(( Anz++ ))
						FM_Menue[Anz]="$i \"\""
					fi
					;;
				*swap) # Das * steht fuer Kompalitaet zu (kw)parted (linux-swap).
					if [[ -x ${commands[mk${i##*-}]} ]] ; then
						(( Anz++ ))
						FM_Menue[Anz]="$i \"\""
					fi
					;;
				*)
					if [[ -x ${commands[mkfs.${i}]} ]] ; then
						(( Anz++ ))
						FM_Menue[Anz]="$i \"\""
					fi
					;;
			esac
		}
		if [ -z "${FM_Menue[1]}" ] ; then
			MSG=$(gettext 'Sie haben keine Formatierungs Werkzeuge installiert oder der PATH ist nicht bekannt (Variable PATH).')
			msgbox "$gv_Attention" "$MSG"
		fi
	}
	#}}}
	# Funktion (raid_stride_calc), berechnet die Stride Groessen fuer das Dateisystem# {{{
	#
	# usage: Raidlevel Raidanz Chunksize
	#
	raid_stride_calc() {
		if [[ ${#argv} == 3 ]] ; then
			unset -- STRIDE_SIZE STRIPE_WIDTH
			local Raid_Level Raid_Anz Chunksize
			integer STRIDE_SIZE STRIPE_WIDTH
			Raid_Level="$1"
			Raid_Anz="$2"
			Chunksize="$3"
			case $Raid_Level in
				linear|0)
					# effektive Plattennutzung=alle
					;;
				1)
					# effektive Plattennutzung=1
					Raid_Anz=1
					;;
				[234])
					# effektive Plattennutzung=alle
					;;
				5)
					# effektive Plattennutzung=Raid_Anz-1
					(( Raid_Anz-- ))
					;;
				6)
					# effektive Plattennutzung=Raid_Anz-2
					(( Raid_Anz = Raid_Anz - 2 ))
					;;
				10)
					# effektive Plattennutzung=Raid1_Array_Anz
					;;
			esac
			(( STRIDE_SIZE = Chunksize / 4 ))
			(( STRIPE_WIDTH = STRIDE_SIZE * Raid_Anz ))
		else
			no_para_msg $0
		fi
	}
	## }}}
	# Funktion (resize_fs), um Dateisysteme zu verkleinern/vergroessern# {{{
	#
	# usage: resize_fs [+|-]SIZE DEVICE
	# + - vergroessern
	# - - verkleinern
	# SIZE - neue Groesse in Byte
	# DEVICE - Laufwerk auf dem das Dateisystem vergroessert/verkleinert
	#          werden soll
	#
	resize_fs() {
		if [[ ${#argv} == 2 ]] ; then
			# Wenn zum Beispiel das Vergroessern einer Partition
			# schief geht, wird hier abgebrochen.
			if [[ $RET == 1 ]] ; then
				unset -- RET
				return 1
			fi
			local DEV New_Size
			New_Size="$1"
			DEV="$2"
			check_fs "$DEV"
			if [ -n "$gv_Fs" ] ; then
				case "$gv_Fs" in
					btrfs)
						# BTRFS Dateisystem verkleinern/vergroessern{{{
						# Auf ausfuehrbares Programm pruefen
						prog_check btrfs
						if [ -n "$NO_PROGS" ] ; then
							return 1
						fi
						if [ "${New_Size%%[0-9]*}" = + ] ; then
							# Laufwerk mit FS btrfs wenn noetig ins Arbeitsverzeichnis mounten.
							mount_check -c $DEV
							if [[ $MOUNT == no ]] ; then
								mount -t $gv_Fs $DEV $gv_WorkDir || prog_failure
								MOUNTPOINT="$gv_WorkDir"
							fi
							# Ist das DEV schon gemountet kann man das FS problemlos
							# vergroessern.
							if [ ! -z "$MOUNTPOINT" ] ; then
								btrfs filesystem resize max $MOUNTPOINT 2>&1 | \
									progressbox $gv_Enlarge $DEV || prog_failure
							fi
							# Wurde ein Laufwerk ins Arbeitsverz. gemountet, wird es wieder
							# umountet.
							mount_check -a "$gv_WorkDir"
						else
							# Laufwerk mit FS btrfs wenn noetig ins Arbeitsverzeichnis mounten.
							mount_check -c $DEV
							if [[ $MOUNT == no ]] ; then
								mount -t $gv_Fs $DEV $gv_WorkDir || prog_failure
								MOUNTPOINT="$gv_WorkDir"
							fi
							# Ist das DEV schon gemountet kann man das FS problemlos
							# vergroessern.
							if [ ! -z "$MOUNTPOINT" ] ; then
								btrfs filesystem resize ${New_Size#-}m $MOUNTPOINT 2>&1 | \
									progressbox $gv_Enlarge $DEV || prog_failure
							fi
							# Wurde ein Laufwerk ins Arbeitsverz. gemountet, wird es wieder
							# umountet.
							mount_check -a "$gv_WorkDir"
						fi
						#}}}
						;;
					crypto*)
						# Crypto-Laufwerke muessen extra bearbeitet werden# {{{
						MSG=$(gettext 'Dieses Laufwerk ($DEV) besitzt ein Crypto-Dateisystem und muss extra bearbeitet werden. Starten Sie bitte das Script kwcryptsetup, um das Dateisystem anzupassen.')
						msgbox "$gv_Info" "$MSG"
						return 1
						## }}}
						;;
					ext[234])
						# EXT2/3/4 Dateisysteme verkleinern/vergroessern{{{
						# Auf ausfuehrbares Programm pruefen
						prog_check e2fsck resize2fs
						if [ -n "$NO_PROGS" ] ; then
							return 1
						fi
						mount_check -a "$DEV"
						if [ "$U_MOUNT" = yes ] ; then
							if [ "${New_Size%%[0-9]*}" = + ] ; then
								# Dateisystem checken
								e2fsck -f -y $DEV 2>&1 | \
									progressbox $gv_Enlarge $DEV || prog_failure
								# Dateisystem ext2/3/4 vergroessern
								resize2fs -p $DEV 2>&1 | \
									progressbox $gv_Enlarge $DEV || prog_failure
							else
								# Dateisystem checken
								e2fsck -f -y $DEV 2>&1 | \
									progressbox $gv_Reduce $DEV || prog_failure
								# Dateisystem ext2/3/4 reduzieren
								resize2fs -p $DEV ${New_Size#-}M 2>&1 | \
									progressbox $gv_Reduce $DEV || prog_failure
							fi
						fi
						#}}}
						;;
					fat16|fat32|vfat)
						# FAT16/FAT32 Dateisysteme verkleinern/vergroessern{{{
						# Auf ausfuehrbares Programm pruefen
						prog_check fatresize
						if [ -n "$NO_PROGS" ] ; then
							return 1
						fi
						mount_check -a "$DEV"
						if [ "$U_MOUNT" = yes ] ; then
							if [ "${New_Size%%[0-9]*}" = + ] ; then
								# Dateisystem vergroessern
								fatresize -s ${New_Size#+}Mi -p $DEV 2>&1 | \
									progressbox $gv_Enlarge $DEV || prog_failure
							else
								# Dateisystem reduzieren
								fatresize -s ${New_Size#-}Mi -p $DEV 2>&1 | \
									progressbox $gv_Reduce $DEV || prog_failure
							fi
						fi
						#}}}
						;;
					jfs)
						# JFS Dateisystem kann man nicht verkleinern nur vergroessern{{{
						if [ "${New_Size%%[0-9]*}" = + ] ; then
							# Laufwerk mit FS jfs wenn noetig ins Arbeitsverzeichnis mounten.
							mount_check -c $DEV
							if [[ $MOUNT == no ]] ; then
								mount -t $gv_Fs $DEV $gv_WorkDir || prog_failure
								MOUNTPOINT="$gv_WorkDir"
							fi
							# Dateisystem jfs vergroessern
							if [ ! -z "$MOUNTPOINT" ] ; then
								mount -o remount,resize $DEV || prog_failure
							fi
							# Wurde ein Laufwerk ins Arbeitsverz. gemountet, wird es wieder
							# umountet.
							mount_check -a "$gv_WorkDir"
						else
							no_reduce_fs_msg "$FS"
							return 1
						fi
						#}}}
						;;
					ntfs)
						# NTFS Dateisystem vergroessern/verkleinern{{{
						# Auf ausfuehrbares Programm pruefen
						prog_check ntfsresize
						if [ -n "$NO_PROGS" ] ; then
							return 1
						fi
						mount_check -a "$DEV"
						if [ "$U_MOUNT" = yes ] ; then
							if [ "${New_Size%%[0-9]*}" = + ] ; then
								# Dateisystem ntfs vergroessern
								echo y | ntfsresize -f -s ${New_Size#+} $DEV 2>&1 | \
									progressbox $gv_Enlarge $DEV || prog_failure
                                # NTFS Probleme checken und fixen
                                ntfsfix $DEV 2>&1 | \
									progressbox $gv_Enlarge $DEV || prog_failure
							else
								# Dateisystem ntfs reduzieren
								echo y | ntfsresize -f -s ${New_Size#-} $DEV 2>&1 | \
									progressbox $gv_Reduce $DEV || prog_failure
                                # NTFS Probleme checken und fixen
                                ntfsfix $DEV 2>&1 | \
									progressbox $gv_Reduce $DEV || prog_failure
							fi
						fi
						#}}}
						;;
					reiserfs)
						# REISERFS (nicht reiser4) Dateisysteme verkleinern/vergroessern{{{
						# Auf ausfuehrbares Programm pruefen
						prog_check resize_reiserfs
						if [ -n "$NO_PROGS" ] ; then
							return 1
						fi
						mount_check -a "$DEV"
						if [ "$U_MOUNT" = yes ] ; then
							if [ "${New_Size%%[0-9]*}" = + ] ; then
								# Dateisystem reiserfs vergroessern
								resize_reiserfs -s ${New_Size#+}M $DEV 2>&1 | \
									progressbox $gv_Enlarge $DEV || prog_failure
							else
								# Dateisystem reiserfs verkleinern
								echo y | resize_reiserfs -s ${New_Size#-}M $DEV 2>&1 | \
									progressbox $gv_Reduce $DEV || prog_failure
							fi
						fi
						#}}}
						;;
					*swap*)
						# Swap verkleinern/vergroessern{{{
						# Auf ausfuehrbares Programm pruefen
						prog_check mkswap
						if [ -n "$NO_PROGS" ] ; then
							return 1
						fi
						mount_check -a "$DEV"
						if [ "$U_MOUNT" = yes ] ; then
							if [ "${New_Size%%[0-9]*}" = + ] ; then
								# Dateisystem swap vergroessern
								mkswap -f $DEV 2>&1 | \
									progressbox $gv_Enlarge $DEV || prog_failure
								# Swap wieder einbinden
								mount_check -s $DEV
							else
								# Dateisystem swap verkleinern
								mkswap -f $DEV 2>&1 | \
									progressbox $gv_Reduce $DEV || prog_failure
								# Swap wieder einbinden
								mount_check -s $DEV
							fi
						fi
						#}}}
						;;
					*ufs)
						# UFS Dateisystem kann man nicht verkleinern nur vergroessern{{{
						# Auf ausfuehrbares Programm pruefen
						prog_check growfs.ufs
						if [ -n "$NO_PROGS" ] ; then
							return 1
						fi
						if [ "${New_Size%%[0-9]*}" = + ] ; then
							#################################
							# Info: und bei Sectorsize 4096?
							# New_Size (MiB) nach Sectoren umrechnen. 1Sector = 512Byte
							#(( Resize_Size = ${New_Size#+} * 1048576 / 512 ))
							# Dateisystem vergroessern.
							#growfs.ufs -s $Resize_Size $DEV 2>&1 | \
							growfs.ufs -s ${New_Size}m $DEV 2>&1 | \
								progressbox $gv_Enlarge $DEV || prog_failure
						else
							no_reduce_fs_msg "$FS"
							return 1
						fi
						#}}}
						;;
					xfs*)
						# XFS Dateisystem kann man nicht verkleinern nur vergroessern{{{
						# Auf ausfuehrbares Programm pruefen
						prog_check xfs_growfs
						if [ -n "$NO_PROGS" ] ; then
							return 1
						fi
						if [ "${New_Size%%[0-9]*}" = + ] ; then
							# Laufwerk mit FS xfs wenn noetig ins Arbeitsverzeichnis mounten.
							mount_check -c $DEV
							if [[ $MOUNT == no ]] ; then
								mount -t $gv_Fs $DEV $gv_WorkDir || prog_failure
								MOUNTPOINT="$gv_WorkDir"
							fi
							# Ist das DEV schon gemountet kann man das FS problemlos
							# vergroessern.
							if [ ! -z "$MOUNTPOINT" ] ; then
								xfs_growfs $MOUNTPOINT 2>&1 | \
									progressbox $gv_Enlarge $DEV || prog_failure
							fi
							# Wurde ein Laufwerk ins Arbeitsverz. gemountet, wird es wieder
							# umountet.
							mount_check -a "$gv_WorkDir"
						else
							no_reduce_fs_msg "$FS"
							return 1
						fi
						#}}}
						;;
					LVM*)
						# LVM muss extra bearbeitet werden# {{{
						MSG=$(gettext 'Dieses Laufwerk ($DEV) besitzt ein LVM und muss extra bearbeitet werden. Starten Sie bitte das Script kwlvm, um das Dateisystem anzupassen.')
						msgbox "$gv_Info" "$MSG"
						return 1
						## }}}
						;;
					*_raid_*)
						# RAID muss extra bearbeitet werden# {{{
						MSG=$(gettext 'Dieses Laufwerk ($DEV) besitzt ein SW-RAID und muss extra bearbeitet werden. Starten Sie bitte das Script kwraid, um das Dateisystem anzupassen.')
						msgbox "$gv_Info" "$MSG"
						return 1
						## }}}
						;;
					*)
						# Dieses FS wird noch nicht unterstuetzt
						mount_check -a "$DEV"
						no_fs_support_msg "$gv_Fs"
						return 1
						;;
				esac
			fi
		else
			no_para_msg $0
			return 1
		fi
		return 0
	}
	## }}}
## }}}
	###### Dateisystem Nachrichten ###### {{{
	# Funktion no_copy_fs_msg# {{{
	no_copy_fs_msg() {
		MSG=$(gettext 'Dieses Dateisystem kann man nicht kopieren, da die Groesse des Ziel Laufwerks zu klein ist.')
		msgbox "$gv_Info" "$MSG"
	}
	## }}}
	# Funktion no_fs_support_msg# {{{
	#
	# usage: no_fs_support_msg FILESYSTEM
	#
	no_fs_support_msg() {
		# Dieses FS wird noch nicht unterstuetzt
		if [ "$#" -eq 1 ] ; then
			Fs="$1"
			MSG=$(gettext 'Das Dateisystem ($Fs) wird (noch) nicht unterstuetzt.')
			msgbox "$gv_Info" "$MSG"
		else
			no_para_msg $0
		fi
	}
	## }}}
	# Funktion (no_reduce_fs_msg), Das Dateisystem kann man# {{{
	# nicht verkleinern.
	#
	# usage: no_reduce_fs_msg FS
	# FS - Dateisystem
	#
	no_reduce_fs_msg() {
		if [[ ${#argv} == 1 ]] ; then
			local Fs
			Fs="$1"
			MSG=$(gettext 'Das $Fs Dateisystem kann man nicht verkleinern.')
			msgbox "$gv_Attention" "$MSG"
			# Wurde eine Partition ins Arbeitsverz. gemountet, wird sie wieder
			# umountet.
			mount_check -c "$gv_WorkDir"
			if [[ $MOUNT == yes ]] ; then
				mount_check -a "$gv_WorkDir"
			fi
		else
			no_para_msg $0
		fi
	}
	## }}}
	## }}}
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
