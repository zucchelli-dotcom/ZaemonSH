# Funktion (kwgrub2_security), Grub2 Sicherheit einstellen# {{{
kwgrub2_security() {
	#########################################
	# Einfacher Password Schutz
	# Eintrag einfuegen
	# sed -i -e '/^menuentry /s/ {/ --users user1 {/' /etc/grub.d/30_os-prober ...
	# Eintrag loeschen
	# sed -i -e '/^menuentry /s/ --users user1 {/ {/' /etc/grub.d/30_os-prober...
	#
	# Verschluesselter Password Schutz
	# grub-mkpasswd-pbkdf2 ...
	# set superusers="drs305"
	# password_pbkdf2 drs305 <some really long alphanumeric entry ...>
	#########################################
	
	# Konfiguration einlesen
	if [ -f "$GRUB_DEFAULT_CONFFILE" ] ; then
		read_file -f "$GRUB_DEFAULT_CONFFILE"
	fi
	
	lv_Grub_Pass_User=$(gettext 'Benutzer')
	lv_Grub_Passwd=$(gettext 'Passwort')
	lv_Grub_Passwd_pbkdf2=$(gettext 'Passwort_pbkdf2')
	
	# Funktion (incorrect_8pass_length), falsche Passwortlaenge# {{{
	incorrect_8pass_length() {
		MSG=$(gettext 'Die Laenge des Passworts muss mindestens 8 Zeichen sein.')
		msgbox "$gv_Attention" "$MSG"
	}
	## }}}
	# Funktion (del_expect), schreddert die temporaere Datei expect# {{{
	#
	del_expect() {
		shred -uz ${gv_WorkDir}/expect &>/dev/null
	}
	## }}}
	# Funktion (create_exec_expect) expect mit der Einstellungsdatei ausfuehren# {{{
	create_exec_expect() {
		> ${gv_WorkDir}/expect <<<"#!/usr/bin/expect -f

set force_conservative 0  ;# set to 1 to force conservative mode even if
              ;# script wasn't run conservatively originally
if {\$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- \$arg
    }
}

set pbkdf2_pass \"$PASSWD_PBKDF2\"

set timeout -1
match_max 100000
stty -echo
spawn grub-mkpasswd-pbkdf2
expect \"Enter password: \"
send -- \"\$pbkdf2_pass\r\"
expect \"Reenter password: \"
send -- \"\$pbkdf2_pass\r\"
stty echo
expect eof"
		(export LC_ALL=C ; expect -f ${gv_WorkDir}/expect >${gv_WorkDir}/hash) || (del_expect ; unset -- PBKDF2_PASSWD ; prog_failure)
		# schnell die Erstellungsdatei schreddern
		del_expect
		# Variable loeschen
		unset -- PBKDF2_PASSWD
		#
		GRUB_PASSWD_PBKDF2=${${(M)${(f)"$(< ${gv_WorkDir}/hash)"}##*PBKDF2*}##* }
	}
	## }}}
	# Funktion (security_menu)# {{{
	security_menu() {
		SECURITY_TITLE=(${gv_Mainmenu}::${lv_Security})
		SECURITY_MENU=(\"$lv_Grub_Pass_User\" \"$GRUB_PASSWD_USER\"
		\"$lv_Grub_Passwd\" \"$GRUB_PASSWD\"
		$lv_Grub_Passwd_pbkdf2 \"$GRUB_PASSWD_PBKDF2\"
		$gv_Save \"\" $gv_Back \"\")
		menubox "$1" "$lv_Security" "$gv_Menupoint" "$SECURITY_MENU"
	}
	## }}}
	
	security_menu
	while [ "$gv_Auswahl" ] ; do
		case "$gv_Auswahl" in
			HELP*)	script_help security_help
				security_menu "${gv_Auswahl#HELP }"
				;;
			$lv_Grub_Pass_User)
				# User fuer Passwort eingeben# {{{
				GRUB_PASSWD_USER_TITLE=(${lv_Security}::${lv_Grub_Pass_User})
				GRUB_PASSWD_USER_MSG=$(gettext 'Geben Sie bitte einen oder mehrere Benutzernamen getrennnt durch ein Leerzeichen ein, welche das Bootmenue mit Passwort aendern duerfen. (z.B.. user1 user2).')
				inputbox "$GRUB_PASSWD_USER_TITLE" "$GRUB_PASSWD_USER_MSG" "$GRUB_PASSWD_USER"
				if [ -n "$gv_Auswahl" ] ; then
					GRUB_PASSWD_USER="$gv_Auswahl"
				else
					unset -- GRUB_PASSWD_USER
				fi
				## }}}
				security_menu "$lv_Grub_Pass_User"
				;;
			$lv_Grub_Passwd)
				# Klartext Passwort fuer User eingeben# {{{
				GRUB_PASSWD_TITLE=(${lv_Security}::${lv_Grub_Passwd})
				GRUB_PASSWD_MSG=$(gettext 'Geben Sie bitte ein Passwort ein. Nehmen Sie am besten unterschiedliche Zeichen in Gross- und Kleinschreibung.')
				inputbox "$GRUB_PASSWD_TITLE" "$GRUB_PASSWD_MSG" "$GRUB_PASSWD"
				if [ -n "$gv_Auswahl" ] ; then
					GRUB_PASSWD="$gv_Auswahl"
					unset -- GRUB_PASSWD_PBKDF2
				else
					unset -- GRUB_PASSWD
				fi
				## }}}
				security_menu "$lv_Grub_Passwd"
				;;
			$lv_Grub_Passwd_pbkdf2)
				# PBKDF2 Passwort erzeugen# {{{
				# Funktion (passwd_pbkdf2_menu)# {{{
				passwd_pbkdf2_menu() {
					GRUB_PASSWD_PBKDF2_TITLE=(${lv_Security}::${lv_Grub_Passwd_pbkdf2})
					GRUB_PASSWD_PBKDF2_MSG=$(gettext 'Geben Sie ein Passwort ein. Nehmen Sie am besten unterschiedliche Zeichen in Gross- und Kleinschreibung. Mit den Pfeiltasten koennen Sie zwischen den Eingabefeldern springen.')
					GRUB_PASSWD_PBKDF2_MENU=(\"$gv_New_Passwd\" "1 1 \"\" 1 20 20 0 1"
					\"$gv_New_Passwd\" "2 1 \"\" 2 20 20 0 1")
					mixedform -i "$GRUB_PASSWD_PBKDF2_TITLE" "$GRUB_PASSWD_PBKDF2_MSG" "$GRUB_PASSWD_PBKDF2_MENU"
				}
				## }}}
				passwd_pbkdf2_menu

				while [ -n "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help security_help
							passwd_pbkdf2_menu
							;;
						*)
							# Passwoerter pruefen und evtl. uebernehmen.# {{{
							Anz="${(w)#gv_Auswahl}"
							NPW="${${(ws: :)${=gv_Auswahl}}[1]}"
							NNPW="${${(ws: :)${=gv_Auswahl}}[2]}"
							if [ "$Anz" -eq 2 ] ; then
								if [ "$NPW" = "$NNPW" ] ; then
									Char="${(c)#NPW}"
									if [ "$Char" -ge 8 ] ; then
										PASSWD_PBKDF2="$NPW" 
										unset -- GRUB_PASSWD NPW NNPW
										# Nachricht das das erstellen des Passwortes dauern kann
										it_to_take_msg 
										# pbkdf2 Passwort/hash erstellen
										create_exec_expect
										break
									else
										# falsche Password Laenge
										incorrect_8pass_length
										passwd_pbkdf2_menu
									fi
								else
									different_passwd
									passwd_pbkdf2_menu
								fi
							else
								input_all_field_msg
								passwd_pbkdf2_menu
							fi
							## }}}
							;;
					esac
				done
				## }}}
				security_menu "$lv_Grub_Passwd_pbkdf2"
				;;
			$gv_Save)
				# Einstellungen speichern
				kwgrub2_config
				break
				;;
			$gv_Back)
				# back und Var loeschen# {{{
				unset -- GRUB_PASSWD_USER GRUB_PASSWD GRUB_PASSWD_PBKDF2
				## }}}
				break
				;;
		esac
	done
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
