# Funktion für RAID-Partitionen{{{
#
# usage: raiddisk [ raiddisks | sparedisks ]
# raiddisks  - schon vergebene Spare Disks herausfiltern
# sparedisks - schon vergebene RAID Disks herausfiltern
#
raiddisk() {
	if [ "$#" -eq 1 ] ; then
		Raid_Disks=$1
		local Anz Anz1
		integer Anz Anz1 PANZ
		# Funktion (free_part_m_check){{{
		free_part_m_check() {
			if [ "${#Free_Part_M[@]}" -lt 2 ] ; then
				unset -- Free_Part_M
			fi
		}
		#}}}
		# Funktion (free_part_multi_list){{{
		free_part_multi_list() {
			unset -- Free_Part_M
			if [ "`wc -l < $gv_LogFile`" -gt 1 ] ; then
				while read Line ; do
					Free_Part_M+=($Line \"\" off)
				done <"$gv_LogFile"
			else
				unset -- Free_Part_M
			fi
		}
		#}}}
		# Funktion (save_raid_part) RAID Partitionen herausfinden und abspeichern{{{
		save_raid_part() {
			rm -rf "$gv_LogFile" &>/dev/null
			create_file "$gv_LogFile"
			for i in ${=PART} ; {
				>> "$gv_LogFile" <<< "$i"
			}
		}
		#}}}
		# Funktion (free_dev_list) Device Auswahl{{{
		free_dev_list() {
			if [ ! -z "$1" ] ; then
				RAIDDISK_MENU=($1)
				RAIDDISK_TITLE=(${gv_Create}::${lv_Raiddisks})
				RAIDDISK_MSG=$(gettext 'Waehlen Sie die Laufwerke fuer ihr RAID Array aus.')
				checklist "" "$RAIDDISK_TITLE" "$RAIDDISK_MSG" "$RAIDDISK_MENU"
				while [ "$gv_Auswahl" ] ; do
					case "$gv_Auswahl" in
						HELP*)	script_help create_help
							checklist "${gv_Auswahl#HELP }" "$RAIDDISK_TITLE" "$RAIDDISK_MSG" "$RAIDDISK_MENU"
							;;
						*)	#
							# überprüfen, ob die richtige Festplatten/Partitionsanzahl
							# angegeben wurde.
							#
							PANZ=0
							for i in ${=gv_Auswahl} ; {
								(( PANZ++ ))
							}
							case $Raid_Disks in
								raiddisks)
									if [ -n "$NRRAIDDISK" ] ; then
										if [ "$NRRAIDDISK" -eq "$PANZ" ] ; then
											# Array RAIDDISKS bilden
											RAIDDISKS=($gv_Auswahl_Display)
										else
											no_raid_part_anz_msg "$NRRAIDDISK"
											unset -- RAIDDISKS
										fi
									fi
									;;
								sparedisks)
									if [ -n "$NRSPAREDISK" ] ; then
										if [ "$NRSPAREDISK" -eq "$PANZ" ] ; then
											# Array SPAREDISKS bilden
											SPAREDISKS=($gv_Auswahl_Display)
										else
											no_raid_part_anz_msg "$NRSPAREDISK"
											unset -- SPAREDISKS
										fi
									fi
									;;
							esac
							break
							;;
					esac
				done
			else
				MSG=$(gettext 'Es sind schon alle Partitionen/Arrays vergeben, oder es sind zu wenige fuer die Erstellung eines Arrays.')
				msgbox "$gv_Attention" "$MSG"
			fi
		}
		#}}}
		# Funktion (scan_md_part) scannt nach schon vergebenen RAID Partitionen{{{
		# und filtert sie heraus.
		scan_md_part() {
			# scannt nach schon vergebenen RAID Partitionen und filtert sie heraus
			# seit kernel 2.6.15 und udev muss auch .static herausgefiltert werden.
			setopt localoptions globsubst
			for p in `print -l ${(R)${(Mo)$(mdadm -D $MD_DEV 2>/dev/null)##/dev*}##*:} | while read Devs ; do
					print "$Devs"
				done` ; {
				print -l ${(Ro)${(f)"$(< $gv_LogFile)"}##($p)} >"$gv_LogFile$$"
				mv "$gv_LogFile$$" "$gv_LogFile"
			}
			raiddisk_sparedisk_filter
			# Gefundene Partitionen auflisten, sonst kommt eine Meldung
			free_part_multi_list
			#
		}
		#}}}
		# Funktion (no_raid01_10) nicht in RAID0,1,10 vergebene RAID Arrays{{{
		# herraussuchen.
		no_raid01_10() {
			unset -- R10_Ist R01_Ist
			typeset -a Free_Part_M
			if [ -n "${MD_DEV[1]}" ] ; then
				# filter vorhandene raid0,1 die nicht in raid10 vergeben sind{{{
				Anz=1
				Anz1=1
				typeset -L R10_Ist R01_Ist
				# nach RAID0,1,10 suchen
				for i in ${=MD_DEV} ; {
					R01_Ist="`print ${(M)$(mdadm -D $i)##(raid0|raid1)}`"
					R10_Ist="`print ${(M)$(mdadm -D $i)##raid10}`"
					if [ ! -z "${R01_Ist[1]}" ] ; then
						R01_Dev[Anz]="$i"
						R01_Des[Anz]="$R01_Ist"
						(( Anz++ ))
					fi
					#
					if [ ! -z "${R10_Ist[1]}" ] ; then
						R10_Dev[Anz1]="$i"
						R10_Des[Anz1]="$R10_Ist"
						(( Anz1++ ))
					fi
				}
				#}}}
				# Ist die Anzahl der RAID0,1 Arrays groesser gleich 2, wird geprueft# {{{
				# sie schon in RAID10 Arrays vergeben wurden.
				if [ ! -z "${R01_Dev[1]}" ] ; then
					Anz=0
					Anz1=1
					for i in ${=R01_Dev} ; {
						(( Anz++ ))
						if [ ! -z "${R10_Dev[1]}" ] ; then
							Ist=${(R)${(M)$(mdadm -D $R10_Dev)##/dev*}##*${i}*}
							if [ -z "$Ist" ] ; then
								R_All[Anz]="$i"
								Free_Md_M[Anz]="$i \"${R01_Des[Anz1]}\" off"
							fi
						else
							Ist=${(R)${(M)$(mdadm -D $i)##/dev*}##*/dev/md*}
							if [ -n "${Ist[1]}" ] ; then
								R_No_Ist[Anz]="$i"
							else
								R_Ist[Anz]="$i"
							fi
							R_All_Ist_M[Anz]="$i \"${R01_Des[Anz1]}\" off"
						fi
						(( Anz1++ ))
					}
					# Nochmal pruefen, ob die freien Arrays, in anderen Arrays
					# vorhanden sind.
					if [ ! -z "${R_No_Ist[1]}" ] ; then
						Anz=1
						Anz1=1
						for i in ${=R_No_Ist} ; {
							Ist=${(M)${(M)$(mdadm -D $R_Ist)##/dev*}##*${i}*}
							if [ -z "${Ist[1]}" ] ; then
								R_All[Anz1]="$i"
								Free_Md_M[Anz1]="${R_All_Ist_M[Anz]}"
								(( Anz1++ ))
							else
								(( Anz++ ))
							fi
							(( Anz++ ))
						}
					fi
				fi
				#}}}
			else
				no_raid_arrays_msg
			fi
		}
		#}}}
		# Funktion (raiddisk_sparedisk_filter){{{
		#
		raiddisk_sparedisk_filter() {
			setopt localoptions globsubst
			case "$Raid_Disks" in
				raiddisks)
					# schon vergebene Spare Disks herausfiltern
					if [ -n "$SPAREDISKS" ] ; then
						Disks="${SPAREDISKS// /|}"
						print -l ${(R)${(f)"$(< $gv_LogFile)"}##($Disks)} >"$gv_LogFile$$"
						mv "$gv_LogFile$$" "$gv_LogFile"
					fi
					;;
				sparedisks)
					# schon vergebene RAID Disks herausfiltern
					if [ -n "$RAIDDISKS" ] ; then
						Disks="${RAIDDISKS// /|}"
						print -l ${(R)${(f)"$(< $gv_LogFile)"}##($Disks)} >"$gv_LogFile$$"
						mv "$gv_LogFile$$" "$gv_LogFile"
					fi
					;;
			esac
		}
		#}}}
		case $RAIDLEVEL in
			10)
				# nicht in RAID0,1,10 vergebene RAID Arrays herraussuchen.{{{
				no_raid01_10
				if [ "${#R_All[@]}" -ge 2 ] ; then
					free_dev_list "$Free_Md_M"
				else
					MSG=$(gettext 'Es sind nicht genuegend RAID 0,1 Arrays vorhanden.')
					msgbox "$gv_Attention" "$MSG"
				fi
				#}}}
				;;
			linear|4|5|6)
				# Herausfiltern von schon vergebenen Partitionen in RAID Arrays{{{
				if [ -n "${PART[1]}" ] ; then
					save_raid_part
					scan_md_part
					free_part_m_check
					free_dev_list "$Free_Part_M"
				else
					no_raid_part_msg
				fi
				#}}}
				;;
			*)
				# Herausfiltern von schon vergebenen Partitionen/Arrays in RAID Arrays{{{
				if [ -n "${PART[1]}" ] ; then
					save_raid_part
					scan_md_part
					if [ -n "${MD_DEV[1]}" ] ; then
						# RAID Arrays die aus mehreren Arrays bestehen herausfiltern und
						no_raid01_10
						# Gibt es >2 Arrays werden sie zur Auswahl gestellt, sonst nur die
						# Partitionen
						if [ "${#R_All[@]}" -ge 2 ] ; then
							free_part_m_check
							free_dev_list "$Free_Part_M $Free_Md_M"
						else
							free_part_m_check
							free_dev_list "$Free_Part_M"
						fi
					else
						free_part_m_check
						free_dev_list "$Free_Part_M"
					fi
				else
					no_raid_part_msg
				fi
				#}}}
				;;
		esac
	else
		no_para_msg $0
	fi
}
#}}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
