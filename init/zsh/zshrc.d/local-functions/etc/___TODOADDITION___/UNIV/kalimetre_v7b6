#! /usr/bin/env /bin/bash

####################################################################################################
#																								   #
#     Kalimetre v7b6																	           #
#     CopyL00v (C) 2016, @N@TOME                                      		                       
#
#                                                                                                  #
#     Unless required by applicable law or agreed to in writing, software                          #
#     distributed under the License is distributed on an "AS IS" BASIS,                            #
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                     #
#     See the License for the specific language governing pe$RMissions and                         #
#     limitations under the License.															   #	
#																								   #
#																								   #
####################################################################################################			
#----------------------------------------------------------------------------------------------------#
#                                            TODO
#----------------------------------------------------------------------------------------------------#
# + Le dossier est vide 
# - reconnaissance de FILEMINE pour les fichiers et lance le programme approprié
# - Message en cas de permissions non accordées
# + Revenir au répertoire précédent avec retour
#----------------------------------------------------------------------------------------------------#
#                                            CONFIG
#----------------------------------------------------------------------------------------------------#
###
#
local VERSION="v7b6"
local OSTYPE="OSX"
###
#
UID_ROOT=0     # Seu$LS les utilisateurs avec un $UID valant 0 ont les droits de root.
###
# PROGRAM
E_XCD=66       # On ne peut pas changer de répertoire ?
E_NONROOT=67   # Code de sortie si non root.
E_MAUVAISARGS=65  # Argument non numérique (mauvais fo$RMat de l'argument)
###
#
LISTE_REP="Quitter $(ls -lA $ZDOT | awk '{print $9}')"

###
# Define some colors first:
#GREY=$'\033[1;30m'
GREEN=$'\033[1;32m'
YEL=$'\033[1;33m'
#red='\e[0;31m'
RED=$'\033[1;31m'
#blue='\e[0;34m'
BLUE=$'\033[1;34m'  
#cyan='\e[0;36m'
CYAN=$'\033[1;36m'
MAGENTA=$'\033[1;35m'S
NC=$'\033[0m'              # No Color
WHITE=$'\033[1'
# --> Nice. Has the same effect as using "ansi.sys" in DOS.
###
#
ECHO="/bin/echo"
LS="/bin/ls"
CP="/bin/cp"
MV="/bin/mv"
RM="/bin/rm"
NANO="/usr/bin/nano"
FILE="/usr/bin/file "
SLEEP="/bin/sleep"
CLEAR="/usr/bin/clear"
PLUTIL="/usr/bin/plutil"
EVINCE="/usr/bin/evince"
###
# Looks best on a te$RMinal with black background.....
$CLEAR

#----------------------------------------------------------------------------------------------------#
#                                          FUNCTIONS
#----------------------------------------------------------------------------------------------------#
###
#
banner () {
	$ECHO " ###################################################################################################"
	$ECHO " #                                                                                                 #"
	$ECHO " #     ${GREEN}This is ${RED}Kalimetre: ${YEL}$VERSION FOR $OSTYPE ${NC}                                                            #"
	$ECHO " #     CopyL®®v 2016, @N@TOME                                                                      #"
	$ECHO " #                                                                                                 #"
	$ECHO " #     Unless required by applicable law or agreed to in writing, software                         #"
	$ECHO " #     distributed under the License is distributed on an "AS IS" BASIS,                             #"
	$ECHO " #     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                    #"
	$ECHO " #     See the License for the specific language governing pe$RMissions and                                  #"
	$ECHO " #     limitations under the License.                                                              #"
	$ECHO " #                                                                                                 #"
	$ECHO " ###################################################################################################"
}
###
# À exécuter en tant que root, évidemment.
root () {
	if [[ "$UID" -ne "$UID_ROOT" ]]
	then
	  $ECHO "${RED}Vous devez être root pour exécuter ce script.${NC}"
	  exit $E_NONROOT
	fi  
}
###
# Teste le nb d'argument
argu () {
	if [[ $# -lt 1 ]]; then
		echo ""
		printf "%b" "Erreur nombre d'arguments incorrect.\n"
		printf "%b" "usage : monScript [Folder]\n"
		echo ""
		exit 0
	elif [[ ! -d  $1 ]]; then
		echo ""
		printf "%b" "Erreur arguments incorrect.\n"
		printf "%b" "Ce dossier n'éxiste pas.\n"
		printf "%b" "usage : monScript [Folder]\n"
		echo ""
		exit 0	
	else
		:
	fi
}
###
# Cette fonction reçoit en argument le nom d'un fichier, et
# propose les différentes actions possibles.
action_fichier () {
	local reponse
	local saisie
	$CLEAR
	banner
	local ACTUALPATH=$(pwd)/$1
	local OLDPATH=$(pwd)
	$ECHO "----------------------------------------------------"
	local ACTUALPATH=$(pwd)/$1
	$ECHO "${GREEN}Action de fichier${NC} sur :${RED}"$ACTUALPATH"${NC}"
	$ECHO "----------------------------------------------------"
	select reponse in Infos Copier Déplacer Détruire Editer Renommer Compresser Revenir; do
			case $reponse in
			Infos)
				$ECHO
				$LS -l $1
				$FILE -pkLI $1
				$ECHO
				;;
			Copier)
				$ECHO -n "Copier $1 vers ? "
				if ! read saisie ; then continue ; fi
				$CP $1 $saisie
				;;
			Déplacer)
				$ECHO -n "Nouvel emplacement pour $1 ? "
				if ! read saisie ; then continue ; fi
				$MV $1 $saisie
				break
				;;
			Détruire)
				if $RM -i $1 ; then break; fi
				;;
			Editer)
				echo $1
				local FILENAME=$1
				local FILEXT=${FILENAME#*.}
				case $FILEXT in
					plist)
						if $PLUTIL -convert xml1 -o - $1 ; then continue; fi
					;;				
					sh)
						if $NANO $1 ; then continue; fi
					;;				
					# pdf)
					# 	if $EVINCE -w $1 ; then continue; fi
					# ;;
					log)
						if $NANO -w $1 ; then continue; fi
					;;
					*)
						if $NANO -w $1 ; then continue; fi
					;;
				esac
				;;
			Renommer)
				if $ECHO "ZBOOB" ; then continue; fi
				;;
			Compresser)
				if $ECHO "ZBOOB" ; then continue; fi
				;;
			Revenir)
				$CLEAR
				cd $OLDPATH
				while liste_fichiers ; do : ; break ; done
				break
				;;
			*) 
				if [ "$REPLY" = "0" ] ; then break ; fi	
				$ECHO "$REPLY n'est pas une réponse valide"
				$ECHO
				;;
			esac
		done
}
###
# Cette fonction reçoit en argument le nom d'un fichier, et
# propose les différentes actions possibles.
action_dossier () {
	$CLEAR
	banner
	local reponse
	local saisie
	$ECHO "---------------------------------------"
	local ACTUALPATH=$(pwd)/$1
	local OLDPATH=$(pwd)
	$ECHO "${GREEN}Action de dossier sur ${NC}${RED}"$ACTUALPATH"${NC}"
	$ECHO "---------------------------------------"
	local TEST_ACTDOS=$(ls -ar $ACTUALPATH)
	select reponse in Infos Copier Déplacer Détruire Renommer Avancer Revenir
		do
			case $reponse in
			Infos)
				$ECHO
				$LS -l $1
				$ECHO
				;;
			Copier)
				$ECHO -n "Copier $1 vers ? "
				if ! read saisie ; then continue ; fi
				$CP $1 $saisie
				;;
			Déplacer)
				$ECHO -n "Nouvel emplacement pour $1 ? "
				if ! read saisie ; then continue ; fi
				$MV $1 $saisie
				break
				;;
			Détruire)
				if $RM -i $1 ; then break; fi
				;;
			Renommer)
				if $ECHO "ZBOOB" ; then continue; fi
				;;
			Avancer)
				###
			 	# Teste de répertoire vide
			 	if [[ "$TEST_ACTDOS" == "" ]]; then
			    	echo "le repertoire" $ACTUALPATH "est vide."
			    	$SLEEP 2
					cd $OLDPATH
					while liste_fichiers ; do : ; break ; done
					break
			    else
			    	$CLEAR
			    	cd $ACTUALPATH
					while liste_fichiers ; do : ; break ; done
			    	break
			    fi
			  	;;
			Revenir)
				$CLEAR
				cd $OLDPATH
				while liste_fichiers ; do : ; break ; done
				break
				;;
			*) 
				if [ "$REPLY" = "0" ] ; then break ; fi	
				$ECHO "$REPLY n'est pas une réponse valide"
				$ECHO
				;;
			esac
		done
}
###
# Cette routine affiche la liste des fichiers présents dans
# le répertoire, et invoque la fonction action_fichier si la
# saisie est correcte. Elle se te$RMine si on sélectionne "0"
liste_fichiers () {
	###
	$CLEAR
	banner
	$ECHO "---------------------------------------"
	local ROOTDIR="/"
	local ACTUALPATH=$(pwd)/$1
	local MYPWD=$(pwd)
	$ECHO "${GREEN}Répertoire actuel : ${NC}${RED}"$ACTUALPATH"${NC}"
	$ECHO "---------------------------------------"
	$ECHO ""
	$ECHO "${RED}Q${NC}) Revenir à la racine du système."
	$ECHO "${RED}R${NC}) Revenir au dossier précédent."	
	PS3='Entrer votre choix?'
	select fichier in *
	do
		$ECHO "${RED}Réponse non valide.${NC}"
		$ECHO "==> Entrez ${RED} [Q] ${NC} pour Revenir à la racine du système."
		$ECHO "==> Entrez ${RED} [R] ${NC} pour Revenir au dossier précédent."
			if [ ! -z "$fichier" ]; then
		    	if [ -d $fichier ]; then action_dossier $fichier && return 0 ;else action_fichier $fichier && return 0; fi
			return 0
			fi
			if [ "$REPLY" = "Q" ] ; then
				banner
				return 1
			fi
			if [ "$REPLY" = "R" ] ; then
				if [[ "$OLDPATH" == "" ]]; then
					return 1
				fi
				if [[ "$ACTUALPATH" ==  "//" ]]; then
					return 1
				fi
				if [[ "$OLDPATH" == "$ACTUALPATH" ]]; then
					return 1
				fi
				while [[ "$MYPWD" == "$OLDPATH" ]]; do  
					if [[ "$MYPWD" == "$ROOTDIR" ]]; then
						LOG_TARGET=""
						echo $LOG_TARGET
						return 1
					else
						local OLDPOT=$(basename ${ACTUALPATH})
	                	local RECTIPATH=${OLDPATH%%$OLDPOT}
	                		if [[ "$RECTIPATH" ==  "/" ]]; then
	                			return 1
	                		fi
						echo "++"$OLDPATH"++" && OLDPATH="$RECTIPATH"  
						$ECHO "+++++++++++++++++++++++++++++++++++++++"
						$ECHO "ROOTDIR : "$ROOTDIR
						$ECHO "pwd vaut : "$MYPWD 
						$ECHO "Ancien répertoire : "$OLDPATH
						$ECHO "Répertoire actuel : "$ACTUALPATH
						$ECHO "Path recifié : "$RECTIPATH
						$ECHO "OLDPOT : " $OLDPOT
						$ECHO "LOG_TARGET : "$LOG_TARGET
						$ECHO "LOT_TGT : "$LOT_TGT
						$ECHO "+++++++++++++++++++++++++++++++++++++++"
					break 
					fi
				done
				cd $OLDPATH
				while liste_fichiers ;  do : ; break ; done
				break
				return 0
			fi
	done
}
# Exemple de bo+ucle tant qu'une fonction réussit.
# Le deux-points dans la boucle signifie "ne rien faire"
#while liste_fichiers ; do : ; done
#----------------------------------------------------------------------------------------------------#
#                                            SCRIPT
#------------------------------------------------------------------------------------------------
#
main () { 
	PS3='Entrer votre choix?' # Invite de sélection.
	until [[ "$REPERTOIRE" == "Quitter" ]]; do
			banner
			$ECHO "${GREEN}Sélectionnez le répertoire à analyser : ${NC}" >&2
			select REPERTOIRE in $LISTE_REP; do
			local LOG_TARGET="/"$REPERTOIRE
			local LOT_TGT="/"$REPERTOIRE"/"
				if [[ "$REPERTOIRE" = "Quitter" ]]; then
					$ECHO "${RED}Analyse des répertoires terminée.${NC}"
					$SLEEP 2
					$CLEAR
					break
				elif [[ -n "$REPERTOIRE" ]]; then

					$ECHO "Vous avez choisi le numéro ${RED}$REPLY${NC},"\
						    "analyse de ${RED}$REPERTOIRE${NC}..."
						if [[ -f "$LOG_TARGET" ]]; then
							local SAVEIFS=$IFS
			                local IFS=$($ECHOn "\n\b")
							action_fichier $LOG_TARGET
							wait
							$CLEAR
							local IFS=$SAVEIFS
							break
						else
							if [[ -d "$LOG_TARGET" ]]; then
								$CLEAR
								local SAVEIFS=$IFS
			              		local IFS=$($ECHOn "\n\b")							
								cd $LOG_TARGET
								while liste_fichiers ; do : ; break ; done
								# $SLEEP 2 ##
								wait
								$CLEAR
								local IFS=$SAVEIFS
								break
							fi
						break
						fi
				else
					$ECHO "${RED}Sélection invalide !${NC}"
				fi # Fin du traitement du choix de l'utilisateur.
			break
			done # Fin de la sélection d'un répertoire
	done
	exit 0
}
#
###
#root
main
