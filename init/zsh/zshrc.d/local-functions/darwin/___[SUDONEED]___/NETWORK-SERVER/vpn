#! /usr/bin/env zsh -f

##########################################################################################
#                                                                                        #
#  ZaemonSH created by :                                                                 #
#  Zucchelli Bryan && @N@TOME && Admiral Gr@ss H0pper on Oct 13, 2016.                   #
#  Copyright (c) 2019. All rights reserved.                                              #
#  Inspired by zsh-templates-osx created by :                                            #
#  William Scott on May 11, 2007.                                                        #
#  Copyright (c) 2007. All rights reserved.                                              #
#                                                                                        #
#  This program is free software; you can redistribute it and/or modify it under         #
#  the terms of the GNU General Public License as published by the Free Software         #
#  Foundation; either version 2 of the License, or (at your option) any later version.   #
#                                                                                        #
#  This program is distributed in the hope that it will be useful, but WITHOUT           #
#  ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or                #
#  FITNESS FOR A PARTICULAR PURPOSE.                                                     #
#  See the GNU General Public License for more details.                                  #
#                                                                                        #
#  You should have received a copy of the GNU General Public License                     #
#  along with this program ; if not, write to the Free Software Foundation,              #
#  Inc., 51 Franklin Street, Fifth Floor, Boston,  MA 02110-1301 USA                     #
#                                                                                        #
#  cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html                             #
#                                                                                        #
##########################################################################################

#----------------------------------------------------------------------------------------#
#                                     DESCRIPTION
#----------------------------------------------------------------------------------------#
# vpn :
# Play VPN on CLI.

#----------------------------------------------------------------------------------------#
#                                        TODO
#----------------------------------------------------------------------------------------#
# 04/01/2018 :
#  • Add cmore options like these :


####################################################################################################
# NAME
#   importVPN.sh -- Import VPN Settings.
#
# SYNOPSIS
#   sudo importVPN.sh
#   sudo importVPN.sh <mountPoint> <computerName> <currentUsername> <vpnFilePath> <vpnInterfaceName>
#
# DESCRIPTION
#   This script will import a .networkConnect file that has been packaged and deployed to a 
#   system.
#
#   Prior to running this script, the VPN should be configured on a machine, and a
#   configuration should be created.  Once a VPN has been configured, navigate to the
#   Network pane within the System Preferences application and highlight the VPN service you
#   wish to export.  Then click the settings button near the "+" and "-" icon and select
#   "Export Configurations".  Save the file to a location like the Desktop.  Finally, create a
#   package of this file using Composer.
#
#   When deploying the package, ensure that this script has been edited so that the
#   "vpnFilePath" parameter properly points to the location of the .networkConnect file as it
#   was packaged.  Deploy the package, and run the script with a priority of "After" to import
#   the VPN settings for the user.  Please note that a user does need to be logged in while this
#   script is run.  We recommend running it via a policy triggered by "login" or "Self Service."
#
#   The VPN network interface name will remain generic unless the "vpnInterfaceName" variable is
#   specified.  Please note that the .networkConnect file does not contain the name of the
#   inteface.
#
####################################################################################################
#
# DEFINE VARIABLES & READ IN PARAMETERS
#
####################################################################################################
# HARDCODED VALUES SET HERE
# vpnFilePath=""      # Set this parameter to the path where the .networkConnect file will end up on the system.
#                     # Example: "/Library/Application Support/JAMF/vpn.networkConnect"
                    
# vpnInterfaceName="" # Set this parameter to the name that should be set for the VPN in the System Preferences pane.
#                     # Example: "Company VPN"
# # CHECK TO SEE IF A VALUE WERE PASSED IN FOR PARAMETERS $4 AND, IF SO, ASSIGN THEM
# if [ "$4" != "" ] && [ "$vpnFilePath" == "" ]; then
#     vpnFilePath=$4
# fi

# if [ "$5" != "" ] && [ "$vpnInterfaceName" == "" ]; then
#     vpnInterfaceName=$5
# fi
# ####################################################################################################
# # 
# # VARIABLE VERIFICATION FUNCTION
# #
# ####################################################################################################
# verifyVariable () {
# eval variableValue=\$$1
# if [ "$variableValue" != "" ]; then
#     echo "Variable \"$1\" value is set to: $variableValue"
# else
#     echo "Variable \"$1\" is blank.  Please assign a value to the variable."
#     exit 1
# fi
# }
# ####################################################################################################
# # 
# # SCRIPT CONTENTS - DO NOT MODIFY BELOW THIS LINE
# #
# ####################################################################################################
# # Verify Variables
# verifyVariable vpnFilePath
# # If  vpnInterfaceName is left blank, then it will not get renamed.
# #Unlock the system.preferences privilege to allow this script to apply VPN network adapter
# /usr/libexec/PlistBuddy -c "Set rights:system.preferences:class allow" /etc/authorization

# #Ensure assistive device access is enabled
# if [ -f /private/var/db/.AccessibilityAPIEnabled ];then
#         echo "Assistive Device Access is already enabled."
#     else
#         echo "Enabling Access for Assistive Devices for Script to Properly Run..."
#         /usr/bin/touch /private/var/db/.AccessibilityAPIEnabled
# fi

# #Import .networkConnect file
# echo "Importing Network Adapter..."
# /usr/bin/open "$vpnFilePath"

# #Click the "Apply" button for the user
# /usr/bin/osascript << EOF > /dev/null 2>&1

# tell application "System Events"
#     tell process "System Preferences"
#         tell window "Network"
            
#             click button "Apply"
#             click button "Show VPN status in menu bar"
#         end tell
#          end tell
# end tell

# EOF

# #Rename the interface if the variable was specified
# if [ "$vpnInterfaceName" != "" ]; then
#     echo "Renaming the VPN interface to $vpnInterfaceName..."
#     /usr/sbin/networksetup -renamenetworkservice "VPN (L2TP)" "$vpnInterfaceName"
# fi

# #Lock the system.preferences privilege
# /usr/libexec/PlistBuddy -c "Set rights:system.preferences:class user" /etc/authorization

# #Quit System Preferences
# /usr/bin/osascript << EOF > /dev/null 2>&1

# tell application "System Events"
#     tell application "System Preferences" to quit
# end tell

# EOF

# #Display Dialog
# /usr/sbin/jamf displayMessage -message "VPN Imported" -background

# #Return all network adapters
# echo "The following network adapters are present after the import:\n$(/usr/sbin/networksetup -listallnetworkservices)"
####################################################################################################

# 2020-08-03 :
# • Make completion
# • To finish.

#----------------------------------------------------------------------------------------#
#                                       CHANGES
#----------------------------------------------------------------------------------------#
# 04/01/2018 :
#  • Modify function presentation.

#----------------------------------------------------------------------------------------#
#                                       CONFIG
#----------------------------------------------------------------------------------------#
#######################
## COMMAND VARIABLES ##
#######################
local VERSION FCT_NAME

VERSION="0.0.1"
FCT_NAME="$(echo $0)"

#----------------------------------------------------------------------------------------#
#                                      FUNCTIONS
#----------------------------------------------------------------------------------------#
banner () {
     clear
     echo " ##############################################################################"
     echo " #                                                                            #"
     echo " #  ${GREEN}This is ${RED}$FCT_NAME: ${YEL}$VERSION on ${GREEN}$OSTYPE${NC}${YEL} system.${NC}"
     echo " #  CopyL®®v 2020, Zucchelli Bryan                                            #"
     echo " #                                                                            #"
     echo " #  Unless required by applicable law or agreed to in writing, software       #"
     echo " #  distributed under the License is distributed on an AS IS BASIS,           #"
     echo " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #"
     echo " #  See the License for the specific language governing permissions and       #"
     echo " #  limitations under the License.                                            #"
     echo " #                                                                            #"
     echo " ##############################################################################"
     echo ""
}

help(){
    
    echo "${RED}"
    cat<<__EOF__
    usage:  vpn [ ls | list | start | stop | status | help ]

    Examples:
        vpn ls                              # list VPN connections

        vpn start VPN                       # start vpn connection named VPN
        vpn start VPN USER                  # start a vpn connection with a given user
        vpn start VPN USER PASS             # start a vpn connection with a given user and password
        vpn start VPN USER PASS SECRET      # start a vpn connection with a given user,password, and secret

        vpn stop VPN                        # stop vpn connection named VPN
        vpn status VPN                      # status vpn connection named VPN
        
__EOF__

    echo "${NC}"
}

list_vpns(){
    scutil --nc list
}

start_vpn(){
    [ -z "$1" ] && help && exit 1;

    if [ $# -eq 4 ]; then
        # vpn user pass secret
        scutil --nc start "$1" --user "$2" --password "$3" --secret "$4"
    elif [ $# -eq 3 ]; then
        # vpn user password
        scutil --nc start "$1" --user "$2" --password "$3"
    elif [ $# -eq 2 ]; then
        # vpn user
        scutil --nc start "$1" --user "$2"
    else
        # vpn
        scutil --nc start "$1"
    fi
}

stop_vpn(){
    scutil --nc stop $1
}

vpn_status(){
    scutil --nc status $1
}

#-------------------------------------------------------------------------------------------#
#                                              SCRIPT
#-------------------------------------------------------------------------------------------#
banner
case $1 in
    help)
        help
        ;;
    ls|list)
        list_vpns
        ;;
    start)
        shift
        start_vpn "$@"
        ;;
    stop)
        [ -z "$2" ] && help && return 1;
        stop_vpn $2
        ;;
    status)
        [ -z "$2" ] && help && return 1;
        vpn_status $2
        ;;
    *)
        help
        ;;
esac

# vim: ts=4 sw=4 softtabstop=4 expandtab
