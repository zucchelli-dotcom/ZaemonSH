#!/usr/bin/env zsh -f


##########################################################################################
#                                                                                        #
#  ZaemonSH created by :                                                                 #
#  Zucchelli Bryan && @N@TOME && Admiral Gr@ss H0pper on Oct 13, 2016.                   #
#  Copyright (c) 2019. All rights reserved.                                              #
#  Inspired by zsh-templates-osx created by :                                            #
#  William Scott on May 11, 2007.                                                        #
#  Copyright (c) 2007. All rights reserved.                                              #
#                                                                                        #
#  This program is free software; you can redistribute it and/or modify it under         #
#  the terms of the GNU General Public License as published by the Free Software         #
#  Foundation; either version 2 of the License, or (at your option) any later version.   #
#                                                                                        #
#  This program is distributed in the hope that it will be useful, but WITHOUT           #
#  ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or                #
#  FITNESS FOR A PARTICULAR PURPOSE.                                                     #
#  See the GNU General Public License for more details.                                  #
#                                                                                        #
#  You should have received a copy of the GNU General Public License                     #
#  along with this program ; if not, write to the Free Software Foundation,              #
#  Inc., 51 Franklin Street, Fifth Floor, Boston,  MA 02110-1301 USA                     #
#                                                                                        #
#  cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html                             #
#                                                                                        #
##########################################################################################


#----------------------------------------------------------------------------------------#
#                                     DESCRIPTION
#----------------------------------------------------------------------------------------#
 #  2```   		╚⊙ ⊙╝
 #  2         ╚═(███)═╝
 #  2        ╚═(███)═╝
 #  2       ╚═(███)═╝
 #  2      ╚═(███)═╝
 #  2    ╚═(███)═╝
 #  2  ╚═(███)═╝
 #  2 ╚═(███)═╝
 #  2  ╚═(███)═╝
 #  2    ╚═(███)═╝
 #  2     ╚═(███)═╝
 #  2  	    ╚═(███)═╝
 #  2``		 ╚═(███)═╝

# Z_HardenMacOS v0.0.1 :
# MacOS hardening

#----------------------------------------------------------------------------------------#
#                                        TODO
#----------------------------------------------------------------------------------------#
# 22/11/2019 :


#-------------------------------------------------------------------------------------------#
#                                               NOTES
#-------------------------------------------------------------------------------------------#
# 22/11/2019 :



#----------------------------------------------------------------------------------------#
#                                       CHANGES
#----------------------------------------------------------------------------------------#
# 20/11/2019 :
# # Create this.
# 2020-03-04 :
#  • Reordering by funtions, debug, and clean
#-------------------------------------------------------------------------------------------#
#                                              CONFIG
#-------------------------------------------------------------------------------------------#
local LINEEM="______________________________________________"
local LINETI="____________________________________________________________________"

#-------------------------------------------------------------------------------------------#
#                                             FUNCTIONS
#-------------------------------------------------------------------------------------------#

banner () {
     clear
     echo " ##############################################################################"
     echo " #                                                                            #"
     echo " #  ${GREEN}This is ${RED}$FCT_NAME: ${YEL}$VERSION on ${GREEN}$OSTYPE${NC}${YEL} system.${NC}"
     echo " #  CopyL®®v 2020, Zucchelli Bryan                                            #"
     echo " #                                                                            #"
     echo " #  Unless required by applicable law or agreed to in writing, software       #"
     echo " #  distributed under the License is distributed on an AS IS BASIS,           #"
     echo " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #"
     echo " #  See the License for the specific language governing permissions and       #"
     echo " #  limitations under the License.                                            #"
     echo " #                                                                            #"
     echo " ##############################################################################"
     echo ""
}

help(){
  cat<<__EOF__
  ${RED}
    usage:  [  ]

    Examples:
                                                 # .

  ${NC}
__EOF__
}

isAdmin() {
if [[ ! $IS_ADMIN ]]; then
     echo "${WB} You are to have administrative right to run this script${NC}" && return 0
fi

}
asked() {
	  # See 'killps' for example of use.
	 echo -n "$@" '[y/n] ' ; read ans
	 case "$ans" in
	     y*|Y*) return 0 ;;
	     *) return 1 ;;
	 esac
}

title(){
        # echo "${LINETI}"
        echo -n "${NC}""${MAGENTA}$@${NC}\n"
        # echo "${LINETI}"
}

error(){
       echo -n "${WB} $@${NC}"
}

subtitle(){
        # echo " ${LINETI}"
        echo -n "${NC}""${GREEN} • $@${NC}\n"
        # echo " ${LINETI}"
}

subsubtitle() {
        echo -n "${NC}${GREEN}     ++${NC} ""${CYAN}••• $@${NC}\n" 
}

asked_subtitle() {
        # See 'killps' for example of use.
        # echo " |"
        echo -n "${NC}${GREEN}   +${NC} ""${YEL}•• $@${NC}" '[y/n] ' ; read ans
        case "$ans" in
            y|Y) return 0 ;;
            n|N)  return 1 ;;
            *)  return 13 ;;
        esac
}

## LaunchLondoncallingOnorNO# {{{
LaunchLondoncallingOnorNO(){
    if [[ $(ls /System/Library/LaunchAgents | grep ".disabled$") ]] && [[ $(ls /System/Library/LaunchAgents | grep ".disabled$") ]]; then
        # LaunchLondoncalling enable
        echo "${WB} Run `LaunchLondoncalling enable` before.${NC}"
       return 0
    else 
        echo "${WN} LaunchLondoncalling is already enable${NC}"
        return 1
    fi
    return 0
}
#}}}
## [1] LogAuditASL()   {{{
LogAuditASL () {
    echo ""
    echo ""
    title " [1] - Settings Log, Audit and ASL"
       subtitle "Configurating log"
                asked_subtitle "Disable the crash reporter"
                [[ $ans == "y" ]] && sudo defaults write com.apple.CrashReporter DialogType -string "none"
                
                asked_subtitle "Disabling diagnostic reports"
                [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.SubmitDiagInfo.plist

                asked_subtitle "Logging authentication events for 90 days"
                [[ $ans == "y" ]] && sudo perl -p -i -e 's/rotate=seq file_max=5M all_max=20M/rotate=utc file_max=5M ttl=90/g' "/etc/asl/com.apple.authd"
                
                asked_subtitle "Logging installation events for a year"
                [[ $ans == "y" ]] && sudo perl -p -i -e 's/format=bsd/format=bsd mode=0640 rotate=utc compress file_max=5M ttl=365/g' "/etc/asl/com.apple.install"

                asked_subtitle "Increasing the retention time for system.log and secure.log"
                [[ $ans == "y" ]] && sudo perl -p -i -e 's/\/var\/log\/wtmp.*$/\/var\/log\/wtmp   \t\t\t640\ \ 31\    *\t\@hh24\ \J/g' "/etc/newsyslog.conf"

                asked_subtitle "Keeping a log of kernel events for 30 days"
                [[ $ans == "y" ]] && sudo perl -p -i -e 's|flags:lo,aa|flags:lo,aa,ad,fd,fm,-all,^-fa,^-fc,^-cl|g' /private/etc/security/audit_control \
                                  && sudo perl -p -i -e 's|filesz:2M|filesz:10M|g' /private/etc/security/audit_control \
                                  && sudo perl -p -i -e 's|expire-after:10M|expire-after: 30d |g' /private/etc/security/audit_control
        subtitle "Enabling Security Auditing"
        if [[ $ans == "y" ]]; then
                if [[ "$(grep "^AUDIT" /etc/hostconfig)" ]]; then
                    if [[ -z "$(grep "^AUDIT=-YES-" /etc/hostconfig)" ]]; then

                        sudo perl -p -i -e 's|AUDIT.*$|AUDIT=-YES-|g' /etc/hostconfig
                        # sudo sed 's/^AUDIT.*$/AUDIT=-YES-/g' /etc/hostconfig > /etc/hostconfig.tmp
                        echo "\t \t\033[00;32mDone\033[0m - AUDIT=-YES in /etc/hostconfig"
                        sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.auditd.plist > /dev/null 2>&1
                        echo "\t \t\033[00;32mDone\033[0m - com.apple.auditd loaded"
                        sudo launchctl start com.apple.auditd
                        echo "\t \t\033[00;32mDone\033[0m - com.apple.auditd started"
                    # else
                    #      sudo echo AUDIT=-YES- >> /etc/hostconfig
                    fi
                fi
        fi
        subtitle "Enabling BSM Audit"
                    #############
                    ###/!\TODO ##
                    #############
                     asked_subtitle "Enabling BSM Audit"
                            ## OS X has a powerful OpenBSM auditing capability.
                            ## You can use it to monitor process execution,
                            ## network activity, and much more.
                            ## To tail audit logs, use the `praudit` utility:
                            ##    $ sudo praudit -l /dev/auditpipe
                            ##    ```
                            ##    header,201,11,execve(2),0,Thu Sep  1 12:00:00 2015, + 195 msec,exec arg,/Applications/.evilapp/rootkit,path,/Applications/.evilapp/rootkit,path,/Applications/.evilapp/rootkit,attribute,100755,root,wheel,16777220,986535,0,subject,drduh,root,wheel,root,wheel,412,100005,50511731,0.0.0.0,return,success,0,trailer,201,
                            ##    header,88,11,connect(2),0,Thu Sep  1 12:00:00 2015, + 238 msec,argument,1,0x5,fd,socket-inet,2,443,173.194.74.104,subject,drduh,root,wheel,root,wheel,326,100005,50331650,0.0.0.0,return,failure : Operation now in progress,4354967105,trailer,88
                            ##    header,111,11,OpenSSH login,0,Thu Sep  1 12:00:00 2015, + 16 msec,subject_ex,drduh,drduh,staff,drduh,staff,404,404,49271,::1,text,successful login drduh,return,success,0,trailer,111,
                            ## # ```
                            ## Edit /etc/security/audit_control and include the following lines:
                            ## dir:/var/audit
                            ## flags:all
                            ## minfree:5
                            ## naflags:lo,aa,pc,nt
                            ## policy:cnt,argv
                            ## filesz:1G
                            ## expire-after:5G
                            ## superuser-set-sflags-mask:has_authenticated,has_console_access
                            ## superuser-clear-sflags-mask:has_authenticated,has_console_access
                            ## member-set-sflags-mask:
                            ## member-clear-sflags-mask:has_authenticated
                            ## # Start a new audit trail using the adjusted configuration:
                            ## sudo audit -n
                            ## # As only new processes will be audited, the system must be restarted.

}
#}}}
## [2] SecuringSystemHardwares # {{{
SecuringSystemHardwares() {
    title " [2] - Securing system Hardware"
		subtitle "Configuring NVRAM Settings"
				asked_subtitle "Setting NVRAM Security Mode to Full."
						## Available Settings: # security-mode: “command” “full”
						## Use the following command to view the current nvram settings:
						## $ nvram -x -p
						## Use the following commands to view nvram options:
						## $ nvram -h
						## or
						## $ man nvram
                        if [[ $ans == "y" ]]; then
                                #full -> All commands except go require the security-password
                                sudo nvram security-mode="full"
                                echo "\t \t\033[00;32mDone\033[0m - NVRAM security-mode is set to full"
                        fi
						#Replace $mode-value with # “command” or “full.”
							#sudo nvram security-mode=”full”
						#Verify security-mode setting.
						#sudo nvram -x -p

						#echo "•• Enabling the MacBook Air SuperDrive on any Mac."
						#sudo nvram boot-args="mbasd=1"

				asked_subtitle "Enabling Firmware password."
                if [[ $ans == "y" ]]; then
                    echo ${RED}
                    cat << EOF
                    ###################################################################
                    # Prevent unauthorized access to the EFI of the system by setting #
                    # a firmware password.Use the Firmware Password Utility to set a  #
                    # firmware password. This will require the password to be entered #
                    # when booting into Single User, Verbose or Target Disk mode as   #
                    # well as booting into the recovery mode (command-r).			  #
                    ###################################################################
EOF
                    echo ${NC}
                fi
		subtitle "Disabling Extensions."
            #    KextLondoncalling

		subtitle "Setting kernel secure level     "
		         asked_subtitle "• Setting Kern Secure Level"
                       if [[ $ans == "y" ]]; then
                           printf "${YEL}\t \tLevel Options: 0 (Insecure) 1 (Secure) 2 or 3 (Highly secure) ${NC}[0/1/2/3] (1) ? "
                           read secoption
                           if [[ -n $secoption ]] && [[ $secoption == "0" ]]; then
                                sudo sysctl -w kern.securelevel=0 | 2>&1 | 1>/dev/null
                                echo "\t \t\033[00;32mDone\033[0m - kern.securelevel sets to $secoption"
                           fi
                           if [[ -z $secoption ]] || [[ $secoption == "1" ]]; then
                                sudo sysctl -w kern.securelevel=1 | 2>&1 | 1>/dev/null
                                echo "\t \t\033[00;32mDone\033[0m - kern.securelevel sets to $secoption"
                           fi
                           if [[ -n $secoption ]] && [[ $secoption == "2" ]]; then
                                sudo sysctl -w kern.securelevel=2 | 2>&1 | 1>/dev/null
                                echo "\t \t\033[00;32mDone\033[0m - kern.securelevel sets to $secoption"
                           fi
                           if [[ -n $secoption ]] && [[ $secoption == "3" ]]; then
                              sudo sysctl -w kern.securelevel=3 | 2>&1 | 1>/dev/null
                              echo "\t \t\033[00;32mDone\033[0m - kern.securelevel sets to $secoption"
                           fi
                       fi
		subtitle "Disk Quotas"
				asked_subtitle  "• Setting Disk Quotas"
                       if [[ -z $ans ]] || [[ $ans == "y" ]];  then
                             sudo touch /.quota.ops.user
                             sudo touch /.quota.ops.group
                             sudo quotaon -a
                             sudo edquota $USER
                             echo "\t \t\033[00;32mDone\033[0m - Disk Quotas enabled"
                       fi
					## touch /.quota.ops.user
					## touch /.quota.ops.group
					## quotaon -a
					## edquota $inuser
}
#}}}
## [3] SecuringSystemPreferences ## {{{
SecuringSystemPreferences() {
    title " [3] - Securing System Preferences"
		subtitle "Securing MobileMe Preferences ..."
			    asked_subtitle "Securing MobileMe Preferences."
                       if [[ -z $ans ]] || [[ $ans == "y" ]];  then
                                ## Default Setting:
                                ## If a MobileMe account is entered during setup, MobileMe is configured # for that account.
                                ## Use the following command to display current MobileMe settings:
                                ## $ defaults -currentHost read com.apple.<Preferenceidentifier>
                                ## Use the following command to view all current settings for currenHost: # $ defaults -currentHost read
                                ## Suggested Setting:
                                sudo defaults -currentHost write com.apple.DotMacSync ShouldSyncWithServer 1 # Disable iDisk Syncing.
                                sudo defaults -currentHost write com.apple.idisk $USER_MirrorEnabled -bool no
                       fi
		subtitle "Securing Accounts Preferences"
				asked_subtitle "Creating a login window access warning."
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText 'What you do, is the real indication of what you believe...\nYou are informed.'
				asked_subtitle "Setting automatic login to disabled..."
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults delete /Library/Preferences/com.apple.loginwindow autoLoginUser 2>/dev/null
				asked_subtitle "Disabling automatic login when FileVault is enabled..."
					    [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.loginwindow DisableFDEAutoLogin -bool true
				asked_subtitle "Disabling guest account login..."
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.loginwindow GuestEnabled -bool false
		        asked_subtitle "Automatic login as current user or "Guest" for guest login"
		        	    [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.loginwindow autoLoginUser -string `whoami`
				asked_subtitle "Setting the login options to display name and password in the login window."
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.loginwindow SHOWFULLNAME -bool yes
		        asked_subtitle "Disabling Show the Restart, Sleep, and ShutDown Buttons"
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.loginwindow PowerOffDisable -bool yes
		        asked_subtitle "Making sure there is no password hint set"
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.loginwindow RetriesUntilHint -int 0
		        asked_subtitle "Showing language menu in the top right corner of the boot screen"
		        		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.loginwindow showInputMenu -bool true
		        asked_subtitle "Revealing IP address, hostname, OS version, etc. when clicking the clock in the login window"
		        		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName
		        asked_subtitle "Disable fast user switching."
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/.GlobalPreferences MultipleSessionEnabled -bool NO
		        ####
				## Available Settings: # None
				## Change an account’s password.
				## Don’t use the following command on a computer that might have
				## other users logged in simultaneously.
				##sudo dscl . passwd /Users/$User_name $Oldpass $Newpass
		subtitle "Securing Appearance Preferences"
			    asked_subtitle  "Disabling display of recent applications."
						## Default Setting:
						## MaxAmount 10
						## Suggested Setting:
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write com.apple.recentitems Applications -dict MaxAmount 0
						## Available Settings:
						## MaxAmount 0,5,10,15,20,30,50
		subtitle "Securing Bluetooth Preferences"
				asked_subtitle "Turning Bluetooth off."
						## Default Setting: Turn Bluetooth on.
						## Suggested Setting:
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -int 0
						## Available Settings: # 0 (OFF) or 1 (On)
				asked_subtitle "Disabling Bluetooth internet connection sharing"
				  		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.Bluetooth PANServices -int 0 2>/dev/null  \
                                                           && sudo killall -HUP blued 2>/dev/null \
                                                           && echo "\t \t\033[00;32mDone\033[0m - Bluetooth internet connection sharing disabled"
				asked_subtitle "Disabling Bluetooth sharing for the current logged-in user on the current host"
                        if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                                local hardwareUUID=$(/usr/sbin/system_profiler SPHardwareDataType | grep "Hardware
                                UUID" | awk -F ": " '{print $2}' | xargs)
                                local currentUser=`ls -l /dev/console | cut -d " " -f4`
                                /usr/libexec/PlistBuddy -c "Delete :PrefKeyServicesEnabled"  /Users/$currentUser/Library/Preferences/ByHost/com.apple.Bluetooth.$hardwareUUID.plist
                                /usr/libexec/PlistBuddy -c "Add :PrefKeyServicesEnabled bool false"  /Users/$currentUser/Library/Preferences/ByHost/com.apple.Bluetooth.$hardwareUUID.plist
                        fi
		subtitle "Securing CDs & DVDs Preferences"
				 asked_subtitle "Disabling CD/DVD automatic action..."
                        if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                                ## Default Setting:
                                ## Preference file non existent: /Library/Preferences/com.apple.digihub # Blank CD: "Ask what to do"
                                ## Blank DVD: "Ask what to do"
                                ## Music CD: "Open iTunes"
                                ## Picture CD: "Open iPhoto"
                                ## Video DVD: "Open DVD Player"
                                ## Suggested Setting:
                                ## Disabling blank CD automatic action
                                sudo defaults write /Library/Preferences/com.apple.digihub com.apple.digihub.blank.cd.appeared -dict action 1
                                ## Disable music CD automatic action.
                                sudo defaults write /Library/Preferences/com.apple.digihub com.apple.digihub.cd.music.appeared -dict action 1
                                ## Disable picture CD automatic action.
                                sudo defaults write /Library/Preferences/com.apple.digihub com.apple.digihub.cd.picture.appeared -dict action 1
                                ## Disable blank DVD automatic action.
                                sudo defaults write /Library/Preferences/com.apple.digihub com.apple.digihub.blank.dvd.appeared -dict action 1
                                ## Disable video DVD automatic action.
                                sudo defaults write /Library/Preferences/com.apple.digihub com.apple.digihub.dvd.video.appeared -dict action 1
                                ## Available Settings:
                                ## action 1 = "Ignore"
                                ## action 2 = "Ask what to do"
                                ## action 5 = "Open other application" # action 6 = "Run script"
                                ## action 100 = "Open Finder"
                                ## action 101 = "Open itunes"
                                ## action 102 = "Open Disk Utility"
                                ## action 105 = "Open DVD Player"
                                ## action 106 = "Open iDVD"
                                ## action 107 = "Open iPhoto"
                                ## action 109 = "Open Front Row"
                       fi
		subtitle "Securing Date & Time Preferences"
				asked_subtitle "Setting time zone..."
                       if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                       ### Time Zone: Set time zone automatically using current location
                       ## Default Setting:  NTP Server: time.apple.com
                       ## Suggested Setting: Set the NTP server.
                       # server time.apple.com
                       # server time.euro..apple.com
                                sudo  sh -c "echo server time.euro.apple.com >> /etc/ntp.conf"
                       fi
				## Available Settings: NTP Server: Any valid NTP server _ Time Zone: /usr/share/zoneinfo
                ## or more occurancy sudo systemsetup -listtimezones
				asked_subtitle "Setting the date and time...."
							## sudo systemsetup -settimezone $Time_Zone
							[[ -z $ans ]] || [[ $ans == "y" ]] && sudo systemsetup -settimezone "Europe/Paris" >/dev/null
				asked_subtitle "Enabling Network Time Synchronization via NTP...."
                       if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                           if [[ "$(grep "^TIMESYNC" /etc/ntp.conf)" ]]; then
                                if [[ -z "$(grep "^TIMESYNC=-YES-" /etc/hostconfig)" ]]; then
                                        ## Edit /private/etc/hostconfig and change TIMESYNC to YES.
							            ## Configure the desired NTP server in /private/etc/ntp.conf through a corresponding
                                       	## server entry. Restart the NTP daemon.
                                        sudo perl -p -i -e 's|AUDIT.*$|AUDIT=-YES-|g' /etc/ntp.conf
							            sudo launchctl load -w /System/Library/LaunchDaemons/org.ntp.ntpd.plist
                                        echo "\t \t\033[00;32mDone\033[0m - TIMESYNC=-YES in /etc/ntp.conf"
 					            fi
                           fi
                       fi
		subtitle "Securing Desktop & Screen Saver Preferences"
				asked_subtitle "Setting idle time for screen saver..."
							## Default Setting:
							## None
							## Suggested Setting:
                       if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                                #sudo defaults -currentHost write com.apple.screensaver idleTime -int XX
                            	printf "\t \tEnter inactivity interval period (<=900): "
                             	read period
                             	sudo defaults -currentHost write com.apple.screensaver idleTime -int $period
                                echo "\t \t\033[00;32mDone\033[0m - Inactivity internal period set to $period"
                       fi
				###
				asked_subtitle "Setting host corner to activate screen saver..."
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.dock.wvous-corner_code- corner -int 5
				###
				asked_subtitle "Setting modifier key to 0 wvous-corner_code-modifierr..."
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.dock.wvous-corner_code- modifier -int 0
						## Available Settings:
						## Corner options:
						## wvous-bl-corner (bottom-left) # wvous-br-corner(bottom-right) # wvous-tl-corner (top-left)
						## wvous-tr-corner (top-right)
				###
				asked_subtitle "Always asking for password"
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write com.apple.screensaver askForPassword -int 1 \
						&& sudo defaults write com.apple.screensaver askForPasswordDelay -int 0
		subtitle "Securing Dock Preferences                "
				asked_subtitle "Setting automatically hide and show Dock..."
						## None
                        # Suggested Setting:
                        # Automatically hide and show Dock.
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.dock autohide -bool YES
                        # Available Settings: # autohide -bool YES # autohide -bool NO
		subtitle "Securing Energy Saver Preferences         "
                        if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                        #### Set standby delay to 24 hours (default is 1 hour)
                        #### http://www.cultofmac.com/221392/quick-hack-speeds-up-retina-macbooks-wake-from-sleep-os-x-tips/
                        #echo ""
                        #echo "Speeding up wake from sleep to 24 hours from an hour"
                        #sudo pmset -a standbydelay 86400


                        ### By default during stand-by memeory are kept powered on, this is prone to forensics acquisition of your memory. As stated in man
                        ## pmset:
                        ## hibernatemode supports values of 0, 3, or 25. Whether or not a hibernation
                        ## image gets written is also dependent on the values of standby and
                        ## autopoweroff
                        ## For example, on desktops that support standby a hibernation image will be
                        ## written after the specified standbydelay time. To disable hibernation
                        ## images completely, ensure hibernatemode standby and autopoweroff are all
                        ## set to 0.
                        ## hibernatemode = 0 by default on desktops. The system will not back memory
                        ## up to persistent storage. The system must wake from the contents of memory;
                        ## the system will lose context on power loss. This is, historically,
                        ## plain old sleep.
                        ## hibernatemode = 3 by default on portables. The system will store a copy
                        ## of memory to persistent storage (the disk), and will power memory during
                        ## sleep. The system will wake from memory, unless a power loss forces it to
                        ## restore from hibernate image.
                        ## hibernatemode = 25 is only settable via pmset. The system will store a
                        ## copy of memory to persistent storage (the disk), and will remove power to
                        ## memory. The system will restore from disk image. If you want "hibernation"
                        ## - slower sleeps, slower wakes, and better battery life, you should
                        ## use this setting.
                        ## It is suggested to power off memory at stand-by with the following command:
                        #sudo pmset hibernatemode 25
                        ## You can also turn hibernate off by using the following command: #
                        ## sudo pmset hibernatemode
                        # Default Setting:
                        # None
                        # Suggested Setting:
                        
                                subsubtitle  "Disabling computer sleep..."
                                        sudo pmset -a sleep 0
                                subsubtitle "Enabling hard disk sleep"
                                        sudo pmset -a disksleep 1
                                subsubtitle "Disabling Wake for Ethernet network administrator access."
                                        sudo pmset -a womp 0
                                subsubtitle "Disabling Restart automatically after power failure."
                                        sudo pmset -a autorestart 0
                                        # Available Settings: # 0 (OFF) or 1 (ON)
                                subsubtitle "Erasing computer sleep image..."
                                        sudo rm /private/var/vm/sleepimage
                                subsubtitle "Creating a zero-byte file instead…"
                                        sudo touch -f /private/var/vm/sleepimage
                                subsubtitle "...and make sure it can’t be rewritten."
                                        sudo chflags uchg /private/var/vm/sleepimage
                        fi

		subtitle "Securing Exposé & Spaces Preferences.     "
				asked_subtitle "Disabling Dashboard..."
                        # Default Setting: Enabled
                        # Suggested Setting: Disable dashboard.
                        # [[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.dashboard.advisory.fetch.plist
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write com.apple.dashboard mcx-disabled -boolean YES
                        # Available Settings: # Enabled or Disabled
		subtitle "Securing Network Preferences."
			#echo "•• Disabling IPv6..."
            #           # Default Setting: Enabled
            #           # Suggested Setting: Disable IPv6.
            #           sudo networksetup -setv6off "Ethernet"
            #           # Available Settings: AirPort || Bluetooth || Ethernet || FireWire.
            #           # echo "SAY NO AMIGO"
            #           # printf "\tDisable IPv6 [y/n] (y) ? "
            #           # read ipvseis
            #           # if [ -z $ipvseis ] || [ $ipvseis == "y" ]
            #           # then
            #           #     networksetup -listnetworkserviceorder | grep "Hardware Port" | sed 's/(Hardware Port: //' | sed 's/,.*//' | \
            #           #     while read i
            #           #         do
            #           #             networksetup -setv6off "$i"
            #           #         done
            #           #     echo "\t \t\033[00;32mDone\033[0m - IPv6 Network interfaces set off"
            #           # fi
            #echo "•• Diabling wifi captive portal..."
            #           # When OS X connects to new networks, it **probes** the network and launches a Captive Portal
            #           # assistant utility if connectivity can't be determined.
            #           # An attacker could trigger the utility and direct a Mac to a site with malware without user
            #           # interaction, so it's best to disable this feature and log in to captive portals using your
            #           # regular Web browser, provided you have first disable any custom dns and/or proxy settings.
            #           sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.captive.control Active -bool false
            #echo "•• Reoving Bluetooth PAN on the System Preferences Network control panel..."
            #           # Similar to remove Bluetooth PAN on the System Preferences Network control panel
            #           sudo networksetup -removenetworkservice "Bluetooth PAN"

#n			echo "•• Seting the system **HTTP**/**HTTPS** proxy for your active network interface..."
            #           # Set the system **HTTP** proxy for your active network interface `127.0.0.1` and `8118`
            #           # (This can be done through **System Preferences > Network > Advanced > Proxies**):
            #           sudo networksetup -setwebproxy "Ethernet" 127.0.0.1 8118
            #           sudo networksetup -setsecurewebproxy "Ethernet" 127.0.0.1 8118
            #echo "•• Setting Dns server..."
            #           sudo networksetup -setdnsservers "Ethernet" 127.0.0.1
		subtitle "Securing Print & Fax Preferences."
				asked_subtitle "Disabling Printer sharing and efax ..."
                        if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                                ## Default Setting:
                                ## Disabled
                                ## Suggested Setting:
                                ## Disable the receiving of faxes.
                                # sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.efax.plist # Disable printer sharing.
                                local TEMP_FILE="$(mktemp)"
                                sudo cp /etc/cups/cupsd.conf $TEMP_FILE
                                if grep "Port 631" /etc/cups/cupsd.conf
                                then
                                     sudo sed "/^Port 631.*/s//Listen localhost:631/g" $TEMP_FILE > /etc/
                                     cups/cupsd.conf
                                else
                                    subsubtitle "Printer Sharing not on"
                                fi
                                ## Available Settings: # Enabled or Disabled
                        fi
		subtitle "Securing Security Preferences."
				## Default Setting:
				## Required Password Wake: Disabled # Automatic Login: Disabled
				## Password Unlock Preferences: Disabled
				## Secure Virtual Memory is Enabled on Portable computer and is Disabled on Desktop computers.
				## IR remote control: Enabled
				## FileVault: Disabled
			    ## Suggested Setting:
				asked_subtitle "Enabling Require password to wake this computer from sleep or screen saver ..."
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults -currentHost write com.apple.screensaver askForPassword -int 1 \
							                               && sudo defaults write /Library/Preferences/.GlobalPreferences com.apple.userspref.DisableAutoLogin -bool yes
				asked_subtitle "Disabling Unauthorized Administrative Access for Sessions Locked Through Screensaver ..."
                echo '###/!\TODO'
				#############
		        ###/!\TODO ## OLD
		        #############
                ### Disable Unauthorized Administrative Access for Sessions Locked Through Screensaver
                ## In /etc/authorization edit the section system.login.screensaver as follows:
                ## <key>system.login.screensaver</key>
                ## <dict>
                ## <key>class</key>
                ## <string>rule</string>
                ## <key>comment</key>
                ## <string>The owner can unlock the screensaver.</string>
                ## <key>rule</key>
                ## <string>authenticate-session-owner-or-group</string>
                ## Go to the rules section and add the following element:
                ## <key>authenticate-session-owner-or-group</key>
                ## <dict>
                ## <key>allow-root</key>
                ## <false/>
                ## <key>class</key>
                ## <string>user</string>
                ## <key>comment</key>
                ## <string>your comment</string>
                ## <key>group</key>
                ## <string>MAC-ADMIN-GROUP</string>
                ## <key>session-owner</key>
                ## <true/>
                ## <key>shared</key>
                ## <false/>
                ## </dict>
				asked_subtitle "Requiring password to unlock each System Preference pane ..."
				#############
		        ###/!\TODO ## OLD
		        #############
                ### Require password to unlock each System Preference pane.
                ## Edit the /etc/authorization file using a text editor.
                ## Find <key>system.preferences<key>.
                ## Then find <key>shared<key>.
                ## Then replace <true/> with <false/>.
                asked_subtitle "Disabling automatic login ..."
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/.GlobalPreferences com.apple.autologout.AutoLogOutDelay -int 0
                asked_subtitle "Disabling the “Are you sure you want to open this application?” dialog ..."
                        [[ -z $ans ]] || [[ $ans == "y" ]] && defaults write com.apple.LaunchServices LSQuarantine -bool false
                asked_subtitle "Checking and enabling FileVault full-disk encryption"
                        if [[ -z $ans ]] || [[ $ans == "y" ]]; then  
                                if fdesetup status | grep $Q -E "FileVault is (On|Off, and will be enabled after the next restart)."; then
                                        sudo fdesetup enable -user "$USER" | tee ~/Desktop/"FileVault Recovery Key.txt"
                                else
                                        subsubtitle "Run 'sudo fdesetup enable -user \"$USER\"' to enable full-disk encryption."
                                fi
                        fi
			   asked_subtitle "Enabling and Setting Firewall ..."
                        ## Global State
						## Replace value with : 0 = off 1 = on for specific services
						##                      2 = on for essential services
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 2
			   asked_subtitle "Enabling Firewall Stealth mode ..."
						[[ -z $ans ]] || [[ $ans == "y" ]] && #sudo defaults write /Library/Preferences/com.apple.alf stealthenabled 1
			   # asked_subtitle "Enabling FileVault for new users, use this command ..."
						# [[ -z $ans ]] || [[ $ans == "y" ]] && sudo /System/Library/CoreServices/ManagedClient.app/Contents/Resources/createmobileaccount -e
			   asked_subtitle "Enabling Firewall Logging ..."
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.alf loggingenabled 1 \
                                                               && echo "\t \t\033[00;32mDone\033[0m - Application firewall logging enabled"
               asked_subtitle "Logging firewall events for 90 days ..."
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo perl -p -i -e 's/rotate=seq compress file_max=5M all_max=50M/rotate=utc compress file_max=5M ttl=90/g' "/etc/asl.conf" \
                                                               && sudo perl -p -i -e 's/appfirewall.log file_max=5M all_max=50M/appfirewall.log rotate=utc compress file_max=5M ttl=90/g' "/etc/asl.conf"
               asked_subtitle "Disallowing signed software to receive incoming connections ..."
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.alf allowsignedenabled -bool false
               asked_subtitle "Reloading the firewall ..." && sudo launchctl unload /System/Library/LaunchAgents/com.apple.alf.useragent.plist \
                                                           && sudo launchctl unload /System/Library/LaunchDaemons/com.apple.alf.agent.plist \
                                                           && sudo launchctl load /System/Library/LaunchDaemons/com.apple.alf.agent.plist \
                                                           && sudo launchctl load /System/Library/LaunchAgents/com.apple.alf.useragent.plist
		subtitle "Securing Sound Preferences."
				        asked_subtitle "Disable internal microphone or line-in ..."
						## Default Setting:
						## Internal microphone or line-in: Enabled
						## Suggested Setting:
						## Disable internal microphone or line-in.
						## This command does not change the input volume for input devices. It # only sets the default input device volume to zero.
						#read microph
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo osascript -e "set volume input volume 0" && echo "\t \t\033[00;32mDone\033[0m - internal microphone disabled"
                        ## Available Setting:
                        ## Internal microphone or line-in: Enabled or Disabled
		subtitle "Securing Sharing Preferences."
			   asked_subtitle "Setting computer name ..." 
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo systemsetup -setcomputername  "0x132" >/dev/null
						## Default Setting: $host_name = User’s Computer
						## Suggested Setting:
			   asked_subtitle "Changing computer Bonjour host name ..."
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo scutil --set LocalHostName "0x6D746873" > /dev/null
						## Available Setting:
						## The host name cannot contain spaces or other non-DNS characters.
		subtitle "Securing Software Updates Preferences."
				asked_subtitle "Disabling check for updates and Download important updates automatically ..."
					    ## Default Setting:
					    ## Check for Updates: Enabled
                        ## Check Updates: Weekly
                        ## Suggested Setting:
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo softwareupdate --schedule off >/dev/null
                        ## Available Setting:
                        ## Check for Updates: Enabled or Disabled # Check Updates: Daily, Weekly, Monthly
		subtitle "Securing Speech Preferences"
                        # Default Setting:
                        # Speech Recognition: Disabled
                        # Text to Speech: Enabled
                        # Suggested Setting:
                        # Disable Speech Recognition.
				asked_subtitle "Speech Recognition ..."
					    [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write "com.apple.speech.recognition.AppleSpeechRecognition.prefs" StartSpeakableItems -bool false
				# asked_subtitle "Text to Speech settings."
				# 		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write "com.apple.speech.synthesis.general.prefs" TalkingAlertsSpeakTextFlag -bool false \
				# 			                               && sudo defaults write "com.apple.speech.synthesis.general.prefs" SpokenNotificationAppActivationFlag -bool false \
				# 			                               && sudo defaults write "com.apple.speech.synthesis.general.prefs" SpokenUIUseSpeakingHotKeyFlag -bool false \
				# 			                               && sudo defaults delete "com.apple.speech.synthesis.general.prefs" TimeAnnouncementPrefs
                        # ## Available Setting:
                        # ## Each item can be set to ON or OFF: # OFF: -bool false
                        # ## ON: -bool true
		subtitle "Securing Spotlight Preferences"
                        ### Default Setting:
                        ## ON for all volumes
                        ## Suggested Setting:
				asked_subtitle "Spotlight for a volume and erase its current meta data ..."
					    [[ -z $ans ]] || [[ $ans == "y" ]] && sudo mdutil -E -i off / &>/dev/null
                        #### Use `sudo mdutil -i off "/Volumes/foo"` to stop indexing any volume.
                        ## Available Setting: Spotlight can be turned ON or OFF for each volume.
				asked_subtitle "Hiding Spotlight tray-icon (and subsequent helper)..." 
                        [[ -z $ans ]] || [[ $ans == "y" ]] && #sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search
                        #sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search
                        ### To show
                        ##sudo chmod 755 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search

				asked_subtitle "Disabling Spotlight indexing for any volume that gets mounted and has not yet ..."
                        #### Disable Spotlight indexing for any volume that gets mounted and has not yet
                        #### been indexed before.
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array "/Volumes"
                        ## echo ""
                        ## echo "Disable Spotlight indexing for any volume that gets mounted and has not yet been indexed before? (y/n)"
                        ## read -r response
                        ## if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
                        ##   echo 'Use `sudo mdutil -i off "/Volumes/foo"` to stop indexing any volume.'
                        ##   sudo defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array "/Volumes"
                        ## fi
            # asked_subtitle "Change indexing order and disable some search results"
                        ## Yosemite-specific search results (remove them if your are using OS X 10.9 or older):
                        ## 	MENU_DEFINITION
                        ## 	MENU_CONVERSION
                        ## 	MENU_EXPRESSION
                        ## 	MENU_SPOTLIGHT_SUGGESTIONS (send search queries to Apple)
                        ## 	MENU_WEBSEARCH             (send search queries to Apple)
                        ## 	MENU_OTHER
                        ## echo ""
                        ## echo "Change indexing order and disable some search results in Spotlight? (y/n)"
                        ## read -r response
                        ## if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
                        ##   # Yosemite-specific search results (remove them if your are using OS X 10.9 or older):
                        ##   #   MENU_DEFINITION
                        ##   #   MENU_CONVERSION
                        ##   #   MENU_EXPRESSION
                        ##   #   MENU_SPOTLIGHT_SUGGESTIONS (send search queries to Apple)
                        ##   #   MENU_WEBSEARCH             (send search queries to Apple)
                        ##   #   MENU_OTHER
                        ##   defaults write com.apple.spotlight orderedItems -array \
                        ##     '{"enabled" = 1;"name" = "APPLICATIONS";}' \
                        ##     '{"enabled" = 1;"name" = "SYSTEM_PREFS";}' \
                        ##     '{"enabled" = 1;"name" = "DIRECTORIES";}' \
                        ##     '{"enabled" = 1;"name" = "PDF";}' \
                        ##     '{"enabled" = 1;"name" = "FONTS";}' \
                        ##     '{"enabled" = 0;"name" = "DOCUMENTS";}' \
                        ##     '{"enabled" = 0;"name" = "MESSAGES";}' \
                        ##     '{"enabled" = 0;"name" = "CONTACT";}' \
                        ##     '{"enabled" = 0;"name" = "EVENT_TODO";}' \
                        ##     '{"enabled" = 0;"name" = "IMAGES";}' \
                        ##     '{"enabled" = 0;"name" = "BOOKMARKS";}' \
                        ##     '{"enabled" = 0;"name" = "MUSIC";}' \
                        ##     '{"enabled" = 0;"name" = "MOVIES";}' \
                        ##     '{"enabled" = 0;"name" = "PRESENTATIONS";}' \
                        ##     '{"enabled" = 0;"name" = "SPREADSHEETS";}' \
                        ##     '{"enabled" = 0;"name" = "SOURCE";}' \
                        ##     '{"enabled" = 0;"name" = "MENU_DEFINITION";}' \
                        ##     '{"enabled" = 0;"name" = "MENU_OTHER";}' \
                        ##     '{"enabled" = 0;"name" = "MENU_CONVERSION";}' \
                        ##     '{"enabled" = 0;"name" = "MENU_EXPRESSION";}' \
                        ##     '{"enabled" = 0;"name" = "MENU_WEBSEARCH";}' \
                        ##     '{"enabled" = 0;"name" = "MENU_SPOTLIGHT_SUGGESTIONS";}'
                        ##   # Load new settings before rebuilding the index
                        ##   killall mds > /dev/null 2>&1
                        ##   # Make sure indexing is enabled for the main volume
                        ##   sudo mdutil -i on / > /dev/null
                        ##   # Rebuild the index from scratch
                        ##   sudo mdutil -E / > /dev/null
                        ## fi
		# subtitle "Securing Startup Disk Preferences"
				# asked_subtitle "Setting startup disk ..."
                        # ## Default Setting:
                        # ## Startup Disk = "Macintosh HD"
                        # ## Suggested Setting:
                        # ## Set startup disk.
                        # [[ -z $ans ]] || [[ $ans == "y" ]] && sudo systemsetup -setstartupdisk $path
                        # ## Available Setting:
                        # ## Startup Disk = Valid Boot Volume
		subtitle "Securing Time Machine Preferences"
				asked_subtitle "Enabling Time Machine. ..."
                        ## Default Setting: OFF
                        ## Suggested Setting:
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.TimeMachine AutoBackup 1
                        ## Available Setting: # 0 (OFF) or 1 (ON)
                asked_subtitle "Updating Backup Time Machine Intervals"
                        # if [[ -z $ans ]] || [[ $ans == "y" ]] 
                        # then
                            # if [ -f conf/com.apple.backup-auto.plist ]
                                # then
                                # cp conf/com.apple.backupd-auto.plist /System/Library/LaunchDaemons/
                                # chown root:wheel /System/Library/LaunchDaemons/com.apple.backupd-auto.plist
                                # launchctl load -w /System/Library/LaunchDaemons/com.apple.backupd-auto.plist > /dev/null 2>&1
                                # echo "\t \t\033[00;32mDone\033[0m - Updated StartInterval to 3600 on Daemon com.apple.backupd-auto"
                                # launchctl start com.apple.backupd-auto
                                # echo "\t \t\033[00;32mDone\033[0m - Daemon com.apple.backupd-auto started"
                            # fi
                        # fi
			    asked_subtitle "Disabling Time Machine. ..."
						[[ -z $ans ]] || [[ $ans == "y" ]] && sudo tmutil disable
                asked_subtitle "Disabling local Time Machine backups? (This can take up a ton of SSD space on <128GB SSDs)" 
                        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo hash tmutil &>/dev/null
		# subtitle "Securing Universal Access Preferences"
		# 		# asked_subtitle "Disabling VoiceOver service."
                        # # ## Default Setting:
                        # # ## OFF
                        # # ## Suggested Setting:
                        # # [[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchAgents/com.apple.VoiceOver.plist \
                                                           # # && sudo launchctl unload -w /System/Library/LaunchAgents/com.apple.ScreenReaderUIServer.plist \
                                                           # # && sudo launchctl unload -w /System/Library/LaunchAgents/com.apple.scrod.plist
                        ## Available Setting: # None
                        return 1
}
#}}}
## [4] SecuringSystemGenerals # {{{
SecuringSystemGenerals() {
    title " [4] - Securing System Generals"
		asked_subtitle "Enabling locate command and build locate database ..."
				[[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist 2>/dev/null
		asked_subtitle "Disabling saving to iCloud Disk ..."
            ## Save to Disk by Default
            ## Many applications bundled in OS X, i.e. Text, save by default new documents to iCloud. It is suggested to set default save target to
            ## be a local disk, not iCloud with the following command, open Terminal and type:
				[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
		asked_subtitle "Enabling Access Warning for the Command Line ..."
		    ## Create a command-line access warning.
				[[ -z $ans ]] || [[ $ans == "y" ]]  && sudo sh -c 'cat /dev/null  > /etc/motd' \
                                                   && sudo sh -c 'echo “What you do, is the real indication of what you believe...What do you believe...”  >> /etc/motd'
                                                   # && sudo touch /etc/motd  \
                                                   # && sudo chmod 644 /etc/motd \ 
        asked_subtitle "locking the login keychain for inactivity after 1 hours  ..."
				[[ -z $ans ]] || [[ $ans == "y" ]] && sudo security set-keychain-settings -t 3600 -l ~/Library/Keychains/login.keychain
		asked_subtitle "Destroying FileVault key when going into standby mode ..."
            ## Destroy FileVault key when going into standby mode, forcing a re-auth.
            ## Source: https://web.archive.org/web/20160114141929/http://training.apple.com/pdf/WP_FileVault2.pdf
            ## value: 1 - Destroy, 0
				[[ -z $ans ]] || [[ $ans == "y" ]] && sudo pmset destroyfvkeyonstandby 1 &>/dev/null
		asked_subtitle "Creating Deamons to downloading and installing the latest Software Updates ... "
                if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                    if [[ -f ../conf/com.softwareupdate.plist ]]; then
                            cp ../conf/com.softwareupdate.plist /System/Library/LaunchDaemons/
                            chown root:wheel /System/Library/LaunchDaemons/com.softwareupdate.plist
                            launchctl load -w /System/Library/LaunchDaemons/com.softwareupdate.plist > /dev/null 2>&1
                            echo "\t \t\033[00;32mDone\033[0m - com.softwareupdate.plist daemon loaded"
                            launchctl start com.softwareupdate
                            echo "\t \t\033[00;32mDone\033[0m - com.softwareupdate.plist daemon started"
                    fi
                fi
		asked_subtitle "Reducing sudo timeout ... "
                if [[ -z $ans ]] || [[ $ans == "y" ]];  then
                    if [[ $(sudo grep "timestamp_timeout*$" /etc/sudoers) ]]; then
                        sudo sed 's/timestamp_timeout*$/timestamp_timeout=0/g' /etc/sudoers > /etc/sudoers.tmp
                        sudo cp /etc/sudoers.tmp /etc/sudoers
                        sudo m /etc/sudoers.tmp
                    else
                        sudo sh -c 'echo "Defaults timestamp_timeout=0" >> /etc/sudoers'
                    fi
                echo "\t \t\033[00;32mDone\033[0m - sudo timeout period reduced"
                fi
		asked_subtitle "Restricting sudo Configuration with tickects... "
            ## Open the sudo configuration file:
            #sudo visudo
            #  # Restrict sudo usage to one single command and to the authenticated terminal only:
            #    Defaults timestamp_timeout=0
            #    Enable [tty_tickets]
            #    # (http://blog.rongarret.info/2015/08/psa-beware-of-sudo-on-os-x.html) in the sudoers file.
            #    Defaults tty_tickets1
                if [[ -z $ans ]] || [[ $ans == "y" ]];  then
                    if [[ $(sudo grep "tty_tickets*$" /etc/sudoers) ]]; then
                        sudo sed 's/tty_tickets*$/tty_tickets1/g' /etc/sudoers > /etc/sudoers.tmp
                        sudo cp /etc/sudoers.tmp /etc/sudoers
                        sudo rm /etc/sudoers.tmp
                    else
                        sudo sh -c 'echo "Defaults       tty_tickets1" >> /etc/sudoers'
                    fi
                    echo "\t \t\033[00;32mDone\033[0m - tickects protection actived"
                fi

 
        asked_subtitle "Resolving Apple tpm security hole... "
            ## Did you know Apple has not shipped a computer with TPM since [2006](http://osxbook.com/book/bonus/chapter10/tpm/)?
            #
            ## MacOS comes with this line in /etc/sudoers:
            ## ````
            #Defaults env_keep += "HOME MAIL"
            ## Which stops sudo from changing the HOME variable when you elevate privileges.
            ## This means it will execute as root the bash dotfiles in the non-root user's
            ## home directory when you run "sudo bash". It is adviseable to comment this
            ## line out to avoid a potentially easy way for malware or a local attacker
            ## to escalate privileges to root.
                if [[ -z $ans ]] || [[ $ans == "y" ]];  then
                     if [[ $(sudo grep "\"HOME MAIL\"" /etc/sudoers) ]]; then
                         sudo sed 's/Defaults        env_keep += "HOME MAIL"/# Defaults      env_keep += "HOME MAIL"/g' /etc/sudoers
                            sudo cp /etc/sudoers.tmp /etc/sudoers
                            sudo rm /etc/sudoers.tmp
                     else
                            sudo sh -c 'echo "Defaults       tty_tickets1" >> /etc/sudoers'
                     fi
                fi

            ## If you want to retain the convenience of the root user having a non-root user's
            ## ome directory, you can append an export line to /var/root/.bashrc, eg:
            ## ````
            #export HOME=/Users/blah
            ## ````
                if [[ -z $ans ]] || [[ $ans == "y" ]];  then
                     if [[ $(sudo ls /private/var/root | grep -w ".bashrc")  ]]; then
                            sudo sh -c 'echo "export HOME=/Users/Pluton" >> /private/var/root/.bashrc'
                     else
                            sudo touch /private/var/root/.bashrc
                            sudo chown root:wheel /private/var/root/.bashrc
                            sudo chmod 600 /private/var/root/.bashrc
                            sudo sh -c 'echo "export HOME=/Users/Pluuuuuuuuuuutoooooooooooooon" >> /private/var/root/.bashrc'
                     fi
                     echo "\t \t\033[00;32mDone\033[0m - Apple tpm security hole corrected"
                fi
        asked_subtitle "Enable secure virtual memory."
            ### Enable secure virtual memory.
            ## Default Setting:
            ## Secure Virtual Memory on Portable computers is Enabled and is Disabled on # Desktop computers.
            ## Suggested Setting:
            ## Enable secure virtual memory.
            #sudo defaults write /Library/Preferences/com.apple.virtualMemory UseEncryptedSwap -bool YES
            ## Available Setting: UseEncryptedSwap -bool NO/YES
	            [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.virtualMemory UseEncryptedSwap -bool yes

		asked_subtitle "Disable IR remote control."
            ##sudo defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool no
            #### Detects if IR Receiver is present on system bus, and if detected, disables the receiver
                if [[ -z $ans ]] || [[ $ans == "y" ]];  then
                     IRPortDetect=`system_profiler SPUSBDataType | egrep "IR Receiver" -c`
                     if [[ "$IRPortDetect" = "0" ]]; then
                       echo "        ${WN}No IR port detected${NC}"
                     else
                       sudo defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -bool false
                       echo "       ${WG}IR port detected - disabling${NC}"
                     fi
                fi
		

		asked_subtitle "Disable the sudden motion sensor? (it's not useful for SSDs/current MacBooks)"
                [[ -z $ans ]] || [[ $ans == "y" ]] && sudo pmset -a sms 0
		
        asked_subtitle "Disabling root account"
			    [[ -z $ans ]] || [[ $ans == "y" ]] && dsenableroot -d
			    echo "\t \t\033[00;32mDone\033[0m - root account disabled"

        asked_subtitle "Enabling Single User Mode Authentication"
            ## Enable Single User Mode Authentication
            ## Change secure to insecure in /etc/ttys
            ## If the root account is disabled, booting into single user mode is not possible.

        asked_subtitle "Securing User's Home Folder Permissions"
			    [[ -z $ans ]] || [[ $ans == "y" ]] && sudo chmod go-rx /Users/$USER/ && echo "\t \t\033[00;32mDone\033[0m - $inuser home folder permissions set to go-rx"

        asked_subtitle "Disabling Allow guests to connect to shared folders"
			    [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.AppleFileServer guestAccess -bool no \
			                                       && echo "\t \t\033[00;32mDone\033[0m - Allow guests to connect to shared folders disabled"

        asked_subtitle "Securing Hot Binaries. Securing /usr/bin/dscl"
        	    [[ -z $ans ]] || [[ $ans == "y" ]] && chmod 100 /usr/bin/dscl \
        	                                       && echo "\t \t\033[00;32mDone\033[0m - /usr/bin/dscl sets to 100"
		asked_subtitle "Disabling Setuid and Setgid Binaries"
                if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                    bins=(  /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/MacOS/ARDAgent \
                            /System/Library/Printers/IOMs/LPRIOM.plugin/Contents/MacOS/LPRIOMHelper \
                            /sbin/mount_nfs /usr/bin/at /usr/bin/atq /usr/bin/atrm /usr/bin/chpass \
                            /usr/bin/crontab /usr/bin/ipcs /usr/bin/newgrp /usr/bin/postdrop  \
                            /usr/bin/wall /usr/bin/write /usr/bin/rcp /bin/rcp /usr/bin/rlogin \
                            /usr/bin/rsh /usr/lib/sa/sadc /usr/sbin/scselect /usr/sbin/traceroute \
                            /usr/sbin/traceroute6 )
                    # for u in $=bins; do
                    for u in $bins; do
                        chmod ug-s $u 2>/dev/null
                    done
                echo "\t \t\033[00;32mDone\033[0m - Setuid and Setgid binaries disabled"
                fi

		asked_subtitle "Securing rm"
                if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                    if [[ "$(srm 2>&1 | grep "command not found")" ]]; then 
                        echo "\t \tHomebrew MacPorts must be installed to download srm\n"
                    else
                        printf "\tSecure Remove (srm) is installed.\n"
                        # read secrm
                        #     if [ -z $secrm ] || [ $secrm == "y" ]
                        #     then
                        #         alias rm=srm
                        #         echo "\t \t\033[00;32mDone\033[0m - rm alias to srm"
                        #     fi
                    fi
                fi
		asked_subtitle "# • Enabling Timestamps in Bash History"
                if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                    if [[ -f /Users/$USER/.profile ]] && [[ "$(grep "^export HISTTIMEFORMAT" /Users/$USER/.profile)" ]]
                    then
                        if [ -z "$(grep "^export HISTTIMEFORMAT=\"\[%m.%d.%y\]@\[%T\] \"" /Users/$USER/.profile)" ]
                        then
                            sed 's/^export HISTTIMEFORMAT.*$/export HISTTIMEFORMAT="[%m.%d.%y]@[%T] "/g' /Users/$USER/.profile > /Users/$USER/.profile.tmp
                            cp /Users/$USER/.profile.tmp /Users/$USER/.profile
                            rm /Users/$USER/.profile.tmp
                        fi
                    else
                        echo 'export HISTTIMEFORMAT="[%m.%d.%y]@[%T] "' >> /Users/$USER/.profile
                    fi
                echo "\t \t\033[00;32mDone\033[0m - HISTTIMEFORMAT variable set in /Users/$inuser/.profile"
                fi
        asked_subtitle "Disabling iSight camera"
                if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                    drivers=(
                    /System/Library/QuickTime/QuickTimeUSBVDCDigitizer.component/Contents/MacOS/QuickTimeUSBVDCDigitizer \
                    /System/Library/PrivateFrameworks/CoreMediaIOServicesPrivate.framework/Versions/A/Resources/VDC.plugin/Contents/MacOS/VDC \
                    /System/Library/PrivateFrameworks/CoreMediaIOServices.framework/Versions/A/Resources/VDC.plugin/Contents/MacOS/VDC \
                    )
                    for d in $=drivers; do
                        /bin/chmod a-r $d 2>/dev/null
                    done
                echo "\t \t\033[00;32mDone\033[0m - iSight camera disabled"
                fi
        asked_subtitle "\tDisable CUPS (Printer Sharing) "
			    ## Disable cups 2.0
                [[ -z $ans ]] || [[ $ans == "y" ]] && sudo sh -c 'echo "Sandboxing Off" >> /etc/cups/cups-files.conf' \
                                                   && launchctl unload -w /System/Library/LaunchDaemons/org.cups.cupsd.plist 1>&2 2>/dev/null \
                                                   && echo "\t \t\033[00;32mDone\033[0m - CUPS disabled"
       		asked_subtitle "\tDisable Bluetooth Controller"
                [[ -z $ans ]] || [[ $ans == "y" ]] && defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -int 0 2>/dev/null \
                                                   && launchctl unload -w /System/Library/LaunchDaemons/com.apple.blued.plist 2>/dev/null \
                                                   && killall -HUP blued 2>/dev/null \
                                                   && echo "\t \t\033[00;32mDone\033[0m - Bluetooth Controller disabled"
        asked_subtitle "Changing the global umask file permission"
            ##This might break the installation of additional software that relies on a less strict umask.
                if [[ -z $ans ]] || [[ $ans == "y" ]]; then
                    if [ -f /etc/launchd.conf ]
                    then
                        if [ "$(sudo grep "^umask" /etc/launchd.conf)" ]
                        then
                            if [ -z "$(sudo grep "^umask 077" /etc/launchd.conf)" ]
                            then
                                sudo sed 's/umask.*$/umask\ 077/g' /etc/launchd.conf > /etc/launchd.conf.tmp
                                sudo cp /etc/launchd.conf.tmp /etc/launchd.conf
                                sudo rm /etc/launchd.conf.tmp
                            fi
                        else
                            sudo sh -c 'echo "umask 077" >> /etc/launchd.conf'
                        fi
                        echo "\t \t\033[00;32mDone\033[0m - global umask file permission changed to 077"
                    else
                        echo "umask 077" >> /etc/launchd.conf
                        echo "\t \t\033[00;32mDone\033[0m - global umask file permission changed to 077"
                    fi
                #fi
                fi

		asked_subtitle "\tEnable OCSP Revocation to Best Attempt"
                [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write com.apple.security.revocation OCSPStyle -string BestAttempt \
			                                       && echo "\t \t\033[00;32mDone\033[0m - Setting OCSPStyle com.apple.security.revocation to BestAttempt" \
		                                           && echo "\t \tDon't forget setting Priority to OCSP on Keychain Access > Preferences > Certificates tab"

        asked_subtitle "Setting Strict Home Directory Permissions"
		        [[ -z $ans ]] || [[ $ans == "y" ]] && #sudo chmod 700 ${HOME}

        asked_subtitle "Enabling CRL Revocation to Best Attempt."
			    [[ -z $ans ]] || [[ $ans == "y" ]] && defaults write com.apple.security.revocation CRLStyle -string BestAttempt \
		                                           && echo "\t \t\033[00;32mDone\033[0m - Setting CRLStyle com.apple.security.revocation to BestAttempt"

        asked_subtitle "Kernel level packet filtering."
            ## Kernel level packet filter
            ## A highly customizable, powerful, but also most complicated firewall exists in the kernel. It can be controlled with `pfctl` and various configuration files.
            ## pf also be controlled with a GUI application such as [IceFloor](http://www.hanynet.com/icefloor/) or [Murus](http://www.murusfirewall.com/).
            ## There are many books and articles on the subject of pf firewall. Here's is just one example of blocking traffic by IP address.
            ## Put the following into a file called `pf.rules`:

            ##     set block-policy drop
            ##     set fingerprints "/etc/pf.os"
            ##     set ruleset-optimization basic
            ##     set skip on lo0
            ##     scrub in all no-df
            ##     table <blocklist> persist
            ##     block in log
            ##     block in log quick from no-route to any
            ##     pass out proto tcp from any to any keep state
            ##     pass out proto udp from any to any keep state
            ##     block log on en0 from {<blocklist>} to any

            ## Use the following commands:
            ## * `sudo sudo pfctl -sa # shows all information/stats
            ## * `sudo sudo pfctl -sr # see information like stats on timeouts, limits to rules, etc
            ## * `sudo sudo pfctl -v -n -f /etc/pf.conf # let’s run aquick sanity of pf.rules

            ## * `sudo pfctl -e -f pf.rules` to enable the firewall
            ## * `sudo pfctl -d` to disable the firewall
            ## * `sudo pfctl -t blocklist -T add 1.2.3.4` to add hosts to a blocklist
            ## * `sudo pfctl -t blocklist -T show` to view the blocklist
            ## * `sudo ifconfig pflog0 create` to create an interface for logging
            ## * `sudo tcpdump -ni pflog0` to dump the packets


        asked_subtitle "Updating Shell to zsh."
               if  [[ -z $ans ]] || [[ $ans == "y" ]]; then
                local shell_path;
                # shell_path="$(which zsh)"
                shell_path="$(echo =zsh)"

                echo "Changing your shell to zsh ..."
                if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
                  sudo sh -c "echo $shell_path >> /etc/shells"
                fi
                sudo chsh -s "$shell_path" "$USER"
               fi
return 1
}
#}}}
## [5] SecuringApplicationsService # {{{
SecuringApplicationsService() {
    title " [5] - Securing Applications Services"
		asked_subtitle "Disabling GateKeeper"
            ## Disabling OS X Gate Keeper
            ## (You'll be able to install any app you want from here on,
            ##  not just Mac App Store apps)
				[[ -z $ans ]] || [[ $ans == "y" ]] && sudo spctl --master-disable \
				                                   && sudo defaults write /var/db/SystemPolicy-prefs.plist enabled -string no \
				                                   && defaults write com.apple.LaunchServices LSQuarantine -bool false
        asked_subtitle "Disabling FrontRow"
		        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo mv /System/Library/CoreServices/Front\\ Row.app /System/Library/CoreServices/Front_Row.app.disabled
        asked_subtitle "Disabling Notification Center and remove the menu bar icon."
                [[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2> /dev/null/ \
                                                   && launchctl remove com.apple.notificationcenterui.agent \
                                                   && sudo launchctl submit -l com.apple.notificationcenterui.agent -p /System/Library/CoreServices/NotificationCenter.app/Contents/MacOS/NotificationCenter \
                                                   && sudo killall NotificationCenter
        asked_subtitle "Disabling Airdrop."
            #sudo ifconfig adw10 down
            #OR
            #sudo defaults write com.apple.NetworkBrowser BrowseAllInterfaces 0 ( 1 to enable )
            #OR
            #sudo defaults write System/Library/User\ Template/French.lpropj/Preferences/com.apple.NetworkBrowser DisableAirDrop -bool YES
                [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write com.apple.NetworkBrowser BrowseAllInterfaces 0
        asked_subtitle "Disabling Airplay mirroring."
            ### Reeneable
            ## sudo chmod 755 /System/Library/CoreServices/AirPlayUIAgent.app/Contents/MacOS/AirPlayUIAgent.disabled
            ## sudo mv /System/Library/CoreServices/AirPlayUIAgent.app/Contents/MacOS/AirPlayUIAgent.disabled /System/Library/CoreServices/AirPlayUIAgent.app/Contents/MacOS/AirPlayUIAgent
                [[ -z $ans ]] || [[ $ans == "y" ]] && sudo mv /System/Library/CoreServices/AirPlayUIAgent.app/Contents/MacOS/AirPlayUIAgent{,.disabled}  \
                                                   && sudo chmod 000 /System/Library/CoreServices/AirPlayUIAgent.app/Contents/MacOS/AirPlayUIAgent.disabled
}
#}}}
## [6] SecuringNetworkServices# {{{
SecuringNetworkServices() {
    title " [6] - Securing Network Services"
        subtitle "Blocking Bonjour listening."
            ## Default Setting:
            ## Bonjour is enabled.
            ## Firewall is disabled.
            ## Suggested Setting:
            ## Reload the firewall rules.
            ## Available Settings:
            ## Disable firewall and allow Bonjour.
            ## Enable firewall and block port 5353.
            ## Disabling Bonjour service advertising without disabling the dns
            ## mDNSResponder service has been renamed to discoveryd located at /System/Library/LaunchDaemons/com.apple.discoveryd.plist
            ## you have to replace the <key>ProgramArguments</key> in the plist by :
            ## <key>ProgramArguments</key>
            ## <array>
            ##     <string>/usr/libexec/discoveryd</string>
            ##     <string>--udsocket</string>
            ##     <string>standard</string>
            ##     <string>--loglevel</string>
            ##     <string>Basic</string>
            ##     <string>--logclass</string>
            ##     <string>Everything</string>
            ##     <string>--logto</string>
            ##     <string>asl</string>
            ##     <string>--no-multicast</string>
            ## </array>
            ## and restart
                 asked_subtitle "Disabling Bonjour multicast advertisements."
		        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/com.apple.mDNSResponder.plist NoMulticastAdvertisements -bool true
        # subtitle "Enabling Bonjour Service."
            ## Default Setting:
            ## Bonjour is enabled
            ## Firewall is disabled
            ## Suggested Setting:
            ## Remove the following line from /etc/ipfw.conf. add 00001 deny udp from any to me dst-port 5353 # Reload the firewall rules
            #sudo /sbin/ipfw flush
            ## Available Settings:
            ## Disable Firewall and allow Bonjour
            ## Enable Firewall and block port 5353
        subtitle "DVD or CD Sharing."
            ## Default Setting:
            ## Disabled (unload)
            ## Suggested Setting:
            ## Disable DVD or CD Sharing.
		    ## Available Settings: # Disabled (unload) # Enabled (load)
		        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.ODSAgent.plist
        subtitle "Spoofing MAC ADDRESS."
            ## Spoofing MAC ADDRESS
            ## You may wish to [spoof the MAC address](https://en.wikipedia.org/wiki/MAC_spoofing)
            ## of your network card before connecting to new and untrusted wireless networks to mitigate
            ## passive fingerprinting:
		        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo ifconfig en0 ether $(openssl rand -hex 6 | sed 's%\(..\)%\1:%g; s%.$%%')
            ## **Note** MAC addresses will reset to hardware defaults on each boot.
            ## Also see [feross/SpoofMAC](https://github.com/feross/SpoofMAC).
            ## Finally, WEP protection on wireless networks is [not secure]
            ## and you should favor connecting to **WPA2** protected networks only to mitigate the risk of
            ## passive eavesdroppers.
        subtitle "For outgoing SSH connections, use hardware- or password-protected keys."
            ## For outgoing SSH connections, use hardware- or password-protected keys,
            ## [set up]
            ## Here are several recommended [options]
            ## (https://www.freebsd.org/cgi/man.cgi?query=ssh_config&sektion=5) to add to  `~/.ssh/ssh_config`:

            ##     Host *
            ##       PasswordAuthentication no
            ##       ChallengeResponseAuthentication no
            ##       HashKnownHosts yes
            ##       UseRoaming no

            ## UseRoaming is an undocumented option in OpenSSH that is enabled by default and is vulnerable in OpenSSH versions 5.4 through 7.1. The vulnerabilities are detailed in [CVE-2016-0777 and CVE-2016-0778](http://undeadly.org/cgi?action=article&sid=20160114142733).
            ## You can also use ssh to create an [encrypted tunnel](http://blog.trackets.com/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html) to send your traffic through, which is similar to a VPN.
            ## For example, to use Privoxy on a remote host:

            ##     $ ssh -C -L 5555:127.0.0.1:8118 you@remote-host.tld
            ##     $ sudo networksetup -setwebproxy "Wi-Fi" 127.0.0.1 5555
            ##     $ sudo networksetup -setsecurewebproxy "Wi-Fi" 127.0.0.1 5555

            ## Or to use an ssh connection as a [SOCKS proxy](https://www.mikeash.com/ssh_socks.html):
            ##     $ ssh -NCD 3000 you@remote-host.tld

            ## By default, OS X does **not** have sshd or *Remote Login* enabled.
            ## To enable sshd and allow incoming ssh connections:
            ##     $ sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
            ## Or use the **System Preferences** > **Sharing** menu.

            ## If you are going to enable sshd, at least disable password authentication and consider further
            ## echo "Generating SSH keys ..."
            ## ssh-keygen -t rsa -C " "
            ## eval "$(ssh-agent -s)"
            ## ssh-add ~/.ssh/id_rsa
            ## pbcopy < ~/.ssh/id_rsa.pub
            ## open https://github.com/settings/ssh
        subtitle "Disabling Screen Sharing."
		## Default Setting: Disabled
		## Suggested Setting: isable Screen Sharing.
		    [[ -z $ans ]] || [[ $ans == "y" ]] && sudo srm /private/etc/ScreenSharing.launchd
		## Available Settings: # Enabled: "All Users" "Only these users"

		subtitle "enable/disable VNC on Mac OSX (testing with OSX 10.9)"
            [[ -z $ans ]] || [[ $ans == "y" ]]
              def show_current_status
                if [[  $(sudo launchctl list | grep com.apple.screensharing > /dev/null") ]] &&
                [[ $(sudo defaults read /var/db/launchd.db/com.apple.launchd/overrides.plist com.apple.screensharing -dict Disabled | grep 'Disabled = 0' > /dev/null") ]]; then
                  echo  "VNC: enabled"
                else
                  echo  "VNC: disabled"
                fi
              # end

              #def show_help
                #app_name = File.basename $0
                #STDERR.puts "% #{app_name} start  # enable VNC"
                #STDERR.puts "% #{app_name} stop   # disable VNC"
                #show_current_status
              #end

              #if ARGV.empty?
                #show_help
                #exit 1
              #end

              #enable = case ARGV.shift
                       #when "start" then true
                       #when "stop" then false
                       #else
                         #show_help
                         #exit 1
                       #end

              #system "sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist com.apple.screensharing -dict Disabled -bool #{! enable}"

              #if enable
                #system "sudo launchctl load /System/Library/LaunchDaemons/com.apple.screensharing.plist"
              #else
                #system "sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist"
              #end

            #show_current_status

        subtitle "Disabling IKE VPN Key Management Service."
		## # Default Setting: OFF
		## Suggested Setting:
		## If a VPN is not used, disable the IKE VPN key management service. s
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.racoon.plist
		## Available Setting: # None


        subtitle "Disabling Disable remote apple event."
		## Disable wake-on modem
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo systemsetup -setwakeonmodem off

		subtitle "Disable wake-on LAN"
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo systemsetup -setwakeonnetworkaccess off

        subtitle "Disabling File Sharing services."
		## Default Setting:
		## File Sharing Disabled:
		## AFP
		## FTP
		## SMB
		## NFS
		## Suggested Setting:

		asked_subtitle "Disablinge FTP"
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchDaemons/ftp.plist 
		asked_subtitle "Disablinge SAMBA"
        ## 3. The following command will copy the Preferances file to the admin user's Documents folder (in this example the admin username is
		##    'tech'). You want to save this file in case you want to turn the service back on.
		## 4. The next command removes the smb service from the “EnabledServices” list.
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults delete /Library/Preferences/SystemConfiguration/com.apple.smb.server EnabledServices
		## 5.The following six commands turn off the service dæmons related to the smb client service. Execute them one at a time. (Note: this
		## documents may wrap the text, these commands should each be one line.)
		#sudo launchctl unload -w /System/Library/LaunchDaemons/nmbd.plist
		#sudo launchctl unload -w /System/Library/LaunchDaemons/smbd.plist
		#sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.smb.server.preferences.plist
		#sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.smb.sharepoints.plist
		#sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.smbfs_load_kext.plist
		#sudo launchctl unload -w /System/Library/LaunchDaemons/org.samba.winbindd.plist
		## 6. Restart the computer.

		### Re-Enable the Samba service
		## #  Re-enabling the service uses nearly the same commands.
		## # 1. Replace the plist file using the following command:
		## sudo cp /Users/tech/Documents/com.apple.smb.server.xml /Library/Preferences/SystemConfiguration/com.apple.smb.server.plist
		## # 2. The next command replaces the smb service from the “EnabledServices” list.
		## sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server EnabledServices
		## # 3. The next six commands turn on the service dæmons related to the smb client service.
		## sudo launchctl load -F /System/Library/LaunchDaemons/nmbd.plist
		## sudo launchctl load -F /System/Library/LaunchDaemons/smbd.plist
		## sudo launchctl load -F /System/Library/LaunchDaemons/com.apple.smb.server.preferences.plist
		## sudo launchctl load -F /System/Library/LaunchDaemons/com.apple.smb.sharepoints.plist
		## sudo launchctl load -F /System/Library/LaunchDaemons/com.apple.smbfs_load_kext.plist
		## sudo launchctl load -F /System/Library/LaunchDaemons/org.samba.winbindd.plist
		## # 4. Restart the computer.
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults delete /Library/Preferences/SystemConfiguration/com.apple.smb.server EnabledServices \
                                           && sudo launchctl unload -w /System/Library/LaunchDaemons/nmbd.plist \
                                           && sudo launchctl unload -w /System/Library/LaunchDaemons/smbd.plist \
                                           && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.smb.server.preferences.plist \
                                           && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.smb.sharepoints.plist \
                                           && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.smbfs_load_kext.plist \
                                           && sudo launchctl unload -w /System/Library/LaunchDaemons/org.samba.winbindd.plist
		asked_subtitle "Disablinge AFP"
		sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.AppleFileServer.plist
		sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.afpfs_afpLoad.plist
		sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.afpfs_checkafp.plist
		asked_subtitle "Disablinge NFS"
		sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.nfsd.plist
		sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.lockd.plist
		sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.statd.notify.plist
		sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.portmap.plist
		# Available Settings: # Disabled (unload) # Enabled (load)
        asked_subtitle "Disabling Web Sharing."
		## Default Setting:
		## Web Services: Disabled
		## Suggested Setting:
		## Disable Web Sharing.
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist
		## Available Settings:
		## Web Services: Disabled
		## Enabled
        asked_subtitle "Disabling Remote Login (SSH)."
		## Default Setting:
		## Remote Login (SSH): Disabled
		## Suggested Setting:
		## Disable Remote Login.
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchDaemons/ssh.plist
		## Available Settings: # Remote Login (SSH): # Disabled
		## Enabled
        asked_subtitle "Disabling Remote Management (ARD)."
		## Default Setting:
		## Remote Management: Disabled
		## Suggested Setting:
        asked_subtitle "Disabling Remote Management."
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop
		## Available Settings:
		## Remote Management: Disabled - Enabled
		## To enabling Osx screensharing
		##sudo /System/Library/Coreservices/RemoteManagement/ARDAgent.app/Contents/Ressources/kickstart -activate -configure -access -off -restart -agent -privs -all -allowAccessFor -allUsers
        asked_subtitle "Disabling Remote Apple Events (RAE)."
		## Default Setting:
		## Remote Apple Events: Disabled
		## Suggested Setting:
		## Disable Remote Apple Events.
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.eppc.plist
		## Available Settings:
		## Remote Apple Events:
		## Disabled
		## Enabled
        asked_subtitle "Disabling Xgrid Sharing."
		## Default Setting:
		## Xgrid Sharing: Disabled
		## Suggested Setting:
		## Disable Xgrid Sharing.
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/Daemons/com.apple.xgridagentd \
		                                   && sudo launchctl unload -w /System/Library/Daemons/com.apple.xgridcontrollerd
		## Available Settings:
		## Xgrid Sharing:
		## Disabled
		## Enabled
        asked_subtitle "Disabling Internet Sharing."
		## Default Setting:
		## Internet Sharing: Disabled
		## Suggested Setting:
		## Disable Internet Sharing.
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.nat NAT -dict Enabled -int 0 \
		                                   && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.InternetSharing.plist
		## Available Settings:
		## Internet Sharing:
		## Disabled
		## Enabled
        asked_subtitle "Disabling Bluetooth Sharing."
		## Default Setting:
		## Bluetooth Sharing: Disabled
		## Suggested Setting:
		## Disable Bluetooth Sharing.
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo defaults -currentHost write com.apple.bluetooth PrefKeyServicesEnabled 0
		## Available Settings: # Bluetooth Sharing: # Disabled Enabled
		## Understanding and Managing Daemons and Agents
		## Default Setting:
		## Bluetooth Sharing: off
		## Suggested Setting:
        asked_subtitle "Turning off AirPort Service."
        ## Turn off AirPort Services using the following commands. Run the last
        [[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.airportPrefsUpdater.plist \
		                                   && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.AirPort.wps.plist \
		                                   && sudo launchctl unload -w /System/Library/LaunchAgents/com.apple.airportd.plist 
		## Turn off remote control service using the following command:
		#sudo launchctl unload -w /System/Library/LaunchAgents/com.apple.RemoteUI
		asked_subtitle "Turning off Screen Sharing services."
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.RFBEventHelper.plist \
		                                   && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.RFBRegisterMDNS_RemoteManagement.plist \
		                                   && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.RFBRegisterMDNS_ScreenSharing.plist \
		                                   && sudo launchctl unload -w /System/Library/LaunchAgents/com.apple.ScreenSharing.plist
		asked_subtitle "Turn off Remote Management service using the following commands:"
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchAgents/com.apple.RemoteDesktop.plist \
		                                   && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.RemoteDesktop.PrivilegeProxy.plist \
		                                   && sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.RFBEventHelper.plist
		asked_subtitle "Turn off Bluetooth service using the following command:" 
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo launchctl unload -w /System/Library/LaunchDaemons/om.apple.blued.plist
		## Available Settings:
		## Disabled (unload)
		## Enabled (load)
        asked_subtitle "Disabling Netbios."
		[[ -z $ans ]] || [[ $ans == "y" ]] && sudo lauchctl unload -w /system/Library/LaunchDaemons/com.apple.netbiosd.plist
        asked_subtitle "Disabling Remote Desktop."
			[[ -z $ans ]] || [[ $ans == "y" ]] && /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop 2>/dev/null \
			echo "\t \t\033[00;32mDone\033[0m - Remote Desktop disabled"
        asked_subtitle "Disabling Samba Client on OS X."
		

        subtitle "Disabling Unnecessary Services."
        if [[ -z $ans ]] || [[ $ans == "y" ]]; then
            #srvDaemons=(
            #com.apple.blued
            #com.apple.IIDCAssistant
            #com.apple.nis.ypbind
            #com.apple.racoon
            #com.apple.RemoteDesktop.PrivilegeProxy
            #com.apple.RFBEventHelper
            #com.apple.UserNotificationCenter
            #com.apple.webdavfs_load_kext
            #org.postfix.master
            #com.apple.efax
                #com.apple.AppleFileServer
                #org.apache.httpd
                #com.apple.InternetSharing
                #com.apple.mDNSResponder
                #com.apple.mDNSResponderHelper
                #eppc
                #ftp
                #nmbd
                #smbd
            #ssh)
            #for s in ${srvDaemons[@]}
            #do
                #launchctl unload -w /System/Library/LaunchDaemons/$s.plist	1>&2 2>/dev/null
            #done


            #srvAgents=(
            #com.apple.RemoteDesktop
            #com.apple.RemoteUI
            #)
            #for a in ${srvAgents[@]}
            #do
                #launchctl unload -w /System/Library/LaunchAgents/$a.plist 1>&2 2>/dev/null
            #done
            #echo "\t \t\033[00;32mDone\033[0m - Unnecessary Services disabled"
        fi
        subtitle "Blocking known malware, advertising or otherwise unwanted domains."
		##### Hosts file
		## Use the [hosts file](https://en.wikipedia.org/wiki/Hosts_(file)) to block known malware, advertising or otherwise unwanted domains.
		## Edit the hosts file as root, for example with `sudo vi /etc/hosts`. The hosts file can also be managed with the GUI app [2ndalpha/gasmask](https://github.com/2ndalpha/gasmask).
		## To block a domain, just add `0 facebook.com` (`0` means `0.0.0.0`, a null route).
		## There are many lists of domains available online which you can paste in, just make sure each line starts with `0` or `127.0.0.1`, and the line `127.0.0.1 localhost` is included.
		## For hosts lists, see [someonewhocares.org](http://someonewhocares.org/hosts/zero/hosts),
		###
		## Host Database
		##
		## localhost is used to configure the loopback interface
		## when the system is booting.  Do not change this entry.
		###
				#127.0.0.1	localhost
				#255.255.255.255	broadcasthost
				#::1             localhost
				#fe80::1%lo0	localhost
				##
				#127.0.0.1	www.apple.com
				#17.171.8.17	crl.apple.com
				#17.146.232.12	swscan.apple.com	 # SoftwareUpdate.framework
				## 127.0.0.1	qa2-int-swscan.apple.com # SoftwareUpdate.framework
				## 127.0.0.1	swcdnlocator.apple.com	 # SoftwareUpdate.framework
				#127.0.0.1	validation.isu.apple.com # SoftwareUpdate.framework
				## 127.0.0.1	help.apple.com		# HelpData.framework
				## 127.0.0.1	helpqt.apple.com	# HelpData.framework
				## 127.0.0.1	helposx.apple.com	# HelpData.framework
				## 127.0.0.1	support.apple.com	# HelpData.framework
				## 127.0.0.1	lookup-api.apple.com	# Lookup.framework
				## 127.0.0.1	pubsbuild.apple.com	# docsetinstalld
				## 127.0.0.1	extensions.apple.com	   # Safari.framework
				## 127.0.0.1	stage-extensions.apple.com # Safari.framework
				## 127.0.0.1	plugins.apple.com	   # Safari.framework
				#127.0.0.1	suggest.yandex.net	   # Safari.framework
				#127.0.0.1	suggestion.baidu.com	   # Safari.framework
				#127.0.0.1	api.bing.com		   # Safari.framework
				#127.0.0.1	sugg.search.yahoo.net	   # Safari.framework
				## 127.0.0.1	userpub.itunes.apple.com    # iBooks.app
				## 127.0.0.1	vocabulary.itunes.apple.com # iBooks.app
				## 127.0.0.1	gcsp.clb.cddbp.net		# iTunes.app
				## 127.0.0.1	gcsp.cddbp.net			# iTunes.app
				#127.0.0.1	members.mac.com		        # iTunes.app
				#127.0.0.1	members.me.com		        # iTunes.app
				#127.0.0.1	safebrowsing.clients.google.com # iTunes.app
				#127.0.0.1	nikerunning.nike.com		# iTunes.app
				#127.0.0.1	s.mzstatic.com			# iTunes.app
				#127.0.0.1	ax.itunes.apple.com		# iTunes.app
				#127.0.0.1	limit.itunesu.com		# iTunes.app
				#127.0.0.1	configuration.apple.com
				#127.0.0.1	iforgot.apple.com
				#127.0.0.1	identity.apple.com	# AppleIDAuthAgent
				#127.0.0.1	appleid.apple.com	# Accounts.prefPane
				#127.0.0.1	reg1.apple.com		# Setup Assistant.app
				#127.0.0.1	littlebuddy.apple.com	# Setup Assistant.app
				#127.0.0.1	iadsdk.apple.com	# iAdCore.framework
				#127.0.0.1	gil.apple.com           # InternetAccounts.framework
				#127.0.0.1	fdereg.apple.com	# Security.framework
				#127.0.0.1	timestamp.apple.com	# Security.framework
				#127.0.0.1	init-p01st.push.apple.com # ApplePushService.framework
				#127.0.0.1	init-s01st.push.apple.com # ApplePushService.framework
				#127.0.0.1	albert.apple.com	  # ApplePushService.framework
				#127.0.0.1	www.me.com		# AOSKit.framework
				#127.0.0.1	setup.icloud.com	# AOSKit.framework
				#127.0.0.1	icloud.com		# AOSKit.framework
				#127.0.0.1	init.ess.apple.com	# IMFoundation.framework
				#127.0.0.1	init-p01md.apple.com	# IMFoundation.framework
				#127.0.0.1	scento.apple.com	# Install.framework
				#127.0.0.1	mac-services.apple.com	# MailCore.framework
				#127.0.0.1	idisk.mac.com		# OSServices.framework
				#127.0.0.1	validation.apple.com	# PrintingPrivate.framework
				#127.0.0.1	qtpartners.apple.com	# RTCReporting.framework
				#127.0.0.1	public.me.com		# ScreenReader.framework
				#127.0.0.1	pm-members.mac.com	# btmmdiagnose
				#127.0.0.1	marimba.apple.com	# Slideshows.framework
				#127.0.0.1	gsp2.apple.com		# Slideshows.framework
				#127.0.0.1	porco.apple.com		# StoreUI.framework
				#127.0.0.1	iprofiles.apple.com	# cloudconfigurationd
				#127.0.0.1	suconfig.apple.com	# cloudconfigurationd
				#127.0.0.1	radarsubmissions.apple.com        # SubmitDiagInfo
				#127.0.0.1	messagetracer-whitelist.apple.com # SubmitDiagInfo
				#127.0.0.1	speedtracer.apple.com    # Problem Reporter.app
				#127.0.0.1	tracerx-radars.apple.com # Problem Reporter.app
				#127.0.0.1	icalserver.apple.com    # ManagedClient.app
				#127.0.0.1	bugreport.apple.com	 # IMLoggingAgent
				#127.0.0.1	1-courier.push.apple.com # IMLoggingAgent
				#127.0.0.1	2-courier.push.apple.com # IMLoggingAgent
				#127.0.0.1	6-courier.push.apple.com # IMLoggingAgent
				#127.0.0.1	init.itunes.apple.com	 # CommerceKit.framework
				#127.0.0.1	ax.init.itunes.apple.com # CommerceKit.framework
				#127.0.0.1	phobos.apple.com	 # CommerceKit.framework
				#127.0.0.1	sandbox.itunes.apple.com # CommerceKit.framework
				#127.0.0.1	static.gc.apple.com	# GameKit.framework
				#127.0.0.1	sandbox.gc.apple.com	# GameKit.framework
				#127.0.0.1	td1.apple.com		# GameKit.framework
				#127.0.0.1	z2r0y.apple.com		# GameKit.framework
				#127.0.0.1	td2.apple.com		# GameKit.framework
				#127.0.0.1	df6ed.apple.com		# GameKit.framework
				#127.0.0.1	td3.apple.com		# GameKit.framework
				#127.0.0.1	cp7vi.apple.com		# GameKit.framework
				#127.0.0.1	td4.apple.com		# GameKit.framework
				#127.0.0.1	gz8rm.apple.com		# GameKit.framework
				#127.0.0.1	link.gc.apple.com	# GameKit.framework
				#127.0.0.1	init.gc.apple.com	# GameKit.framework
				#127.0.0.1	redcarpet.apple.com	# HelpViewer.app
				#127.0.0.1	static.ips.apple.com	# Social.framework
				#127.0.0.1	internalcheck.apple.com	# CrashReporterSupport.framework
				#127.0.0.1	guzzoni.apple.com	# AssistantServices.framework
				#127.0.0.1	hello.connectivity.me.com # mDNSResponder
				#127.0.0.1	gateway.push.apple.com	# emond
				#127.0.0.1	push.apple.com		# networkd
				#127.0.0.1	gsp9-ssl.apple.com	# locationd
				#127.0.0.1	gsp10-ssl.apple.com	# locationd
				#127.0.0.1	gsp10-ssl.apple.com.com # locationd
				#127.0.0.1	gs-loc.apple.com	# locationd
				#127.0.0.1	iphone-ld.apple.com	# locationd
				#127.0.0.1	cl-dev.apple.com	# locationd
				#127.0.0.1	cl2.apple.com		# locationd
				#127.0.0.1	cl3.apple.com		# locationd
				#127.0.0.1	gspa35-ssl.ls.apple.com	# GeoServices.framework
				#127.0.0.1	gsp-ssl.ls.apple.com	# GeoServices.framework
				#127.0.0.1	gspa21.ls.apple.com	# GeoServices.framework
				#127.0.0.1	gsp1.apple.com		# GeoServices.framework
				#127.0.0.1	gsps36.ls.apple.com	# GeoServices.framework
				#127.0.0.1	gs.apple.com		# MobileDevice.framework
				#127.0.0.1	appleconnect.apple.com	# MobileDevice.framework
				#127.0.0.1	sso.corp.apple.com	# MobileDevice.framework
				#127.0.0.1	lookup-api.apple.com	# Dictionary.app
				#127.0.0.1	copyfight.corante.com	# CaptiveSystemAgent.plugin
				#127.0.0.1	apsu.apple.com		# AirPort Utility.app
				#127.0.0.1	apfw.apple.com		# AirPort Utility.app
				#127.0.0.1	metrics.apple.com	# App Store.app
				#127.0.0.1	wu-calculator.apple.com # Calculator.app
				#127.0.0.1	icalbridge.apple.com	# Calendar.app
				#127.0.0.1	feedback.apple.com	# Mail.app
				#127.0.0.1	manifest2.inn.rdca.ls.apple.com # Maps.app
				#127.0.0.1	slogin.oscar.aol.com	# Messages.app
				#127.0.0.1	api.oscar.aol.com	# Messages.app
				#127.0.0.1	gdata.youtube.com	  # QuickTime Player.app
				#127.0.0.1	uploads.gdata.youtube.com # QuickTime Player.app
				#127.0.0.1	maps.apple.com		  # QuickTime Player.app
				#127.0.0.1	depot.info.apple.com	# System Information.app
				#127.0.0.1	iclab.apple.com		# QuickTime Plugin.plugin
				#127.0.0.1	aolauth.icloud.com	# AIM.imservice
				#127.0.0.1	aolauthtest.icloud.com	# AIM.imservice
				#127.0.0.1	api.screenname.aol.com	# AIM.imservice
				#127.0.0.1	startpage.aol.com	# AIM.imservice
				#127.0.0.1	my.screenname.aol.com	# AIM.imservice
				#127.0.0.1	api.login.aol.com	# AIM.imservice
				#127.0.0.1	developer.aim.com	# AIM.imservice
				#127.0.0.1	login.oscar.aol.com	# AIM.imservice
				#127.0.0.1	ars.oscar.aol.com	# AIM.imservice
				#127.0.0.1	aimhttp.oscar.aol.com	# AIM.imservice
				#127.0.0.1	talk.google.com		# Jabber.impreferencepane
				#127.0.0.1	msg.yahoo.com			     # Yahoo.imserviceplugin
				#127.0.0.1	api.login.yahoo.com		     # Yahoo.imserviceplugin
				#127.0.0.1	login.yahoo.com			     # Yahoo.imserviceplugin
				#127.0.0.1	developer.messenger.yahooapis.com    # Yahoo.imserviceplugin
				#127.0.0.1	displayimage.messenger.yahooapis.com # Yahoo.imserviceplugin
				#127.0.0.1	ftrelay.messenger.yahooapis.com	     # Yahoo.imserviceplugin
				#127.0.0.1	attwifi.apple.com	# CaptiveNetworkSupport
				#127.0.0.1	proddav.apple.com	# iWork.qlgenerator
				#127.0.0.1	rabat.apple.com		# iWork.qlgenerator
				#127.0.0.1	members.btmm.icloud.com	# Shared Screen Viewer.app
				#127.0.0.1	idisk.me.com		# webdav_fs.kext
				#127.0.0.1	contacts.icloud.com	# AddressBook.framework
				#127.0.0.1	ink.apple.com		# Print.framework
				#127.0.0.1	gir.apple.com		# InstallerPlugins.framework
				#127.0.0.1	photocast.me.com	# ScreenSaver.framework
				#127.0.0.1	gallery.me.com		# WebCore.framework
				#127.0.0.1	tid.canon.com		# PTPCamera.app
				#127.0.0.1	fmip.me.com		# AOSNotification.framework
				#127.0.0.1	courier.sandbox.push.apple.com # apsd
				#127.0.0.1	courier.push.apple.com	       # apsd
				#127.0.0.1	sandbox.push.apple.com	       # apsd
				#127.0.0.1	trackingshipment.apple.com # DataDetectors.framework
				#127.0.0.1	event.apple.com		   # DataDetectors.framework
				#127.0.0.1	gsp17-ssl.apple.com	# GeoServices.framework
				#127.0.0.1	gsp17-2-ssl.apple.com	# GeoServices.framework
				#127.0.0.1	webservices.mac.com	# ISSupport.framework
				#127.0.0.1	m3.mac.com		# ISSupport.framework
				#127.0.0.1	iphonesubmissions.apple.com # AppleMobileDeviceHelper.app
				#127.0.0.1	iphonediags.apple.com	    # AppleMobileDeviceHelper.app
				#127.0.0.1	vinkjo8.apple.com	# SetupAssistantSupport.framework
				#127.0.0.1	secure.me.com		# SetupAssistantSupport.framework
				#127.0.0.1	turn.oscar.aol.com	# VideoConference.framework
				#127.0.0.1	apple-mobile.query.yahooapis.com # WeatherKit.framework
				#127.0.0.1	api.wunderground.com		 # WeatherKit.framework
				#127.0.0.1	lookup.apple.com	# WhitePages.framework
				#127.0.0.1	wu.apple.com		# WidgetResources
				#127.0.0.1	wu-quotes.apple.com	# WidgetResources
				#127.0.0.1	iphone-wu.apple.com	# WidgetResources
				#127.0.0.1	wu-stocks.apple.com	# WidgetResources
				#127.0.0.1	wu-charts.apple.com	# WidgetResources
				#127.0.0.1	wu-converter.apple.com	# WidgetResources
				#127.0.0.1	caldav.icloud.com	# CalendarPersistence.framework
				#127.0.0.1	ical.mac.com		# CalendarPersistence.framework
				#127.0.0.1	qtsoftware.apple.com	# QuickTime.framework
				#127.0.0.1	quicktimepro.apple.com	# QuickTime.framework
				#127.0.0.1	idmsauth-uat.corp.apple.com      # Feedback Assistant.app
				#127.0.0.1	idmsa.apple.com		         # Feedback Assistant.app
				#127.0.0.1	appleconnect-uat.apple.com       # Feedback Assistant.app
				#127.0.0.1	appleseed-stage.apple.com        # Feedback Assistant.app
				#127.0.0.1	appleseed.apple.com	         # Feedback Assistant.app
				#127.0.0.1	iforgot-uat.apple.com	         # Feedback Assistant.app
				#127.0.0.1	xseedapps.apple.com	         # Feedback Assistant.app
				#127.0.0.1	appleseed-temp.apple.com         # Feedback Assistant.app
				#127.0.0.1	crucio.apple.com	         # Feedback Assistant.app
				#127.0.0.1	ac-at.apple.com		         # Feedback Assistant.app
				#127.0.0.1	iforgott.apple.com	         # Feedback Assistant.app
				#127.0.0.1	mobile-uat.corp.apple.com        # Feedback Assistant.app
				#127.0.0.1	idmswt.corp.apple.com	         # Feedback Assistant.app
				#127.0.0.1	mobile.apple.com	         # Feedback Assistant.app
				#127.0.0.1	privftp.apple.com	         # Feedback Assistant.app
				#127.0.0.1	cssubmissions-uat.corp.apple.com # Feedback Assistant.app
				#127.0.0.1	cssubmissions.apple.com		 # Feedback Assistant.app
				## 127.0.0.1	www.chromium.org	             # Chromium.app
				## 127.0.0.1	www.chrome.com			     # Chromium.app
				## 127.0.0.1	developer.chrome.com		     # Chromium.app
				## 127.0.0.1	chrome.google.com		     # Chromium.app
				## 127.0.0.1	m.google.com		             # Chromium.app
				## 127.0.0.1	www.google.com		             # Chromium.app
				## 127.0.0.1	www.youtube.com			     # Chromium.app
				## 127.0.0.1	code.google.com			     # Chromium.app
				## 127.0.0.1	docs.google.com		             # Chromium.app
				## 127.0.0.1	groups.google.com	             # Chromium.app
				## 127.0.0.1	plus.google.com			     # Chromium.app
				#127.0.0.1	plus.sandbox.google.com		     # Chromium.app
				#127.0.0.1	ddm.google.com			     # Chromium.app
				#127.0.0.1	drive.google.com	             # Chromium.app
				#127.0.0.1	www.googledrive.com	             # Chromium.app
				#127.0.0.1	history.google.com		     # Chromium.app
				#127.0.0.1	mail.google.com			     # Chromium.app
				#127.0.0.1	tools.google.com		     # Chromium.app
				#127.0.0.1	wallet.google.com		     # Chromium.app
				#127.0.0.1	wallet-web.sandbox.google.com	     # Chromium.app
				## 127.0.0.1	maps.google.com		             # Chromium.app
				## 127.0.0.1	picasaweb.google.com		     # Chromium.app
				## 127.0.0.1	sites.google.com		     # Chromium.app
				## 127.0.0.1	support.google.com	             # Chromium.app
				## 127.0.0.1	translate.google.com	             # Chromium.app
				#127.0.0.1	checkout.google.com		     # Chromium.app
				#127.0.0.1	cloudprint.google.com		     # Chromium.app
	
				#127.0.0.1	www.googleapis.com	             # Chromium.app
				## 127.0.0.1	maps.googleapis.com	             # Chromium.app
				## 127.0.0.1	fonts.googleapis.com		     # Chromium.app
				#127.0.0.1	android.googleapis.com	             # Chromium.app
				#127.0.0.1	translate.googleapis.com             # Chromium.app
				#127.0.0.1	clients1.google.com		     # Chromium.app
				#127.0.0.1	clients2.google.com	             # Chromium.app
				#127.0.0.1	clients3.google.com	             # Chromium.app
				#127.0.0.1	clients4.google.com	             # Chromium.app
				#127.0.0.1	clients2.googleusercontent.com       # Chromium.app
				#127.0.0.1	themes.googleusercontent.com	     # Chromium.app
				#127.0.0.1	cache.pack.google.com	             # Chromium.app
				#127.0.0.1	csi.gstatic.com			     # Chromium.app
				#127.0.0.1	ssl.gstatic.com		             # Chromium.app
				#127.0.0.1	www.gstatic.com		             # Chromium.app
				#127.0.0.1	t0.gstatic.com			     # Chromium.app
				#127.0.0.1	t1.gstatic.com			     # Chromium.app
				#127.0.0.1	t2.gstatic.com			     # Chromium.app
				#127.0.0.1	t3.gstatic.com			     # Chromium.app
				#127.0.0.1	android.clients.google.com	     # Chromium.app
				## 127.0.0.1	fonts.gstatic.com		     # Chromium.app
				#127.0.0.1	safebrowsing.clients.google.com      # Chromium.app
				#127.0.0.1	alt1-safebrowsing.google.com	     # Chromium.app
				#127.0.0.1	alt2-safebrowsing.google.com	     # Chromium.app
				#127.0.0.1	alt3-safebrowsing.google.com	     # Chromium.app
				#127.0.0.1	safebrowsing.google.com		     # Chromium.app
				#127.0.0.1	sb-ssl.google.com		     # Chromium.app
				#127.0.0.1	talkgadget.google.com		     # Chromium.app
				#127.0.0.1	talkx.l.google.com		     # Chromium.app
				#127.0.0.1	talk.google.com			     # Chromium.app
				#127.0.0.1	mtalk.google.com		     # Chromium.app
				#127.0.0.1	xmpp.google.com			     # Chromium.app
				#127.0.0.1	xmppx.l.google.com		     # Chromium.app
				#127.0.0.1	relay.google.com		     # Chromium.app
				#127.0.0.1	stun.l.google.com		     # Chromium.app
				#127.0.0.1	accounts.google.com		     # Chromium.app
				#127.0.0.1	accounts.youtube.com		     # Chromium.app
				#127.0.0.1	accounts.blogger.com		     # Chromium.app
				#127.0.0.1	i18napis.appspot.com		     # Chromium.app
				#127.0.0.1	googleads4.g.doubleclick.net	     # Chromium.app
				#127.0.0.1	googleads.g.doubleclick.net	     # Chromium.app
				#127.0.0.1	ad.doubleclick.net		     # Chromium.app
				#127.0.0.1	pubads.g.doubleclick.net	     # Chromium.app
				#127.0.0.1	c.admob.com			     # Chromium.app
				#127.0.0.1	e.admob.com			     # Chromium.app
				#127.0.0.1	media.admob.com			     # Chromium.app
				#127.0.0.1	lh3.ggpht.com			     # Chromium.app
				#127.0.0.1	lh4.ggpht.com			     # Chromium.app
				#127.0.0.1	lh5.ggpht.com			     # Chromium.app
				#127.0.0.1	lh6.ggpht.com			     # Chromium.app
				#127.0.0.1	pagead2.googlesyndication.com	     # Chromium.app
				#127.0.0.1	partner.googleadservices.com	     # Chromium.app
				#127.0.0.1	www.googleadservices.com	     # Chromium.app
				#127.0.0.1	s0.2mdn.net			     # Chromium.app
				#127.0.0.1	prod.fastly.net			     # Chromium.app
				#127.0.0.1	chrome.googleechotest.com	     # Chromium.app
				## 127.0.0.1	chrome-devtools-frontend.appspot.com # Chromium.app
				## 127.0.0.1	redirector.googlevideo.com	     # Chromium.app
				## 127.0.0.1	redirector.gvt1.com		     # Chromium.app
				## 127.0.0.1	etherx.jabber.org         	     # Chromium.app


		#echo "# -----------------------------"
		#echo "# • Removing Wi-Fi information"
		#echo "# -----------------------------"
		###Saved Wi-Fi information (SSID, last connection, etc.) can be found in
		##`/Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist`
}
#}}}
#-------------------------------------------------------------------------------------------#
#                                              SCRIPT
#-------------------------------------------------------------------------------------------#
isAdmin 
# # Keep-alive: update existing sudo time stamp if set, otherwise do nothing.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
# Ask for the administrator password upfront
# sudo -v
##
emulate -L zsh
banner
timestamp default
LaunchLondoncallingOnorNO
clear
# echo ""
# echo ""
# LogAuditASL
# clear
# echo ""
# echo ""
# SecuringSystemHardwares
# clear
# echo ""
# echo ""
# SecuringSystemPreferences
# clear
# echo ""
# echo ""
# SecuringSystemGenerals
# echo ""
# echo ""
SecuringApplicationsService
# echo ""
# echo ""
# SecuringNetworkServices
# LaunchLondoncalling disable

return 0

### Modeline {{{                                                                                                
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
