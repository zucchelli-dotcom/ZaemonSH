#!/usr/bin/env zsh -f


##########################################################################################
#                                                                                        #
#  ZaemonSH created by :                                                                 #
#  Zucchelli Bryan && @N@TOME && Admiral Gr@ss H0pper on Oct 13, 2016.                   #
#  Copyright (c) 2019. All rights reserved.                                              #
#  Inspired by zsh-templates-osx created by :                                            #
#  William Scott on May 11, 2007.                                                        #
#  Copyright (c) 2007. All rights reserved.                                              #
#                                                                                        #
#  This program is free software; you can redistribute it and/or modify it under         #
#  the terms of the GNU General Public License as published by the Free Software         #
#  Foundation; either version 2 of the License, or (at your option) any later version.   #
#                                                                                        #
#  This program is distributed in the hope that it will be useful, but WITHOUT           #
#  ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or                #
#  FITNESS FOR A PARTICULAR PURPOSE.                                                     #
#  See the GNU General Public License for more details.                                  #
#                                                                                        #
#  You should have received a copy of the GNU General Public License                     #
#  along with this program ; if not, write to the Free Software Foundation,              #
#  Inc., 51 Franklin Street, Fifth Floor, Boston,  MA 02110-1301 USA                     #
#                                                                                        #
#  cf. URL:   http://www.fsf.org/licensing/licenses/gpl.html                             #
#                                                                                        #
##########################################################################################


#----------------------------------------------------------------------------------------#
#                                     DESCRIPTION
#----------------------------------------------------------------------------------------#
 #  2```   		╚⊙ ⊙╝
 #  2         ╚═(███)═╝  
 #  2        ╚═(███)═╝   
 #  2       ╚═(███)═╝     
 #  2      ╚═(███)═╝
 #  2    ╚═(███)═╝
 #  2  ╚═(███)═╝
 #  2 ╚═(███)═╝
 #  2  ╚═(███)═╝
 #  2    ╚═(███)═╝
 #  2     ╚═(███)═╝
 #  2  	    ╚═(███)═╝
 #  2``		 ╚═(███)═╝
 # 
# MacOSDefaults v0.0.1 :
# To handle defaults database to configure MacOS system.

#----------------------------------------------------------------------------------------#
#                                        TODO
#----------------------------------------------------------------------------------------#
# 22/11/2019 :


#-------------------------------------------------------------------------------------------#
#                                               NOTES
#-------------------------------------------------------------------------------------------#
# 22/11/2019 :



#----------------------------------------------------------------------------------------#
#                                       CHANGES
#----------------------------------------------------------------------------------------#
# 20/11/2019 :
# # Create this. 

#-------------------------------------------------------------------------------------------#
#                                              CONFIG
#-------------------------------------------------------------------------------------------#
### Set the colours you can use
black='\033[0;30m'
white='\033[0;37m'
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
blue='\033[0;34m'
magenta='\033[0;35m'
cyan='\033[0;36m'

# Resets the style
reset=`tput sgr0`

# Color-echo. Improved. [Thanks @joaocunha]
# arg $1 = message
# arg $2 = Color
cecho() {
  echo "${2}${1}${reset}"
  return
}

## Set continue to false by default
# CONTINUE=false


#-------------------------------------------------------------------------------------------#
#                                             FUNCTIONS
#-------------------------------------------------------------------------------------------#
banner () {
     clear
     echo " ##############################################################################"
     echo " #                                                                            #"
     echo " #  ${GREEN}This is ${RED}$FCT_NAME: ${YEL}$VERSION on ${GREEN}$OSTYPE${NC}${YEL} system.${NC}"
     echo " #  CopyL®®v 2020, Zucchelli Bryan                                            #"
     echo " #                                                                            #"
     echo " #  Unless required by applicable law or agreed to in writing, software       #"
     echo " #  distributed under the License is distributed on an AS IS BASIS,           #"
     echo " #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  #"
     echo " #  See the License for the specific language governing permissions and       #"
     echo " #  limitations under the License.                                            #"
     echo " #                                                                            #"
     echo " ##############################################################################"
     echo ""
}

help(){
  cat<<__EOF__
  ${RED}
    usage:  [  ]

    Examples:
                                                 # .

  ${NC}
__EOF__
}


# echo ""
# cecho "###############################################" $red
# cecho "#        DO NOT RUN THIS SCRIPT BLINDLY       #" $red
# cecho "#         YOU'LL PROBABLY REGRET IT...        #" $red
# cecho "#                                             #" $red
# cecho "#              READ IT THOROUGHLY             #" $red
# cecho "#         AND EDIT TO SUIT YOUR NEEDS         #" $red
# cecho "###############################################" $red
# echo ""


# echo ""
echo "Have you read through the script you're about to run and " $red
cecho "understood that it will make changes to your computer? (y/n)" $red
read -r response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
  CONTINUE=true
fi

if ! $CONTINUE; then
  # Check if we're continuing and output a message if not
  cecho "Please go read the script, it only takes a few minutes" $red
  exit
fi


### Close any open System Preferences panes, to prevent them from overriding
# settings we’re about to change
osascript -e 'tell application "System Preferences" to quit'

### Ask for the administrator password upfront
sudo -v

### Keep-alive: update existing `sudo` time stamp until scrip has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null 

# backup defaults database to /tmp
sudo defaults read > /tmp/root.defaults
defaults read > /tmp/$USER.defaults

###############################################################################
# General                                                                     #
###############################################################################
		echo "
		###############################################################################
		# General UI/UX                                                               #
		###############################################################################
		"
		### Set the timezone; see `sudo systemsetup -listtimezones` for other values
		echo ""
		echo "Set the timezone; see `sudo systemsetup -listtimezones` for other values"
		sudo systemsetup -settimezone "Europe/Paris" > /dev/null

		### Set language and text formats
		### Note: if you’re in the US, replace `EUR` with `USD`, `Centimeters` with
		### `Inches`, `en_GB` with `en_US`, and `true` with `false`.
		echo ""
		echo "Set language and text formats"
		defaults write NSGlobalDomain AppleLanguages -array "fr" "en"
		defaults write NSGlobalDomain AppleLocale -string "fr_FR@currency=EUR"
		defaults write NSGlobalDomain AppleMeasurementUnits -string "Centimeters"
		defaults write NSGlobalDomain AppleMetricUnits -bool true


		# Show fast user switching menu as:
		# 0 : Full Name
		# 1 : Account Name
		# 2 : Icon
		defaults write NSGlobalDomain userMenuExtraStyle -int 1



###############################################################################
# General UI/UX                                                               #
###############################################################################
		echo "
		###############################################################################
		# General UI/UX                                                               #
		###############################################################################
		"

		### ⌥⌘, brings up System Preferences dialog (opt+cmd+comma)
		echo ""
		echo "⌥⌘, brings up System Preferences dialog (opt+cmd+comma)"
		defaults write "Apple Global Domain" NSUserKeyEquivalents -dict-add "System Preferences\\U2026" "@~,"
		defaults write com.apple.universalaccess com.apple.custommenu.apps -array-add NSGlobalDomain

		### Set option-cmd-Q as quit shortcut (Safari as example)
		echo "Setting option-cmd-Q as quit shortcut (Safari as example)"
		defaults write -g NSUserKeyEquivalents '{""Quit Safari" = "~@Q";}'

		### Set cmd-comma as shortcut for 'Preferences...'
		echo ""
		echo "Settting cmd-comma as shortcut for 'Preferences"
		defaults write -g NSUserKeyEquivalents -dict-add "Preferences..." "@\U002C"

		### Menu bar: disable transparency
		echo ""
		echo "Menu bar: disable transparency"
		defaults write NSGlobalDomain AppleEnableMenuBarTransparency -bool false

		### Set computer name (as done via System Preferences → Sharing)
		echo ""
		echo "Would you like to set your computer name (as done via System Preferences >> Sharing)?  (y/n)"
		sudo scutil --set ComputerName "0x6D746873"
		sudo scutil --set HostName "0x6D746873"
		sudo scutil --set LocalHostName "0x6D746873"
		sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "0x6D746873"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   echo "What would you like it to be?"
		#   read COMPUTER_NAME
		#   sudo scutil --set ComputerName $COMPUTER_NAME
		#   sudo scutil --set HostName $COMPUTER_NAME
		#   sudo scutil --set LocalHostName $COMPUTER_NAME
		#   sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string $COMPUTER_NAME
		# fi

		### Disable the sound effects on boot
		echo ""
		echo "Disable the sound effects on boot"
		sudo nvram SystemAudioVolume=" "

		### Disable transparency in the menu bar and elsewhere on Yosemite
		echo ""
		echo "Disable the menubar transparency? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write com.apple.universalaccess reduceTransparency -bool true
		# fi
		defaults write com.apple.universalaccess reduceTransparency -bool true

		### Menu bar: hide the Time Machine, Volume, and User icons
		echo ""
		echo "Hide the Time Machine, Volume, User, and Bluetooth icons"
		for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
			defaults write "${domain}" dontAutoLoad -array \
				"/System/Library/CoreServices/Menu Extras/TimeMachine.menu" \
				"/System/Library/CoreServices/Menu Extras/Volume.menu" \
				"/System/Library/CoreServices/Menu Extras/User.menu"
		done
		defaults write com.apple.systemuiserver menuExtras -array \
			"/System/Library/CoreServices/Menu Extras/Bluetooth.menu" \
			"/System/Library/CoreServices/Menu Extras/AirPort.menu" \
			"/System/Library/CoreServices/Menu Extras/Battery.menu" \
			"/System/Library/CoreServices/Menu Extras/Clock.menu"
		# echo ""
		# echo "Hide the Time Machine, Volume, User, and Bluetooth icons?  (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   # Get the system Hardware UUID and use it for the next menubar stuff
		#   for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
		#     defaults write "${domain}" dontAutoLoad -array \
		#       "/System/Library/CoreServices/Menu Extras/TimeMachine.menu" \
		#       "/System/Library/CoreServices/Menu Extras/Volume.menu" \
		#       "/System/Library/CoreServices/Menu Extras/User.menu"
		#   done

		#   defaults write com.apple.systemuiserver menuExtras -array \
		#     "/System/Library/CoreServices/Menu Extras/Bluetooth.menu" \
		#     "/System/Library/CoreServices/Menu Extras/AirPort.menu" \
		#     "/System/Library/CoreServices/Menu Extras/Battery.menu" \
		#     "/System/Library/CoreServices/Menu Extras/Clock.menu"
		# fi

		### Set highlight color to green
		#echo ""
		#echo "Set highlight color to green"
		#defaults write NSGlobalDomain AppleHighlightColor -string "0.764700 0.976500 0.568600"

		### Set sidebar icon size to medium
		echo ""
		echo "Set sidebar icon size to medium"
		defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2

		### Always show scrollbars
		### Possible values: `WhenScrolling`, `Automatic` and `Always`
		echo ""
		echo "Always show scrollbars"
		defaults write NSGlobalDomain AppleShowScrollBars -string "Always"

		# Disable opening and closing window animations
		echo ""
		echo "Disable opening and closing window animations"
		defaults write NSGlobalDomain NSAutomaticWindowAnimationsEnabled -bool false

		### Disable the over-the-top focus ring animation
		echo ""
		echo "Disable the over-the-top focus ring animation"
		defaults write NSGlobalDomain NSUseAnimatedFocusRing -bool false

		### Disable smooth scrolling
		# (Uncomment if you’re on an older Mac that messes up the animation)
		echo ""
		echo "Disable smooth scrolling"
		#defaults write NSGlobalDomain NSScrollAnimationEnabled -bool false

		### Increase window resize speed for Cocoa applications
		echo ""
		echo "Increase window resize speed for Cocoa applications"
		defaults write NSGlobalDomain NSWindowResizeTime -float 0.001

		# Opening and closing speed of Quick Look windows
		echo ""
		echo "Opening and closing speed of Quick Look windows"
		defaults write NSGlobalDomain QLPanelAnimationDuration -float 0

		### Expand save panel by default
		echo ""
		echo "Expand save panel by default"
		defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
		defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true
		defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
		defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

		### Expand print panel by default
		echo ""
		echo "Expand print panel by default"
		defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
		defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool 

		### Automatically quit printer app once the print jobs complete
		echo ""
		echo "Automatically quit printer app once the print jobs complete"
		defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

		### Displaying ASCII control characters using caret notation in standard text views
		# Try e.g. `cd /tmp; unidecode "\x{0000}" > cc.txt; open -e cc.txt`
		echo ""
		echo "Displaying ASCII control characters using caret notation in standard text views"
		defaults write NSGlobalDomain NSTextShowsControlCharacters -bool true

		### Save to disk (not to iCloud) by default
		echo ""
		echo "Save to disk, rather than iCloud, by default? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
		# fi
		defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

		### Disable the “Are you sure you want to open this application?” dialog
		echo ""
		echo "Disable the “Are you sure you want to open this application?” dialog"
		defaults write com.apple.LaunchServices LSQuarantine -bool false

		### Set recent documents limit to 0
		echo "Setting recent documents limit to 0"
		echo ""
		defaults write -g NSRecentDocumentsLimit -int 0

		### Try e.g. `cd /tmp; unidecode "\x{0000}" > cc.txt; open -e cc.txt`
		# echo ""
		# echo "Displaying ASCII control characters using caret notation in standard text views"
		# defaults write NSGlobalDomain NSTextShowsControlCharacters -bool true

		### Disable Resume system-wide
		echo ""
		echo "Disable system-wide resume? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false
		# fi
		defaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false

		### Disable automatic termination of inactive apps
		echo ""
		echo "Disable automatic termination of inactive apps"
		defaults write NSGlobalDomain NSDisableAutomaticTermination -bool true

		# Rubber-band scrolling (doesn't affect web views)
		# defaults write NSGlobalDomain NSScrollViewRubberbanding -bool false

		# Disable App Nap (not recomended)
		# defaults write NSGlobalDomain NSAppSleepDisabled -bool true

		### Disable the crash reporter
		echo ""
		echo "Disable the crash reporter"
		#defaults write com.apple.CrashReporter DialogType -string "none"

		### Show Crash Reporter in Notifications
		echo ""
		echo "Show Crash Reporter in Notification"
		defaults write com.apple.CrashReporter UseUNC -bool true

		### Set Help Viewer windows to non-floating mode
		echo ""
		echo "Set Help Viewer windows to non-floating mode"
		defaults write com.apple.helpviewer DevMode -bool true

		### Reveal IP address, hostname, OS version, etc. when clicking the clock
		### in the login window
		echo ""
		echo "Revealing IP address, hostname, OS version, etc.\
		      when clicking the clock in the login window"
		sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

		### Restart automatically if the computer freezes
		echo ""
		echo "Restart automatically if the computer freezes"
		sudo systemsetup -setrestartfreeze on

		### Never go into computer sleep mode
		echo ""
		echo "Never go into computer sleep mode"
		sudo systemsetup -setcomputersleep Off > /dev/null

		### Check for software updates daily, not just once per week
		echo ""
		echo "Check for software updates daily, not just once per week"
		defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1


		### Disable automatic capitalization as it’s annoying when typing code
		echo ""
		echo "Disable automatic capitalization as it’s annoying when typing code"
		defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

		## Disable automatic period substitution as it’s annoying when typing code
		echo ""
		echo "Disable automatic period substitution as it’s annoying when typing code"
		defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

		### Disable smart quotes as they’re annoying when typing code### Disable smart dashes and smart dashes as they’re annoying when typing code
		echo ""
		echo "Disable smart quotes and smart dashes? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
		#   defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
		# fi
		defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
		defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

		### Disable auto-correct
		echo ""
		echo "Disable auto-correct"
		defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

		### Set a custom wallpaper image. `DefaultDesktop.jpg` is already a symlink, and
		### all wallpapers are in `/Library/Desktop Pictures/`. The default is `Wave.jpg`.
		#rm -rf ~/Library/Application Support/Dock/desktoppicture.db
		#sudo rm -rf /System/Library/CoreServices/DefaultDesktop.jpg
		#sudo ln -s /path/to/your/image /System/Library/CoreServices/DefaultDesktop.jpg

		### Add ability to toggle between Light and Dark mode in Yosemite using ctrl+opt+cmd+t
		echo ""
		echo "Add ability to toggle between Light and Dark mode in Yosemite using ctrl+opt+cmd+t"
		# # http://www.reddit.com/r/apple/comments/2jr6s2/1010_i_found_a_way_to_dynamically_switch_between/
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   sudo defaults write /Library/Preferences/.GlobalPreferences.plist _HIEnableThemeSwitchHotKey -bool true
		# fi
		sudo defaults write /Library/Preferences/.GlobalPreferences.plist _HIEnableThemeSwitchHotKey -bool true


###############################################################################
# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
###############################################################################
		echo "
		###############################################################################
		# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #
		###############################################################################
		"

		### Trackpad: enable tap to click for this user and for the login Tap to click
		echo ""
		echo "Trackpad: enable tap to click for this user and for the login Tap to click"
		defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true


		### Map "click or tap with two fingers" to the secondary click
		echo 'Map "click or tap with two fingers" to the secondary click'
		defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true &&
		defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true &&
		defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 0 &&
		defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 0

		### Drag windows with three fingers
		echo ""
		echo "Trackpad: enable tap to click for this user and for the login screen.Drag windows with three fingers"
		defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool true 
		defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
		defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

		### Trackpad: map bottom right corner to right-click
		echo ""
		echo "Trackpad: map bottom right corner to right-clic for this user and for the login screen"
		defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2
		defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true
		defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1
		defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true

		### Trackpad: swipe between pages with three fingers
		echo ""
		echo "Trackpad: swipe between pages with three fingers for this user and for the login screen"
		defaults write NSGlobalDomain AppleEnableSwipeNavigateWithScrolls -bool true
		defaults -currentHost write NSGlobalDomain com.apple.trackpad.threeFingerHorizSwipeGesture -int 1
		defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadThreeFingerHorizSwipeGesture -int 1

		# Disable swipe between pages
		#defaults write AppleEnableSwipeNavigateWithScrolls -bool false

		### Setting trackpad & mouse speed to a reasonable number
		# 0: Slow
		# 3: Fast
		echo ""
		echo "Setting trackpad & mouse speed to a reasonable number"
		defaults write -g com.apple.mouse.scaling 3

		### Set Haptic feedback
		# Haptic feedback
		# 0: Light
		# 1: Medium
		# 2: Firm
		echo ""
		echo "Haptic feedback"
		defaults write com.apple.AppleMultitouchTrackpad FirstClickThreshold -int 0
		defaults write com.apple.AppleMultitouchTrackpad SecondClickThreshold -int 0

		### Force Click and haptic feedback
		echo "Force Click and haptic feedback"
		echo ""
		defaults write NSGlobalDomain com.apple.trackpad.forceClick -bool true
		defaults write com.apple.AppleMultitouchTrackpad ForceSuppressed -bool false
		defaults write com.apple.AppleMultitouchTrackpad ActuateDetents -bool true

		### Silent clicking
		echo ""
		echo ""
		defaults write com.apple.AppleMultitouchTrackpad ActuationStrength -int 0

		# Enable three finger drag
		#defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -int 1
		#defaults write com.apple.AppleMultitouchTrackpad com.apple.driver.AppleBluetoothMultitouch.trackpad -int 1

		### Disable “natural” (Lion-style) scrolling
		echo ""
		echo "Disable “natural” (Lion-style) scrolling"
		defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

		### Increase sound quality for Bluetooth headphones/headsets
		echo ""
		echo "Increasing sound quality for Bluetooth headphones/headsets"
		defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

		### Enable full keyboard access for all controls
		### (e.g. enable Tab in modal dialogs)
		echo ""
		echo "Enabling full keyboard access for all controls (enable Tab in modal dialogs, menu windows, etc.)"
		defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

		### Enable access for assistive devices
		echo ""
		echo "Enabling access for assistive device"
		echo -n 'a' | sudo tee /private/var/db/.AccessibilityAPIEnabled > /dev/null 2>&1
		sudo chmod 444 /private/var/db/.AccessibilityAPIEnabled

		# TODO: avoid GUI password prompt somehow (http://apple.stackexchange.com/q/60476/4408)
		#sudo osascript -e 'tell application "System Events" to set UI elements enabled to true'

		### Use scroll gesture with the Ctrl (^) modifier key to zoom
		echo ""
		echo "Use scroll gesture with the Ctrl (^) modifier key to zoom"
		defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
		defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144

		### Follow the keyboard focus while zoomed in
		echo ""
		echo "Follow the keyboard focus while zoomed in"
		defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true

		### Disable press-and-hold for keys in favor of key repeat
		echo ""
		echo "Disable press-and-hold for keys in favor of key repeat"
		defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

		### Set a blazingly fast keyboard repeat rate
		echo ""
		echo "Set a blazingly fast keyboard repeat rate"
		defaults write NSGlobalDomain KeyRepeat -int 1 
		defaults write NSGlobalDomain InitialKeyRepeat -int 10

		### Disable auto-correct
		echo ""
		echo "Disable auto-correct"
		read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		# 	defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
		# fi
		defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

		### Stop iTunes from responding to the keyboard media keys
		echo ""
		echo "Stop iTunes from responding to the keyboard media keys"
		launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2> /dev/null
	
		### Turn off keyboard illumination when computer is not used for 5 minutes
		# echo ""
		# echo "Turn off keyboard illumination when computer is not used for 5 minutes"
		#defaults write com.apple.BezelServices kDimTime -int 300
		
        ### Automatically adjust brightness
		#echo ""
		echo "Automatically adjust brightness"
		defaults write com.apple.BezelServices dAuto -bool true
		sudo defaults write /Library/Preferences/com.apple.iokit.AmbientLightSensor "Automatic Display Enabled" -bool true

		### Disable display from automatically adjusting brightnes
		#echo ""
		#echo "Disable display from automatically adjusting brightness? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write com.apple.BezelServices dAuto -bool true
		#   sudo defaults write /Library/Preferences/com.apple.iokit.AmbientLightSensor "Automatic Display Enabled" -bool false
		# fi
		#defaults write com.apple.BezelServices dAuto -bool true
		#sudo defaults write /Library/Preferences/com.apple.iokit.AmbientLightSensor "Automatic Display Enabled" -bool false

		### Disable keyboard from automatically adjusting backlight brightness in low light
		echo "Disable keyboard from automatically adjusting backlight brightness in low light? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   sudo defaults write /Library/Preferences/com.apple.iokit.AmbientLightSensor "Automatic Keyboard Enabled" -bool false
		# fi
		sudo defaults write /Library/Preferences/com.apple.iokit.AmbientLightSensor "Automatic Keyboard Enabled" -bool false

		
        
        ### CDs & DVDs dedicate actions
		echo "CDs & DVDs dedicate actions"
		echo ""
		# Inserted CD & DVD Actions:
		#   1 : Ignore
		#   2 : Ask what to do
		#   5 : Open other application…
		# 100 : Open Finder
		# 101 : Open iTunes
		# 102 : Open Disk Utility
		# Blank CD inseted
		defaults write com.apple.digihub com.apple.digihub.blank.cd.appeared   -dict action 1
		# Blank DVD inserted
		defaults write com.apple.digihub com.apple.digihub.blank.dvd.appeared  -dict action 1
		# Music CD inserted
		defaults write com.apple.digihub com.apple.digihub.cd.music.appeared   -dict action 1
		# Pictured CD inserted
		defaults write com.apple.digihub com.apple.digihub.cd.picture.appeared -dict action 1
		# Video DVD inserted
		defaults write com.apple.digihub com.apple.digihub.dvd.video.appeared  -dict action 1


###############################################################################
# Screen                                                                      #
###############################################################################
		echo "
		###############################################################################
		# Screen                                                                      #
		###############################################################################"

		### Show mirroring options in the menu bar when available
		echo ""
		echo "Show mirroring options in the menu bar when available"
		defaults write com.apple.airplay showInMenuBarIfPresent -bool true

		### Set the inactivity interval to 60min.
		defaults -currentHost write com.apple.screensaver idleTime -int 1800

		### Require password immediately after sleep or screen saver begins
		echo ""
		echo "Requiring password immediately after sleep or screen saver begins"
		defaults write com.apple.screensaver askForPassword -int 1
		defaults write com.apple.screensaver askForPasswordDelay -int 0

		### Save screenshots to the desktop
		echo ""
		echo "Where do you want screenshots to be stored? (hit ENTER if you want ~/Desktop as default)"
		# # Thanks https://github.com/omgmog
		# read screenshot_location
		# echo ""
		# if [ -z "${screenshot_location}" ]
		# then
		#   # If nothing specified, we default to ~/Desktop
		#   screenshot_location="${HOME}/Desktop"
		# else
		#   # Otherwise we use input
		#   if [[ "${screenshot_location:0:1}" != "/" ]]
		#   then
		#     # If input doesn't start with /, assume it's relative to home
		#     screenshot_location="${HOME}/${screenshot_location}"
		#   fi
		# fi
		# echo "Setting location to ${screenshot_location}"
		# defaults write com.apple.screencapture location -string "${screenshot_location}"
		defaults write com.apple.screencapture location -string "${HOME}/Desktop"


		### Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
		echo ""
		echo "What format should screenshots be saved as? (hit ENTER for PNG, options: BMP, GIF, JPG, PDF, TIFF) "
		# read screenshot_format
		# if [ -z "$1" ]
		# then
		#   echo ""
		#   echo "Setting screenshot format to PNG"
		#   defaults write com.apple.screencapture type -string "png"
		# else
		#   echo ""
		#   echo "Setting screenshot format to $screenshot_format"
		#   defaults write com.apple.screencapture type -string "$screenshot_format"
		# fi
		defaults write com.apple.screencapture type -string "png"

		### Disable shadow in screenshots
		echo ""
		echo "Disable shadow in screenshots"
		defaults write com.apple.screencapture disable-shadow -bool true

		# Randomize screenshot names
		# @link http://blog.stefanxo.com/2014/02/random-screenshot-names-on-mac-os-x/
		#cron_entry='* * * * * openssl rand -base64 5 | base64 | cut -c1-5 | xargs defaults write com.apple.screencapture name'
		#if ! crontab -l | fgrep "$cron_entry" >/dev/null; then
		#  (crontab -l 2>/dev/null; echo "$cron_entry") | \
		#    crontab -
		#fi

		# Screenshot filename format.
		# WARNING: This approach is *dangerous*, as it modifies core system files.
		#  SIP must be disabled for this method to work.
		# NOTE: This approach makes a backup of system files.
		# TIP: A better approach is to use an Automator workflow.
		#   %@ %@ at %@:
		#     %1$@ name (default: Screen Shot)
		#     %2$@ date (default: yyyy-MM-dd)
		#     %3$@ time (default: System "Medium" time, which must be changed globally)
		#screencapturestrings='/System/Library/CoreServices/SystemUIServer.app/Contents/Resources/English.lproj/ScreenCapture.strings'
		#sudo cp "$screencapturestrings" "${screencapturestrings}.bak" && \
		#sudo plutil -convert xml1 "$screencapturestrings" -o - | \
		#    sed -e 's#<string>%@ %@ at %@</string>#<string>%@%@%@</string>#'  \
		#        -e 's#<string>-</string>#<string></string>#' \
		#        -e 's#<string>.</string>#<string></string>#' \
		#        -e 's#<string>%@ %@</string>#<string>%@ %@</string>#' \
		#        -e 's#<string>yyyy-MM-dd</string>#<string>yyyy-MM-dd</string>#' | \
		#    sudo plutil -convert binary1 -o "$screencapturestrings" -

		### Enable subpixel font rendering on non-Apple LCDs
		# 0 : Disabled # 1 : Minimal # 2 : Medium # 3 : Smoother # 4 : Strong
		echo ""
		echo "Enabling subpixel font rendering on non-Apple LCDs"
		defaults write NSGlobalDomain AppleFontSmoothing -int 2

		### Enable HiDPI display modes (requires restart)
		echo ""
		echo "Enable HiDPI display modes (requires restart)"
		sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true


###############################################################################
# Aliasing Hidden apps prefpane and binary       							  #
###############################################################################
		echo "
		###############################################################################
		# Aliasing Hidden apps prefpane and binary       							  #
		###############################################################################"
		# Link hidden applications
		for app in /System/Library/CoreServices/Applications/* \
		           /Applications/Xcode.app/Contents/Applications/* \
		           /Applications/Xcode.app/Contents/Developer/Applications/*; do
		  sudo ln -s "$app" /Applications/Utilities/
		done

		hidden_apps=(
		  'Network Diagnostics'
		)

		for app in "${hidden_apps[@]}"; do
		  sudo ln -s "/System/Library/CoreServices/${app}.app" \
		             "/Applications/Utilities/${app}.app"
		done

		# Link hidden prefPanes
		sudo ln -s '/System/Library/CoreServices/Applications/Archive Utility.app/Contents/Resources/Archives.prefPane' \
		           '/Library/PreferencePanes/Archives.prefPane'

		# Link hidden command line tools
		sudo ln -s '/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport' \
		           '/usr/local/bin/airport'
		sudo ln -s '/System/Library/Frameworks/JavaScriptCore.framework/Versions/Current/Resources/jsc' \
		           '/usr/local/bin/jsc'

		# Link hidden fonts
		sudo ln -s /System/Library/PrivateFrameworks/CoreRecognition.framework/Resources/Fonts/ \
		  /Library/Fonts/CoreRecognition


###############################################################################
# Finder                                                                      #
###############################################################################
		echo "
		###############################################################################
		# Finder                                                                      #
		###############################################################################
		"

		### Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons
		echo ""
		echo "Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons"
		defaults write com.apple.finder QuitMenuItem -bool true

		### Finder: disable window animations and Get Info animations
		echo ""
		echo "Finder: disable window animations and Get Info animations"
		defaults write com.apple.finder DisableAllAnimations -bool true

		### Set Desktop as the default location for new Finder windows
		### For other paths, use `PfLo` and `file:///full/path/here/`
		echo ""
		echo "Set Desktop as the default location for new Finder windows"
		# New window target
		# Computer     : `PfCm`
		# Volume       : `PfVo`
		# $HOME        : `PfHm`
		# Desktop      : `PfDe`
		# Documents    : `PfDo`
		# All My Files : `PfAF`
		# Other…       : `PfLo`
		defaults write com.apple.finder NewWindowTarget -string "PfDe"
		defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}/Desktop/"

		### Show icons for hard drives, servers, and removable media on the desktop
		echo ""
		echo "Show icons for exernal hard drives, and removable media on the desktop? (y/n)"
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
		# fi
		defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true

		### Show icons for hard drives, servers, and removable media on the desktop
		echo ""
		echo "Show icons for hard drives, servers, and removable media on the desktop? (y/n)"
		defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true
		defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
		defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

		#### Finder: show hidden files by default
		echo ""
		echo "Show hidden files in Finder by default? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write com.apple.Finder AppleShowAllFiles -bool true
		# fi
		defaults write com.apple.finder AppleShowAllFiles -bool true

		### Finder: show all filename extensions
		echo ""
		echo "Show all filename extensions in Finder by default? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write NSGlobalDomain AppleShowAllExtensions -bool true
		# fi
		defaults write NSGlobalDomain AppleShowAllExtensions -bool true


		### Finder: show status bar
		echo ""
		echo "Show status bar in Finder by default"
		defaults write com.apple.finder ShowStatusBar -bool true
		# echo ""
		# echo "Show status bar in Finder by default? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write com.apple.finder ShowStatusBar -bool true
		# fi

		### Finder: show path bar
		echo ""
		echo "Show path bar in Finder by default"
		defaults write com.apple.finder ShowPathbar -bool true

		### Fix for the ancient UTF-8 bug in QuickLook (https://mths.be/bbo)
		### Commented out, as this is known to cause problems in various Adobe apps :(
		### See https://github.com/mathiasbynens/dotfiles/issues/237
		#echo "0x08000100:0" > ~/.CFUserTextEncoding

		### Finder: allow text selection in Quick Look
		echo ""
		echo "Allowing text selection in Quick Look/Preview in Finder by default"
		defaults write com.apple.finder QLEnableTextSelection -bool true

		### Display full POSIX path as Finder window title
		echo ""
		echo "Display full POSIX path as Finder window title? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
		# fi
		defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

		### Keep folders on top when sorting by name
		echo ""
		echo "Keep folders on top when sorting by name"
		defaults write com.apple.finder _FXSortFoldersFirst -bool true

		### When performing a search, search the current folder by default
		# This Mac       : `SCev`
		# Current Folder : `SCcf`
		# Previous Scope : `SCsp`
		echo ""
		echo "When performing a search, search the current folder by default"
		defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

		### Disable the warning when changing a file extension
		echo ""
		echo "Disable the warning when changing a file extension? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
		# fi
		defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

		# Arrange by Kind, Name, Application, Date Last Opened, Date Added, Date Modified, Date Created, Size, Tags, None
		defaults write com.apple.finder FXPreferredGroupBy -string "Kind"

		### Enable spring loading for directories
		defaults write NSGlobalDomain com.apple.springing.enabled -bool true

		### Remove the spring loading delay for directories
		defaults write NSGlobalDomain com.apple.springing.delay -float 0

		### Avoid creating .DS_Store files on network volumes
		echo ""
		echo "Avoid creation of .DS_Store files on network volumes? "
		defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
		# echo ""
		# echo "Avoid creation of .DS_Store files on network volumes? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
		# fi
		defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

		### Disable disk image verification
		echo ""
		echo "Disable disk image verification? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write com.apple.frameworks.diskimages skip-verify -bool true
		#   defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
		#   defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true
		# fi
		defaults write com.apple.frameworks.diskimages skip-verify -bool true
		defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
		defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true

		### Automatically open a new Finder window when a volume is mounted
		echo ""
		echo "Disable disk image verification? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		# 	defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true
		# 	defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true
		# 	defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true
		# fi
		defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool false
		defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool false
		defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool false


		# View Options
		# ColumnShowIcons    : Show preview column
		# ShowPreview        : Show icons
		# ShowIconThumbnails : Show icon preview
		# ArrangeBy          : Sort by dnam : Name         - kipl : Kind           - ludt : Date Last Opened
		#   						   pAdd : Date Added   - labl : Tags  		   - modd : Date Modified
		#   						   ascd : Date Created - logs : Size           
		/usr/libexec/PlistBuddy \
		    -c "Set :StandardViewOptions:ColumnViewOptions:ColumnShowIcons bool    false" \
		    -c "Set :StandardViewOptions:ColumnViewOptions:FontSize        integer 11"    \
		    -c "Set :StandardViewOptions:ColumnViewOptions:ShowPreview     bool    true"  \
		    -c "Set :StandardViewOptions:ColumnViewOptions:ArrangeBy       string  dnam"  \
		    ~/Library/Preferences/com.apple.finder.plist

		# Set icon view settings on desktop and in icon views
		for view in 'Desktop' 'FK_Standard' 'Standard'; do
		    # Item info near icons
		    /usr/libexec/PlistBuddy -c "Set :${view}ViewSettings:IconViewSettings:showItemInfo bool true" ~/Library/Preferences/com.apple.finder.plist
		    # Item info to right of icons
		    /usr/libexec/PlistBuddy -c "Set :${view}ViewSettings:IconViewSettings:labelOnBottom bool false" ~/Library/Preferences/com.apple.finder.plist
		    # Snap-to-grid for icons
		    /usr/libexec/PlistBuddy -c "Set :${view}ViewSettings:IconViewSettings:arrangeBy string grid" ~/Library/Preferences/com.apple.finder.plist
		    # Grid spacing for icons
		    /usr/libexec/PlistBuddy -c "Set :${view}ViewSettings:IconViewSettings:gridSpacing integer 100" ~/Library/Preferences/com.apple.finder.plist
		    # Icon size
		    /usr/libexec/PlistBuddy -c "Set :${view}ViewSettings:IconViewSettings:iconSize integer 32" ~/Library/Preferences/com.apple.finder.plist
		done

		### Show item info near icons on the desktop and in other icon views
		echo ""
		echo "Show item info near icons on the desktop and in other icon views? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   /usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist
		#   /usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist
		#   /usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist
		# fi
		/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist
		/usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist
		/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:showItemInfo true" ~/Library/Preferences/com.apple.finder.plist

		### Show item info to the right of the icons on the desktop
		echo ""
		echo "Show item info to the right of the icons on the desktop? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   /usr/libexec/PlistBuddy -c "Set DesktopViewSettings:IconViewSettings:labelOnBottom false" ~/Library/Preferences/com.apple.finder.plist
		# fi
		/usr/libexec/PlistBuddy -c "Set DesktopViewSettings:IconViewSettings:labelOnBottom false" ~/Library/Preferences/com.apple.finder.plist

		### Enable snap-to-grid for icons on the desktop and in other icon views
		echo ""
		echo "Enable snap-to-grid for icons on the desktop and in other icon views? (y/n)"
		 read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   /usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
		#   /usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
		#   /usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
		# fi
		/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
		/usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist
		/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:arrangeBy grid" ~/Library/Preferences/com.apple.finder.plist

		### Increase grid spacing for icons on the desktop and in other icon views
		echo ""
		echo "Increase grid spacing for icons on the desktop and in other icon views? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   /usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist
		#   /usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist
		#   /usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist
		# fi
		/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist
		/usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist
		/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:gridSpacing 100" ~/Library/Preferences/com.apple.finder.plist


		### Increase the size of icons on the desktop and in other icon views
		echo ""
		echo "Increase the size of icons on the desktop and in other icon views? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   /usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist
		#   /usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist
		#   /usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist
		# fi
		/usr/libexec/PlistBuddy -c "Set :DesktopViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist
		/usr/libexec/PlistBuddy -c "Set :FK_StandardViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist
		/usr/libexec/PlistBuddy -c "Set :StandardViewSettings:IconViewSettings:iconSize 80" ~/Library/Preferences/com.apple.finder.plist

		### Use list view in all Finder windows by default
		### Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
		# Icon View   : `icnv`
		# List View   : `Nlsv`
		# Column View : `clmv`
		# Cover Flow  : `Flwv`
		# After configuring preferred view style, clear all `.DS_Store` files
		echo ""
		echo "Use column view in all Finder windows by default? (y/n)"
		# to ensure settings are applied for every directory
		sudo find / -name ".DS_Store" --delete
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		#   defaults write com.apple.finder FXPreferredViewStyle Clmv
		# fi
		defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

		### Disable the warning before emptying the Trash
		echo ""
		echo "Disabling the warning before emptying the Trash? (y/n)"
		# read -r response
		# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
		# 	defaults write com.apple.finder WarnOnEmptyTrash -bool false
		# fi
		defaults write com.apple.finder WarnOnEmptyTrash -bool false

		### Empty Trash securely by default
		defaults write com.apple.finder EmptyTrashSecurely -bool true

		### Enable AirDrop over Ethernet and on unsupported Macs running Lion
		# defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true

		# Expand the following File Info panes:
		# “General”, “Open with”, and “Sharing & Permissions”
		defaults write com.apple.finder FXInfoPanesExpanded -dict \
		    General -bool true \
		    OpenWith -bool true \
		    Privileges -bool true

		# Desktop Enabled
		defaults write com.apple.finder CreateDesktop -bool false

		### Prohibit burning media
		defaults write com.apple.finder ProhibitBurn -bool YES;killall Finder

		### Prohibit use of 'Connect To'
		defaults write com.apple.finder ProhibitConnectTo -bool YES;killall Finder

		### Prohibit 'Goto Folder'
		defaults write com.apple.finder ProhibitGoToFolder -bool YES;killall Finder

		### Prohibit access to iCloud
		defaults write com.apple.finder ProhibitGoToiCloud -bool YES;killall 

		### Prohibit use of preferences
		defaults write com.apple.finder ProhibitFinderPreferences -bool YES;killall Finder

		### Enable the MacBook Air SuperDrive on any Mac
		#sudo nvram boot-args="mbasd=1"

		### Show the ~/Library folder
		chflags nohidden ~/Library

		### Remove Dropbox’s green checkmark icons in Finder
		file=/Applications/Dropbox.app/Contents/Resources/emblem-dropbox-uptodate.icns
		[ -e "${file}" ] && mv -f "${file}" "${file}.bak"

		### Expand the following File Info panes:
		### “General”, “Open with”, and “Sharing & Permissions”
		defaults write com.apple.finder FXInfoPanesExpanded -dict \
			General -bool true \
			OpenWith -bool true \
			Privileges -bool true


###############################################################################
# Dock, Dashboard, and hot corners                                            #
###############################################################################
			echo "
			###############################################################################
			# Dock, Dashboard, and hot corners                                            #
			###############################################################################
			"
			# Put Dock at right of desktop
			echo ""
			echo "Putting Dock at right of desktop"
			# top bottom right left
			defaults write com.apple.dock orientation -string right;killall Dock

			### Enable highlight hover effect for the grid view of a stack (Dock)
			echo ""
			echo "Enable highlight hover effect for the grid view of a stack (Dock)"
			defaults write com.apple.dock mouse-over-hilite-stack -bool true

			### Set the icon size of Dock items to 36 pixels
			echo ""
			echo "Setting the icon size of Dock items to 36 pixels for optimal size/screen-realestate"
			defaults write com.apple.dock tilesize -int 36

			### Change minimize/maximize window effect
			echo ""
			echo "Change minimize/maximize window effect"
			defaults write com.apple.dock mineffect -string "scale"

			### Minimize windows into their application’s icon
			echo ""
			echo "Minimize windows into their application’s icon"
			defaults write com.apple.dock minimize-to-application -bool true

			### Enable spring loading for all Dock items
			echo ""
			echo "Enable spring loading for all Dock items"
			defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true

			### Show indicator lights for open applications in the Dock
			echo ""
			echo "Show indicator lights for open applications in the Dock"
			defaults write com.apple.dock show-process-indicators -bool true

			### Wipe all (default) app icons from the Dock
			### This is only really useful when setting up a new Mac, or if you don’t use the Dock to launch apps.
			#echo ""
			#echo "Wipe all (default) app icons from the Dock? (y/n)"
			#echo "(This is only really useful when setting up a new Mac, or if you don't use the Dock to launch apps.)"
			# read -r response
			# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
			#   defaults write com.apple.dock persistent-apps -array
			# fi
			#defaults write com.apple.dock persistent-apps -array

			### Don’t animate opening applications from the Dock
			echo ""
			echo "Don’t animate opening applications from the Dock"
			defaults write com.apple.dock launchanim -bool false

			### Speed up Mission Control animations and grouping windows by application
			echo ""
			echo "Speeding up Mission Control animations and grouping windows by application"
			defaults write com.apple.dock expose-animation-duration -float 0.1
			defaults write com.apple.dock expose-group-by-app -bool false

			### Disable Dashboard
			echo ""
			echo "Disable Dashboard"
			defaults write com.apple.dashboard mcx-disabled -bool true

			### Don’t show Dashboard as a Space
			echo ""
			echo "Don’t show Dashboard as a Space"
			defaults write com.apple.dock dashboard-in-overlay -bool true

			### Don’t automatically rearrange Spaces based on most recent use
			echo ""
			echo "Don’t automatically rearrange Spaces based on most recent use"
			defaults write com.apple.dock mru-spaces -bool false

			### Remove the auto-hiding Dock delay
			echo ""
			echo "Set Dock to auto-hide and remove the auto-hiding delay? (y/n)"
			# read -r response
			# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
			#   defaults write com.apple.dock autohide -bool true
			#   defaults write com.apple.dock autohide-delay -float 0
			#   defaults write com.apple.dock autohide-time-modifier -float 0
			# fi
			defaults write com.apple.dock autohide -bool true
			defaults write com.apple.dock autohide-delay -float 0
			defaults write com.apple.dock autohide-time-modifier -float 0

			### Remove the animation when hiding/showing the Dock
			echo ""
			echo "Remove the animation when hiding/showing the Dock"
			defaults write com.apple.dock autohide-time-modifier -float 

			# Enable the 2D Dock
			echo ""
			echo "Enable the 2D Dock"
			#defaults write com.apple.dock no-glass -bool true

			### Automatically hide and show the Dock
			echo ""
			echo "Automatically hide and show the Dock"
			defaults write com.apple.dock autohide -bool true

			### Make Dock icons of hidden applications translucent
			defaults write com.apple.dock showhidden -bool true

			# Enable iTunes track notifications in the Dock
			defaults write com.apple.dock itunes-notifications -bool true

			# Add Command-F to search in iTunes
			defaults write com.apple.iTunes NSUserKeyEquivalents -dict-add "Target Search Field" "@F"

			### Disable the Launchpad gesture (pinch with thumb and three fingers)
			#defaults write com.apple.dock showLaunchpadGestureEnabled -int 0

			### Add iOS Simulator to Launchpad
			# echo "Add iOS Simulator to Launchpad"
			# sudo ln -sf "/Applications/Xcode.app/Contents/Developer/Applications/iOS Simulator.app" "/Applications/iOS Simulator.app"

			### Reset Launchpad, but keep the desktop wallpaper intact
			find "${HOME}/Library/Application Support/Dock" -name "*-*.db" -maxdepth 1 -delete

			### Add iOS Simulator to Launchpad
			sudo ln -sf "/Applications/Xcode.app/Contents/Developer/Applications/iOS Simulator.app" "/Applications/iOS Simulator.app"
			sudo ln -sf "/Applications/Xcode.app/Contents/Developer/Applications/Simulator (Watch).app" "/Applications/Simulator (Watch).app"

			### Add a spacer to the left side of the Dock (where the applications are)
			#defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'

			### Add a spacer to the right side of the Dock (where the Trash is)
			#defaults write com.apple.dock persistent-others -array-add '{tile-data={}; tile-type="spacer-tile";}'

			###
			# Hot corners
			# Possible values:
			#  0: no-op
			#  2: Mission Control
			#  3: Show application windows
			#  4: Desktop
			#  5: Start screen saver
			#  6: Disable screen saver
			#  7: Dashboard
			# 10: Put display to sleep
			# 11: Launchpad
			# 12: Notification Center
			# Top left screen corner → Mission Control
			defaults write com.apple.dock wvous-tl-corner -int 2
			defaults write com.apple.dock wvous-tl-modifier -int 0
			# Top right screen corner → Desktop
			defaults write com.apple.dock wvous-tr-corner -int 4
			defaults write com.apple.dock wvous-tr-modifier -int 0
			# Bottom left screen corner → Start screen saver
			defaults write com.apple.dock wvous-bl-corner -int 5
			defaults write com.apple.dock wvous-bl-modifier -int 0

			# Enable Single Application Mode
			# defaults write com.apple.dock single-app -bool true


###############################################################################
# Safari & WebKit                                                             #
###############################################################################
		echo "
		###############################################################################
		# Safari & WebKit                                                             #
		###############################################################################
		"
		### Privacy: don’t send search queries to Apple
		defaults write com.apple.Safari UniversalSearchEnabled -bool false
		defaults write com.apple.Safari SuppressSearchSuggestions -bool true

		### Press Tab to highlight each item on a web page
		defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true
		defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true

		### Show the full URL in the address bar (note: this still hides the scheme)
		defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true

		### Set Safari’s home page to `about:blank` for faster loading
		defaults write com.apple.Safari HomePage -string "about:blank"

		### Prevent Safari from opening ‘safe’ files automatically after downloading
		defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

		### Allow hitting the Backspace key to go to the previous page in history
		defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true

		### Hide Safari’s bookmarks bar by default
		defaults write com.apple.Safari ShowFavoritesBar -bool false

		### Hide Safari’s sidebar in Top Sites
		defaults write com.apple.Safari ShowSidebarInTopSites -bool false

		### Disable Safari’s thumbnail cache for History and Top Sites
		defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2

		### Enable Safari’s debug menu
		defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

		### Make Safari’s search banners default to Contains instead of Starts With
		defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

		### Remove useless icons from Safari’s bookmarks bar
		defaults write com.apple.Safari ProxiesInBookmarksBar "()"

		### Enable the Develop menu and the Web Inspector in Safari
		defaults write com.apple.Safari IncludeDevelopMenu -bool true
		defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
		defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

		### Add a context menu item for showing the Web Inspector in web views
		defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

		# Enable continuous spellchecking
		defaults write com.apple.Safari WebContinuousSpellCheckingEnabled -bool true
		# Disable auto-correct
		defaults write com.apple.Safari WebAutomaticSpellingCorrectionEnabled -bool false

		# Disable AutoFill
		defaults write com.apple.Safari AutoFillFromAddressBook -bool false
		defaults write com.apple.Safari AutoFillPasswords -bool false
		defaults write com.apple.Safari AutoFillCreditCardData -bool false
		defaults write com.apple.Safari AutoFillMiscellaneousForms -bool false

		# Warn about fraudulent websites
		defaults write com.apple.Safari WarnAboutFraudulentWebsites -bool true

		# Disable plug-ins
		defaults write com.apple.Safari WebKitPluginsEnabled -bool false
		defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled -bool false

		# Disable Java
		defaults write com.apple.Safari WebKitJavaEnabled -bool false
		defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaEnabled -bool false

		# Block pop-up windows
		defaults write com.apple.Safari WebKitJavaScriptCanOpenWindowsAutomatically -bool false
		defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically -bool false

		# Disable auto-playing video
		#defaults write com.apple.Safari WebKitMediaPlaybackAllowsInline -bool false
		#defaults write com.apple.SafariTechnologyPreview WebKitMediaPlaybackAllowsInline -bool false
		#defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false
		#defaults write com.apple.SafariTechnologyPreview com.apple.Safari.ContentPageGroupIdentifier.WebKit2AllowsInlineMediaPlayback -bool false

		# Enable “Do Not Track”
		defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true

		# Update extensions automatically
		defaults write com.apple.Safari InstallExtensionUpdatesAutomatically -bool true


###############################################################################
# Mail                                                                        #
###############################################################################
		echo "
		###############################################################################
		# Mail                                                                        #
		###############################################################################
		"

		### Disable send and reply animations in Mail.app
		defaults write com.apple.mail DisableReplyAnimations -bool true
		defaults write com.apple.mail DisableSendAnimations -bool true

		### Copy email addresses as `foo@example.com` instead of `Foo Bar <foo@example.com>` in Mail.app
		defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false

		### Add the keyboard shortcut ⌘ + Enter to send an email in Mail.app
		defaults write com.apple.mail NSUserKeyEquivalents -dict-add "Send" -string "@\\U21a9"

		### Display emails in threaded mode, sorted by date (oldest at the top)
		defaults write com.apple.mail DraftsViewerAttributes -dict-add "DisplayInThreadedMode" -string "yes"
		defaults write com.apple.mail DraftsViewerAttributes -dict-add "SortedDescending" -string "yes"
		defaults write com.apple.mail DraftsViewerAttributes -dict-add "SortOrder" -string "received-date"

		# Add keyboard shortcut to create bulleted list (⌘L)
		defaults write com.apple.mail NSUserKeyEquivalents -dict-add "\033Format\033Lists\033Insert Bulleted List" -string '@l'
		defaults write com.apple.mail NSUserKeyEquivalents -dict-add "\033Format\033Lists\033Insert Numbered List" -string '~@l'
		defaults write com.apple.mail NSUserKeyEquivalents -dict-add "\033Format\033Lists\033Convert to Bulleted List" -string '$@l'
		defaults write com.apple.mail NSUserKeyEquivalents -dict-add "\033Format\033Lists\033Convert to Numbered List" -string '$@l'
		defaults write com.apple.mail NSUserKeyEquivalents -dict-add "\033Format\033Lists\033Increase List Level" -string $'^@\U2192'
		defaults write com.apple.mail NSUserKeyEquivalents -dict-add "\033Format\033Lists\033Decrease List Level" -string $'^@\U2190'

		# View conversations:
		# Show most recent messages at the top
		defaults write com.apple.mail ConversationViewSortDescending -bool true

		#### Disable inline attachments (just show the icons)
		defaults write com.apple.mail DisableInlineAttachmentViewing -bool true

		### Disable automatic spell checking
		# Note: NSAllowContinuousSpellChecking must be enabled
		# While Typing   : InlineSpellCheckingEnabled
		# Before Sending : SpellCheckingOnSendEnabled
		# Never          : NoSpellCheckingEnabled
		defaults write com.apple.mail SpellCheckingBehavior -string "NoSpellCheckingEnabled"

		### Setting email addresses to copy as 'foo@example.com' instead of 'Foo Bar
		# echo ""
		# echo "Setting email addresses to copy as 'foo@example.com' instead of 'Foo Bar <foo@example.com>' in Mail.app"
		# defaults write com.apple.mail AddressesIncludeNameOnPasteboard -bool false

		# Show To/Cc label in message list
		defaults write com.apple.mail EnableToCcInMessageList -bool true

		# Sort Inbox by unread
		sudo /usr/libexec/PlistBuddy                                               \
		    -c "Delete :InboxViewerAttributes:SortOrder"                           \
		    -c "Add    :InboxViewerAttributes:SortOrder       string 'readstatus'" \
		    ~/Library/Containers/com.apple.mail/Data/Library/Preferences/com.apple.mail.plist


###############################################################################
# Terminal & iTerm 2                                                          #
###############################################################################
		echo "
		###############################################################################
		# Terminal & iTerm 2                                                          #
		###############################################################################
		"
		# Only use UTF-8 in Terminal.app
		defaults write com.apple.terminal StringEncodings -array 4

		# Use a modified version of the Solarized Dark theme by default in Terminal.app
		osascript <<EOD
		tell application "Terminal"

			local allOpenedWindows
			local initialOpenedWindows
			local windowID
			set themeName to "Solarized Dark xterm-256color"

			(* Store the IDs of all the open terminal windows. *)
			set initialOpenedWindows to id of every window

			(* Open the custom theme so that it gets added to the list
			   of available terminal themes (note: this will open two
			   additional terminal windows). *)
			do shell script "open '$HOME/init/" & themeName & ".terminal'"

			(* Wait a little bit to ensure that the custom theme is added. *)
			delay 1

			(* Set the custom theme as the default terminal theme. *)
			set default settings to settings set themeName

			(* Get the IDs of all the currently opened terminal windows. *)
			set allOpenedWindows to id of every window

			repeat with windowID in allOpenedWindows

				(* Close the additional windows that were opened in order
				   to add the custom theme to the list of terminal themes. *)
				if initialOpenedWindows does not contain windowID then
					close (every window whose id is windowID)

				(* Change the theme for the initial opened terminal windows
				   to remove the need to close them in order for the custom
				   theme to be applied. *)
				else
					set current settings of tabs of (every window whose id is windowID) to settings set themeName
				end if

			end repeat

		end tell
EOD

		### Enable “focus follows mouse” for Terminal.app and all X11 apps
		### i.e. hover over a window and start typing in it without clicking first
		#defaults write com.apple.terminal FocusFollowsMouse -bool true
		#defaults write org.x.X11 wm_ffm -bool true

		### Enable Secure Keyboard Entry in Terminal.app
		### See: https://security.stackexchange.com/a/47786/8918
		defaults write com.apple.terminal SecureKeyboardEntry -bool true

		### Disable the annoying line marks
		defaults write com.apple.Terminal ShowLineMarks -int 0

		### Install the Solarized Dark theme for iTerm
		open "${HOME}/init/Solarized Dark.itermcolors"

		### Don’t display the annoying prompt when quitting iTerm
		defaults write com.googlecode.iterm2 PromptOnQuit -bool false

		###
		echo ""
		echo "Enabling UTF-8 ONLY in Terminal.app and setting the Pro theme by default"
		defaults write com.apple.terminal StringEncodings -array 4
		defaults write com.apple.Terminal "Default Window Settings" -string "Pro"
		defaults write com.apple.Terminal "Startup Window Settings" -string "Pro"
		echo "
		###############################################################################
		# TextEdit
		###############################################################################"
		# Use plain text mode for new TextEdit documents
		defaults write com.apple.TextEdit RichText -bool false

		# Wrap to page
		defaults write com.apple.TextEdit ShowPageBreaks -bool false

		# Open and save files as UTF-8 in TextEdit
		defaults write com.apple.TextEdit PlainTextEncoding -int 4
		defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4

		# Show Ruler
		defaults write com.apple.TextEdit ShowRuler -bool false

		# Disable "Smart" features
		defaults write com.apple.TextEdit SmartDashes -bool false
		defaults write com.apple.TextEdit SmartQuotes -bool false
		defaults write com.apple.TextEdit CorrectSpellingAutomatically -bool false

		# Add ".txt" extensions to plain text files
		defaults write com.apple.TextEdit AddExtensionToNewPlainTextFiles -bool false

		# Display HTML files as HTML code instead of formatted text
		defaults write com.apple.TextEdit IgnoreHTML -bool true

		# TextEdit - Use plain text mode for new documents\n"
		defaults write com.apple.TextEdit RichText -int 0

		# TextEdit - Open and save files as UTF-8 encoding\n"
		defaults write com.apple.TextEdit PlainTextEncoding -int 4
		defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4

###############################################################################
# Time Machine                                                                #
###############################################################################
echo "
###############################################################################
# Time Machine                                                                #
###############################################################################
"


### Prevent Time Machine from prompting to use new hard drives as backup volume
echo ""
echo "Prevent Time Machine from prompting to use new hard drives as backup volume?"
# echo ""
# echo "Prevent Time Machine from prompting to use new hard drives as backup volume? (y/n)"
# read -r response
# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
#   defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true
# fi
defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true



###############################################################################
# Activity Monitor                                                            #
###############################################################################
echo "
###############################################################################
# Activity Monitor                                                            #
###############################################################################
"
# Show the main window when launching Activity Monitor
defaults write com.apple.ActivityMonitor OpenMainWindow -bool true

# Visualize CPU usage in the Activity Monitor Dock icon
defaults write com.apple.ActivityMonitor IconType -int 5

# Show all processes in Activity Monitor
# 100: All Processes
# 101: All Processes, Hierarchally
# 102: My Processes
# 103: System Processes
# 104: Other User Processes
# 105: Active Processes
# 106: Inactive Processes
# 106: Inactive Processes
# 107: Windowed Processes
defaults write com.apple.ActivityMonitor ShowCategory -int 100

# Sort Activity Monitor results by CPU usage
defaults write com.apple.ActivityMonitor SortColumn -string "CPUUsage"
defaults write com.apple.ActivityMonitor SortDirection -int 0

defaults write com.apple.ActivityMonitor "UserColumnsPerTab v5.0" -dict \
    '0' '( Command, CPUUsage, CPUTime, Threads, IdleWakeUps, PID, UID )' \
    '1' '( Command, anonymousMemory, compressedMemory, ResidentSize, ' \
          'PurgeableMem, Threads, Ports, PID, UID)' \
    '2' '( Command, PowerScore, 12HRPower, AppSleep, graphicCard, UID )' \
    '3' '( Command, bytesWritten, bytesRead, Architecture, PID, UID )' \
    '4' '( Command, txBytes, rxBytes, txPackets, rxPackets, PID, UID )'

# Sort columns in each tab
defaults write com.apple.ActivityMonitor UserColumnSortPerTab -dict \
    '0' '{ direction = 0; sort = CPUUsage; }' \
    '1' '{ direction = 0; sort = ResidentSize; }' \
    '2' '{ direction = 0; sort = 12HRPower; }' \
    '3' '{ direction = 0; sort = bytesWritten; }' \
    '4' '{ direction = 0; sort = txBytes; }'

# Update Frequency (in seconds)
# 1: Very often (1 sec)
# 2: Often (2 sec)
# 5: Normally (5 sec)
defaults write com.apple.ActivityMonitor UpdatePeriod -int 2

# Show Data in the Disk graph (instead of IO)
defaults write com.apple.ActivityMonitor DiskGraphType -int 1

# Show Data in the Network graph (instead of packets)
defaults write com.apple.ActivityMonitor NetworkGraphType -int 1

# Change Dock Icon
# 0: Application Icon
# 2: Network Usage
# 3: Disk Activity
# 5: CPU Usage
# 6: CPU History
# defaults write com.apple.ActivityMonitor IconType -int 0

###############################################################################
# Address Book, Dashboard, iCal, TextEdit, and Disk Utility                   #
###############################################################################
echo "
###############################################################################
# Address Book, Dashboard, iCal, TextEdit, Disk Utility and Archive Utility   #
###############################################################################
"
###  Enable the debug menu in Address Book
defaults write com.apple.addressbook ABShowDebugMenu -bool true

# Show first name
# false : Before last name
# true  : Following last name
defaults write com.apple.AddressBook ABNameDisplay -bool false

# Sort by
defaults write com.apple.AddressBook ABNameSortingFormat -string "sortingLastName sortingFirstName"

# Short name format
# 0: Full Name
# 1: First Name & Last Initial
# 2: First Initial & Last Name
# 3: First Name Only
# 4: Last Name Only
defaults write com.apple.AddressBook ABShortNameStyle -int 2

# Prefer nicknames
defaults write com.apple.AddressBook ABShortNamePrefersNickname -bool true

# Address format
defaults write com.apple.AddressBook ABDefaultAddressCountryCode -string "us"

# vCard Format
# falsec: 3.0
# true  : 2.1
defaults write com.apple.AddressBook ABUse21vCardFormat -bool false

# Enable private me card
defaults write com.apple.AddressBook ABPrivateVCardFieldsEnabled -bool false

# Export notes in vCards
defaults write com.apple.AddressBook ABIncludeNotesInVCard -bool false

# Export photos in vCards
defaults write com.apple.AddressBook ABIncludePhotosInVCard -bool false

# Show first name:
# 1: Before last name
# 2: Following last name
defaults write NSGlobalDomain NSPersonNameDefaultDisplayNameOrder -int 1

# Prefer nicknames
defaults write NSGlobalDomain NSPersonNameDefaultShouldPreferNicknamesPreference -bool true


### Enable Dashboard dev mode (allows keeping widgets on the desktop)
defaults write com.apple.dashboard devmode -bool true

### Enable the debug menu in iCal (pre-10.8)
defaults write com.apple.iCal IncludeDebugMenu -bool


# Days per week
defaults write com.apple.iCal "n days of week" -int 5

# Start week on:
# 0: Sunday
# 6: Saturday
defaults write com.apple.iCal "first day of week" -int 0

# Scroll in week view by:
# 0: Day
# 1: Week
# 2: Week, Stop on Today
defaults write com.apple.iCal "scroll by weeks in week view" -int 0

# Day starts at:
defaults write com.apple.iCal "first minute of work hours" -int 480

# Day ends at:
defaults write com.apple.iCal "last minute of work hours" -int 1080

# Show X hours at a time
defaults write com.apple.iCal "number of hours displayed" -int 12

# Turn on timezone support
defaults write com.apple.iCal "TimeZone support enabled" -bool true

# Show events in year view
defaults write com.apple.iCal "Show heat map in Year View" -bool true

# Show week numbers
defaults write com.apple.iCal "Show Week Numbers" -bool true

# Open events in seperate windows
# defaults write com.apple.iCal OpenEventsInWindowType -bool true

# Ask before sending changes to events
defaults write com.apple.iCal WarnBeforeSendingInvitations -bool true 

### Make the iTunes arrow links go to your library instead of the iTunes Store
# defaults write com.apple.iTunes invertStoreLinks -bool true

### Disable the iTunes arrow links completely
# defaults write com.apple.iTunes show-store-arrow-links -bool false

### Disable the Ping sidebar in iTunes
defaults write com.apple.iTunes disablePingSidebar -bool true

### Disable all the other Ping stuff in iTunes
defaults write com.apple.iTunes disablePing -bool true

### Make ⌘ + F focus the search input in iTunes
defaults write com.apple.iTunes NSUserKeyEquivalents -dict-add "Target Search Field" "@F"

### Disable automatic backup of iOS devices when detected by iTunes
defaults write com.apple.iTunes AutomaticDeviceBackupsDisabled -bool true

### Use plain text mode for new TextEdit documents
defaults write com.apple.TextEdit RichText -int 0

### Open and save files as UTF-8 in TextEdit
defaults write com.apple.TextEdit PlainTextEncoding -int 4
defaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4

### Enable the debug menu in Disk Utility
defaults write com.apple.DiskUtility DUDebugMenuEnabled -bool true
defaults write com.apple.DiskUtility advanced-image-options -bool true

# Show All Devices
defaults write com.apple.DiskUtility SidebarShowAllDevices -bool true

### Auto-play videos when opened with QuickTime Player
defaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen -bool true

### Move archive files to trash after expansion
echo "Move archive files to trash after expansion"
# Delete directly: "/dev/null"
# Leave alone (default) "."
defaults write com.apple.archiveutility dearchive-move-after -string "~/.Trash"

###############################################################################
# Maps                                                               #
###############################################################################
echo "
###############################################################################
# Maps                                                               #
###############################################################################
"


   defaults write com.apple.Maps LastClosedWindowViewOptions "{
                localizeLabels = 1;   // show labels in English
                mapType = 11;         // show hybrid map
                trafficEnabled = 0;   // do not show traffic
             }"


###############################################################################
# Mac App Store                                                               #
###############################################################################
echo "
###############################################################################
# Mac App Store                                                               #
###############################################################################"
# Enable the WebKit Developer Tools in the Mac App Store
defaults write com.apple.appstore WebKitDeveloperExtras -bool true

# Enable Debug Menu in the Mac App Store
defaults write com.apple.appstore ShowDebugMenu -bool true

# Enable the automatic update check
defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true

# Check for software updates daily, not just once per week
echo ""
echo "Check for software updates daily, not just once per week"
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

# Download newly available updates in background
defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

# Install System data files & security updates
defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

# Automatically download apps purchased on other Macs
defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1

# Turn on app auto-update
defaults write com.apple.commerce AutoUpdate -bool true

# Allow the App Store to reboot machine on macOS updates
defaults write com.apple.commerce AutoUpdateRestartRequired -bool true

###############################################################################
# iPhotos                                                                     #
###############################################################################
echo "
###############################################################################
# iPhotos                                                                     #
###############################################################################
"
# Prevent Photos from opening automatically when devices are plugged in
defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true


# Startup (with iCloud Photos selected)
defaults write com.apple.Photos IPXDefaultDidPromoteiCloudPhotosInGettingStarted -bool true
defaults write com.apple.Photos IPXDefaultHasBeenLaunched -bool true
defaults write com.apple.Photos IPXDefaultHasChosenToEnableiCloudPhotosInGettingStarted = 1;

# Summarize photos
# You can choose compast, summarized views for Collections and Years
defaults write com.apple.Photos IPXDefaultPhotosSummarizePhotos -bool true

# Copy items to the Photos library
# Only items copied to the library will upload to iCloud Photo library (when disabled)
defaults write com.apple.Photos IPXDefaultImportUseReferencedImport -bool false

# Include location information for published items
defaults write com.apple.Photos IPXDefaultPlacesPublishPlaceInfo -bool false

# Print Products Store
# Choose a store based on your billing address.
defaults write com.apple.Photos KHStoreCountryExplicitlySetByUserKey -bool true
defaults write com.apple.Photos KHUserPreferredStoreCountryKey -string 'US'

###############################################################################
# Font Book
###############################################################################

# Preview type and mode
# 0 : Custom
# 1 : Repertoire
# 2 : Sample
# 3 : Font Info
defaults write com.apple.FontBook FBPreviewTypeKey -int 1
defaults write com.apple.FontBook FBPreviewModeKey -int 1

# Resolve duplicates by moving files to the trash
defaults write com.apple.FontBook FBResolveByMovingToTrashKey -bool true

# Default sample font size
defaults write com.apple.FontBook FBSampleSize -int 18

# Default Install Location
# 1 : Computer
# 3 : User
defaults write com.apple.FontBook FBDefaultInstallDomainRef -int 3

# Sample text
defaults write com.apple.FontBook FBComparisonViewText -string 'The quick brown fox jumps over the lazy dog.'
defaults write com.apple.FontBook FBCustomSampleString -string 'The quick brown fox jumps over the lazy dog.'

# Automatic font activation
defaults write com.apple.ATS ATSAutoActivation -string "ATSAutoActivationEnable"

###############################################################################
# iWork
###############################################################################

## Keynote

#defaults write com.apple.iWork.Keynote 'ShowStartingPointsForNewDocument' -bool false
defaults write com.apple.iWork.Keynote 'dontShowWhatsNew' -bool true
defaults write com.apple.iWork.Keynote 'FirstRunFlag' -bool true


## Numbers

#defaults write com.apple.iWork.Numbers 'ShowStartingPointsForNewDocument' -bool false
defaults write com.apple.iWork.Numbers 'dontShowWhatsNew' -bool true
defaults write com.apple.iWork.Numbers 'FirstRunFlag' -bool true


# Pages

#defaults write com.apple.iWork.Pages 'ShowStartingPointsForNewDocument' -bool false
defaults write com.apple.iWork.Pages 'dontShowWhatsNew' -bool true
defaults write com.apple.iWork.Pages 'FirstRunFlag' -bool true

###############################################################################
# Messages                                                                    #
###############################################################################
echo "
###############################################################################
# Messages                                                                    #
###############################################################################"
### Disable automatic emoji substitution (i.e. use plain text smileys)
echo ""
echo "Disable automatic emoji substitution in Messages.app? (i.e. use plain text smileys) (y/n)"
# read -r response
# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
#   defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticEmojiSubstitutionEnablediMessage" -bool false
# fi
defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticEmojiSubstitutionEnablediMessage" -bool false

### Disable smart quotes as it’s annoying for messages that contain code
echo ""
echo "Disable smart quotes in Messages.app? (it's annoying for messages that contain code) (y/n)"
# read -r response
# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
#   defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticQuoteSubstitutionEnabled" -bool false
# fi
defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "automaticQuoteSubstitutionEnabled" -bool false

### Disable continuous spell checking
# echo ""
# echo "Disable continuous spell checking in Messages.app? (y/n)"
# read -r response
# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
#   defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" -bool false
# fi
defaults write com.apple.messageshelper.MessageController SOInputLineSettings -dict-add "continuousSpellCheckingEnabled" -bool false

# Save history when conversations are closed
defaults write com.apple.iChat SaveConversationsOnClose -bool true

# Test size
# 1: Small
# 7: Large
defaults write com.apple.iChat TextSize -int 2

# Anumate buddy pictures
defaults write com.apple.iChat AnimateBuddyPictures -bool false

# Play sound effects
defaults write com.apple.messageshelper.AlertsController PlaySoundsKey -bool false

# Notify me when my name is mentioned
defaults write com.apple.messageshelper.AlertsController SOAlertsAddressMeKey -bool false

# Notify me about messages form unknown contacts
defaults write com.apple.messageshelper.AlertsController NotifyAboutKnockKnockKey -bool false

# Show all buddy pictures in conversations
defaults write com.apple.iChat ShowAllBuddyPictures -bool false
###############################################################################
# Google Chrome & Google Chrome Canary                                        #
###############################################################################
echo "
###############################################################################
# Google Chrome & Google Chrome Canary                                                                    #
###############################################################################
"

# Allow installing user scripts via GitHub Gist or Userscripts.org
defaults write com.google.Chrome ExtensionInstallSources -array "https://gist.githubusercontent.com/" "http://userscripts.org/*"
defaults write com.google.Chrome.canary ExtensionInstallSources -array "https://gist.githubusercontent.com/" "http://userscripts.org/*"

# Disable the all too sensitive backswipe on trackpads
defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false
defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false

# Disable the all too sensitive backswipe on Magic Mouse
defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false
defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false

# Use the system-native print preview dialog
defaults write com.google.Chrome DisablePrintPreview -bool true
defaults write com.google.Chrome.canary DisablePrintPreview -bool true

# Expand the print dialog by default
defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true
defaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true


###############################################################################
# GPGMail 2                                                                   #
###############################################################################
echo "
###############################################################################
# GPGMail 2                                                                   #
###############################################################################"
# Disable signing emails by default
defaults write ~/Library/Preferences/org.gpgtools.gpgmail SignNewEmailsByDefault -bool false

###############################################################################
# Opera & Opera Developer                                                     #
###############################################################################
echo "
###############################################################################
# Opera & Opera Developer                                                     #
###############################################################################"
# Expand the print dialog by default
defaults write com.operasoftware.Opera PMPrintingExpandedStateForPrint2 -boolean true
defaults write com.operasoftware.OperaDeveloper PMPrintingExpandedStateForPrint2 -boolean true

###############################################################################
# SizeUp.app                                                                  #
###############################################################################
echo "
###############################################################################
# SizeUp.app                                                                  #
###############################################################################
"
# Start SizeUp at login
defaults write com.irradiatedsoftware.SizeUp StartAtLogin -bool true

# Don’t show the preferences window on next start
defaults write com.irradiatedsoftware.SizeUp ShowPrefsOnNextStart -bool false

###############################################################################
# Sublime Text                                                                #
###############################################################################
echo "
###############################################################################
# Sublime Text                                                                #
###############################################################################
"
# Install Sublime Text settings
cp -r init/Preferences.sublime-settings ~/Library/Application\ Support/Sublime\ Text*/Packages/User/Preferences.sublime-settings 2> /dev/null

# echo ""
# echo "Do you use Sublime Text 3 as your editor of choice, and is it installed?"
# read -r response
# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
#   # Installing from homebrew cask does the following for you!
#   # echo ""
#   # echo "Linking Sublime Text for command line usage as subl"
#   # ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /usr/local/bin/subl

#   echo ""
#   echo "Setting Git to use Sublime Text as default editor"
#   git config --global core.editor "subl -n -w"
# fi


###############################################################################
# Twitter.app                                                                 #
###############################################################################
echo "
###############################################################################
# Twitter.app                                                                 #
###############################################################################
"
# Disable smart quotes as it’s annoying for code tweets
defaults write com.twitter.twitter-mac AutomaticQuoteSubstitutionEnabled -bool false

# Show the app window when clicking the menu bar icon
defaults write com.twitter.twitter-mac MenuItemBehavior -int 1

# Enable the hidden ‘Develop’ menu
defaults write com.twitter.twitter-mac ShowDevelopMenu -bool true

# Open links in the background
defaults write com.twitter.twitter-mac openLinksInBackground -bool true

# Allow closing the ‘new tweet’ window by pressing `Esc`
defaults write com.twitter.twitter-mac ESCClosesComposeWindow -bool true

# Show full names rather than Twitter handles
defaults write com.twitter.twitter-mac ShowFullNames -bool true

# Hide the app in the background if it’s not the front-most window
defaults write com.twitter.twitter-mac HideInBackground -bool true

###############################################################################
# Spectacle.app                                                               #
###############################################################################
echo "
###############################################################################
# Spectacle.app                                                               #
###############################################################################
"
# Set up my preferred keyboard shortcuts
defaults write com.divisiblebyzero.Spectacle MakeLarger -data 62706c6973743030d40102030405061819582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708101155246e756c6cd4090a0b0c0d0e0d0f596d6f64696669657273546e616d65576b6579436f64655624636c6173731000800280035a4d616b654c6172676572d2121314155a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21617585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11a1b54726f6f74800108111a232d32373c424b555a62696b6d6f7a7f8a939c9fa8b1c3c6cb0000000000000101000000000000001c000000000000000000000000000000cd
defaults write com.divisiblebyzero.Spectacle MakeSmaller -data 62706c6973743030d40102030405061819582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708101155246e756c6cd4090a0b0c0d0e0d0f596d6f64696669657273546e616d65576b6579436f64655624636c6173731000800280035b4d616b65536d616c6c6572d2121314155a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21617585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11a1b54726f6f74800108111a232d32373c424b555a62696b6d6f7b808b949da0a9b2c4c7cc0000000000000101000000000000001c000000000000000000000000000000ce
defaults write com.divisiblebyzero.Spectacle MoveToBottomDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107d80035f10134d6f7665546f426f74746f6d446973706c6179d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a217185d5a65726f4b6974486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072888d98a1afb2c0c9dbdee30000000000000101000000000000001d000000000000000000000000000000e5
defaults write com.divisiblebyzero.Spectacle MoveToBottomHalf -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107d80035f10104d6f7665546f426f74746f6d48616c66d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072858a959ea7aab3bcced1d60000000000000101000000000000001d000000000000000000000000000000d8
defaults write com.divisiblebyzero.Spectacle MoveToCenter -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002100880035c4d6f7665546f43656e746572d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e70727f848f98a1a4adb6c8cbd00000000000000101000000000000001d000000000000000000000000000000d2
defaults write com.divisiblebyzero.Spectacle MoveToFullscreen -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002102e80035f10104d6f7665546f46756c6c73637265656ed2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072858a959ea7aab3bcced1d60000000000000101000000000000001d000000000000000000000000000000d8
defaults write com.divisiblebyzero.Spectacle MoveToLeftDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107b80035f10114d6f7665546f4c656674446973706c6179d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a217185d5a65726f4b6974486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072868b969fadb0bec7d9dce10000000000000101000000000000001d000000000000000000000000000000e3
defaults write com.divisiblebyzero.Spectacle MoveToLeftHalf -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107b80035e4d6f7665546f4c65667448616c66d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e70728186919aa3a6afb8cacdd20000000000000101000000000000001d000000000000000000000000000000d4
defaults write com.divisiblebyzero.Spectacle MoveToLowerLeft -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731113008002107b80035f100f4d6f7665546f4c6f7765724c656674d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e70728489949dabafbdc6cfe1e4e90000000000000101000000000000001e000000000000000000000000000000eb
defaults write com.divisiblebyzero.Spectacle MoveToLowerRight -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731113008002107c80035f10104d6f7665546f4c6f7765725269676874d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e7072858a959eacb0bec7d0e2e5ea0000000000000101000000000000001e000000000000000000000000000000ec
defaults write com.divisiblebyzero.Spectacle MoveToNextDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731118008002107c80035f10114d6f7665546f4e657874446973706c6179d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072868b969fa8abb4bdcfd2d70000000000000101000000000000001d000000000000000000000000000000d9
defaults write com.divisiblebyzero.Spectacle MoveToNextThird -data 62706c6973743030d40102030405061819582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708101155246e756c6cd4090a0b0c0d0e0d0f596d6f64696669657273546e616d65576b6579436f64655624636c6173731000800280035f100f4d6f7665546f4e6578745468697264d2121314155a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21617585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11a1b54726f6f74800108111a232d32373c424b555a62696b6d6f8186919aa3a6afb8cacdd20000000000000101000000000000001c000000000000000000000000000000d4
defaults write com.divisiblebyzero.Spectacle MoveToPreviousDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731118008002107b80035f10154d6f7665546f50726576696f7573446973706c6179d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e70728a8f9aa3acafb8c1d3d6db0000000000000101000000000000001d000000000000000000000000000000dd
defaults write com.divisiblebyzero.Spectacle MoveToPreviousThird -data 62706c6973743030d40102030405061819582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708101155246e756c6cd4090a0b0c0d0e0d0f596d6f64696669657273546e616d65576b6579436f64655624636c6173731000800280035f10134d6f7665546f50726576696f75735468697264d2121314155a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21617585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11a1b54726f6f74800108111a232d32373c424b555a62696b6d6f858a959ea7aab3bcced1d60000000000000101000000000000001c000000000000000000000000000000d8
defaults write com.divisiblebyzero.Spectacle MoveToRightDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107c80035f10124d6f7665546f5269676874446973706c6179d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a217185d5a65726f4b6974486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072878c97a0aeb1bfc8dadde20000000000000101000000000000001d000000000000000000000000000000e4
defaults write com.divisiblebyzero.Spectacle MoveToRightHalf -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107c80035f100f4d6f7665546f526967687448616c66d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e70728489949da6a9b2bbcdd0d50000000000000101000000000000001d000000000000000000000000000000d7
defaults write com.divisiblebyzero.Spectacle MoveToTopDisplay -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107e80035f10104d6f7665546f546f70446973706c6179d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a217185d5a65726f4b6974486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e7072858a959eacafbdc6d8dbe00000000000000101000000000000001d000000000000000000000000000000e2
defaults write com.divisiblebyzero.Spectacle MoveToTopHalf -data 62706c6973743030d4010203040506191a582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731119008002107e80035d4d6f7665546f546f7048616c66d2131415165a24636c6173736e616d655824636c6173736573585a4b486f744b6579a21718585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11b1c54726f6f74800108111a232d32373c424b555a62696c6e707280859099a2a5aeb7c9ccd10000000000000101000000000000001d000000000000000000000000000000d3
defaults write com.divisiblebyzero.Spectacle MoveToUpperLeft -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731111008002107b80035f100f4d6f7665546f55707065724c656674d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e70728489949dabafbdc6cfe1e4e90000000000000101000000000000001e000000000000000000000000000000eb
defaults write com.divisiblebyzero.Spectacle MoveToUpperRight -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731111008002107c80035f10104d6f7665546f55707065725269676874d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e7072858a959eacb0bec7d0e2e5ea0000000000000101000000000000001e000000000000000000000000000000ec
defaults write com.divisiblebyzero.Spectacle RedoLastMove -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c617373110b008002100680035c5265646f4c6173744d6f7665d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e70727f848f98a6aab8c1cadcdfe40000000000000101000000000000001e000000000000000000000000000000e6
defaults write com.divisiblebyzero.Spectacle UndoLastMove -data 62706c6973743030d40102030405061a1b582476657273696f6e58246f626a65637473592461726368697665725424746f7012000186a0a40708111255246e756c6cd4090a0b0c0d0e0f10596d6f64696669657273546e616d65576b6579436f64655624636c6173731109008002100680035c556e646f4c6173744d6f7665d2131415165a24636c6173736e616d655824636c61737365735d5a65726f4b6974486f744b6579a31718195d5a65726f4b6974486f744b6579585a4b486f744b6579584e534f626a6563745f100f4e534b657965644172636869766572d11c1d54726f6f74800108111a232d32373c424b555a62696c6e70727f848f98a6aab8c1cadcdfe40000000000000101000000000000001e000000000000000000000000000000e6

###############################################################################
# Transmission.app                                                            #
###############################################################################
echo "
###############################################################################
# Transmission.app                                                            #
###############################################################################
"
### Use `~/Documents/Torrents` to store incomplete downloads
defaults write org.m0k.transmission UseIncompleteDownloadFolder -bool true
defaults write org.m0k.transmission IncompleteDownloadFolder -string "${HOME}/Documents/Torrents"

### Don’t prompt for confirmation before downloading
defaults write org.m0k.transmission DownloadAsk -bool false

### Trash original torrent files
defaults write org.m0k.transmission DeleteOriginalTorrent -bool true

### Hide the donate message
defaults write org.m0k.transmission WarningDonate -bool false

### Hide the legal disclaimer
defaults write org.m0k.transmission WarningLegal -bool false
# echo ""
# echo "Do you use Transmission for torrenting? (y/n)"
# read -r response
# if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
#   mkdir -p ~/Downloads/Incomplete

#   echo ""
#   echo "Setting up an incomplete downloads folder in Downloads"
#   defaults write org.m0k.transmission UseIncompleteDownloadFolder -bool true
#   defaults write org.m0k.transmission IncompleteDownloadFolder -string "${HOME}/Downloads/Incomplete"

#   echo ""
#   echo "Setting auto-add folder to be Downloads"
#   defaults write org.m0k.transmission AutoImportDirectory -string "${HOME}/Downloads"

#   echo ""
#   echo "Don't prompt for confirmation before downloading"
#   defaults write org.m0k.transmission DownloadAsk -bool false

#   echo ""
#   echo "Trash original torrent files after adding them"
#   defaults write org.m0k.transmission DeleteOriginalTorrent -bool true

#   echo ""
#   echo "Hiding the donate message"
#   defaults write org.m0k.transmission WarningDonate -bool false

#   echo ""
#   echo "Hiding the legal disclaimer"
#   defaults write org.m0k.transmission WarningLegal -bool false

#   echo ""
#   echo "Auto-resizing the window to fit transfers"
#   defaults write org.m0k.transmission AutoSize -bool true

#   echo ""
#   echo "Auto updating to betas"
#   defaults write org.m0k.transmission AutoUpdateBeta -bool true

#   echo ""
#   echo "Setting up the best block list"
#   defaults write org.m0k.transmission EncryptionRequire -bool true
#   defaults write org.m0k.transmission BlocklistAutoUpdate -bool true
#   defaults write org.m0k.transmission BlocklistNew -bool true
#   defaults write org.m0k.transmission BlocklistURL -string "http://john.bitsurge.net/public/biglist.p2p.gz"
# fi


###############################################################################
# Sublime Text
###############################################################################
echo "
###############################################################################
# Sublime Text
###############################################################################
"
echo ""
echo "Do you use Sublime Text 3 as your editor of choice, and is it installed?"
read -r response
if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
  # Installing from homebrew cask does the following for you!
  # echo ""
  # echo "Linking Sublime Text for command line usage as subl"
  # ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /usr/local/bin/subl

  echo ""
  echo "Setting Git to use Sublime Text as default editor"
  git config --global core.editor "subl -n -w"
fi

###############################################################################
# Tweetbot.app                                                                #
###############################################################################
echo "
###############################################################################
# Tweetbot.app                                                                #
###############################################################################
"

# Bypass the annoyingly slow t.co URL shortener
# defaults write com.tapbots.TweetbotMac OpenURLsDirectly -bool true

###############################################################################
# Kill affected applications                                                  #
###############################################################################

for app in "Activity Monitor" "Address Book" "Calendar" "Contacts" "cfprefsd" \
	"Dock" "Finder" "Google Chrome" "Google Chrome Canary" "Mail" "Messages" \
	"Opera" "Safari" "SizeUp" "Spectacle" "SystemUIServer" "Terminal" \
	"Transmission" "Twitter" "iCal"; do
	killall "${app}" > /dev/null 2>&1
done
echo "Done. Note that some of these changes require a logout/restart to take effect."
